Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> external_declaration
Rule 2     program -> program external_declaration
Rule 3     external_declaration -> function_definition
Rule 4     external_declaration -> declaration
Rule 5     function_definition -> type_specifier ID LPAREN parameter_list RPAREN compound_statement
Rule 6     function_definition -> type_specifier ID LPAREN RPAREN compound_statement
Rule 7     declaration -> init_declarator_list SEMI
Rule 8     init_declarator_list -> type_specifier init_declarator
Rule 9     init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 10    type_specifier -> int
Rule 11    type_specifier -> float
Rule 12    type_specifier -> str
Rule 13    init_declarator -> declarator
Rule 14    init_declarator -> declarator EQUALS initializer
Rule 15    declarator -> ID
Rule 16    declarator -> ID LBRACKET constant_expression RBRACKET
Rule 17    parameter_list -> parameter
Rule 18    parameter_list -> parameter_list COMMA parameter
Rule 19    parameter -> type_specifier declarator
Rule 20    initializer -> assignment_expression
Rule 21    statement_list -> statement
Rule 22    statement_list -> statement_list statement
Rule 23    statement -> expression_statement
Rule 24    statement -> declaration
Rule 25    statement -> compound_statement
Rule 26    statement -> selection_statement
Rule 27    statement -> iteration_statement
Rule 28    statement -> jump_statement
Rule 29    expression_statement -> expression SEMI
Rule 30    compound_statement -> LBRACE statement_list RBRACE
Rule 31    compound_statement -> LBRACE RBRACE
Rule 32    selection_statement -> if LPAREN expression RPAREN statement
Rule 33    selection_statement -> if LPAREN expression RPAREN statement else statement
Rule 34    iteration_statement -> while LPAREN expression RPAREN statement
Rule 35    iteration_statement -> do statement while LPAREN expression RPAREN SEMI
Rule 36    iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement
Rule 37    jump_statement -> return expression SEMI
Rule 38    expression -> assignment_expression
Rule 39    expression -> expression COMMA assignment_expression
Rule 40    assignment_expression -> conditional_expression
Rule 41    assignment_expression -> ID LBRACKET constant_expression RBRACKET EQUALS assignment_expression
Rule 42    assignment_expression -> ID EQUALS assignment_expression
Rule 43    conditional_expression -> logical_or_expression
Rule 44    conditional_expression -> logical_or_expression TERNARY expression COLON conditional_expression
Rule 45    constant_expression -> conditional_expression
Rule 46    logical_or_expression -> logical_and_expression
Rule 47    logical_or_expression -> logical_or_expression LOR logical_and_expression
Rule 48    logical_and_expression -> equality_expression
Rule 49    logical_and_expression -> logical_and_expression LAND equality_expression
Rule 50    equality_expression -> relational_expression
Rule 51    equality_expression -> equality_expression EQ relational_expression
Rule 52    equality_expression -> equality_expression NE relational_expression
Rule 53    relational_expression -> additive_expression
Rule 54    relational_expression -> relational_expression LT additive_expression
Rule 55    relational_expression -> relational_expression GT additive_expression
Rule 56    relational_expression -> relational_expression LE additive_expression
Rule 57    relational_expression -> relational_expression GE additive_expression
Rule 58    additive_expression -> multiplicative_expression
Rule 59    additive_expression -> additive_expression PLUS multiplicative_expression
Rule 60    additive_expression -> additive_expression MINUS multiplicative_expression
Rule 61    multiplicative_expression -> unary_expression
Rule 62    multiplicative_expression -> multiplicative_expression TIMES unary_expression
Rule 63    multiplicative_expression -> multiplicative_expression DIVIDE unary_expression
Rule 64    multiplicative_expression -> multiplicative_expression MODULO unary_expression
Rule 65    unary_expression -> postfix_expression
Rule 66    unary_expression -> LNOT unary_expression
Rule 67    unary_expression -> MINUS unary_expression
Rule 68    unary_expression -> INCREMENT unary_expression
Rule 69    unary_expression -> DECREMENT unary_expression
Rule 70    postfix_expression -> primary_expression
Rule 71    postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 72    postfix_expression -> ID LPAREN argument_expression_list RPAREN
Rule 73    primary_expression -> ID
Rule 74    primary_expression -> INTEGER
Rule 75    primary_expression -> FLOAT
Rule 76    primary_expression -> STR
Rule 77    primary_expression -> LPAREN expression RPAREN
Rule 78    argument_expression_list -> assignment_expression
Rule 79    argument_expression_list -> argument_expression_list COMMA assignment_expression

Terminals, with rules where they appear

COLON                : 44
COMMA                : 9 18 39 79
DECREMENT            : 69
DIVIDE               : 63
EQ                   : 51
EQUALS               : 14 41 42
FLOAT                : 75
GE                   : 57
GT                   : 55
ID                   : 5 6 15 16 41 42 72 73
INCREMENT            : 68
INTEGER              : 74
LAND                 : 49
LBRACE               : 30 31
LBRACKET             : 16 41 71
LE                   : 56
LNOT                 : 66
LOR                  : 47
LPAREN               : 5 6 32 33 34 35 36 72 77
LT                   : 54
MINUS                : 60 67
MODULO               : 64
NE                   : 52
PLUS                 : 59
RBRACE               : 30 31
RBRACKET             : 16 41 71
RPAREN               : 5 6 32 33 34 35 36 72 77
SEMI                 : 7 29 35 36 36 37
STR                  : 76
TERNARY              : 44
TIMES                : 62
do                   : 35
else                 : 33
error                : 
float                : 11
for                  : 36
if                   : 32 33
int                  : 10
return               : 37
str                  : 12
while                : 34 35

Nonterminals, with rules where they appear

additive_expression  : 53 54 55 56 57 59 60
argument_expression_list : 72 79
assignment_expression : 20 38 39 41 42 78 79
compound_statement   : 5 6 25
conditional_expression : 40 44 45
constant_expression  : 16 41
declaration          : 4 24
declarator           : 13 14 19
equality_expression  : 48 49 51 52
expression           : 29 32 33 34 35 36 36 36 37 39 44 71 77
expression_statement : 23
external_declaration : 1 2
function_definition  : 3
init_declarator      : 8 9
init_declarator_list : 7 9
initializer          : 14
iteration_statement  : 27
jump_statement       : 28
logical_and_expression : 46 47 49
logical_or_expression : 43 44 47
multiplicative_expression : 58 59 60 62 63 64
parameter            : 17 18
parameter_list       : 5 18
postfix_expression   : 65 71
primary_expression   : 70
program              : 2 0
relational_expression : 50 51 52 54 55 56 57
selection_statement  : 26
statement            : 21 22 32 33 33 34 35 36
statement_list       : 22 30
type_specifier       : 5 6 8 19
unary_expression     : 61 62 63 64 66 67 68 69

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . external_declaration
    (2) program -> . program external_declaration
    (3) external_declaration -> . function_definition
    (4) external_declaration -> . declaration
    (5) function_definition -> . type_specifier ID LPAREN parameter_list RPAREN compound_statement
    (6) function_definition -> . type_specifier ID LPAREN RPAREN compound_statement
    (7) declaration -> . init_declarator_list SEMI
    (10) type_specifier -> . int
    (11) type_specifier -> . float
    (12) type_specifier -> . str
    (8) init_declarator_list -> . type_specifier init_declarator
    (9) init_declarator_list -> . init_declarator_list COMMA init_declarator

    int             shift and go to state 7
    float           shift and go to state 8
    str             shift and go to state 9

    program                        shift and go to state 1
    external_declaration           shift and go to state 2
    function_definition            shift and go to state 3
    declaration                    shift and go to state 4
    type_specifier                 shift and go to state 5
    init_declarator_list           shift and go to state 6

state 1

    (0) S' -> program .
    (2) program -> program . external_declaration
    (3) external_declaration -> . function_definition
    (4) external_declaration -> . declaration
    (5) function_definition -> . type_specifier ID LPAREN parameter_list RPAREN compound_statement
    (6) function_definition -> . type_specifier ID LPAREN RPAREN compound_statement
    (7) declaration -> . init_declarator_list SEMI
    (10) type_specifier -> . int
    (11) type_specifier -> . float
    (12) type_specifier -> . str
    (8) init_declarator_list -> . type_specifier init_declarator
    (9) init_declarator_list -> . init_declarator_list COMMA init_declarator

    int             shift and go to state 7
    float           shift and go to state 8
    str             shift and go to state 9

    external_declaration           shift and go to state 10
    function_definition            shift and go to state 3
    declaration                    shift and go to state 4
    type_specifier                 shift and go to state 5
    init_declarator_list           shift and go to state 6

state 2

    (1) program -> external_declaration .

    int             reduce using rule 1 (program -> external_declaration .)
    float           reduce using rule 1 (program -> external_declaration .)
    str             reduce using rule 1 (program -> external_declaration .)
    $end            reduce using rule 1 (program -> external_declaration .)


state 3

    (3) external_declaration -> function_definition .

    int             reduce using rule 3 (external_declaration -> function_definition .)
    float           reduce using rule 3 (external_declaration -> function_definition .)
    str             reduce using rule 3 (external_declaration -> function_definition .)
    $end            reduce using rule 3 (external_declaration -> function_definition .)


state 4

    (4) external_declaration -> declaration .

    int             reduce using rule 4 (external_declaration -> declaration .)
    float           reduce using rule 4 (external_declaration -> declaration .)
    str             reduce using rule 4 (external_declaration -> declaration .)
    $end            reduce using rule 4 (external_declaration -> declaration .)


state 5

    (5) function_definition -> type_specifier . ID LPAREN parameter_list RPAREN compound_statement
    (6) function_definition -> type_specifier . ID LPAREN RPAREN compound_statement
    (8) init_declarator_list -> type_specifier . init_declarator
    (13) init_declarator -> . declarator
    (14) init_declarator -> . declarator EQUALS initializer
    (15) declarator -> . ID
    (16) declarator -> . ID LBRACKET constant_expression RBRACKET

    ID              shift and go to state 11

    init_declarator                shift and go to state 12
    declarator                     shift and go to state 13

state 6

    (7) declaration -> init_declarator_list . SEMI
    (9) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI            shift and go to state 14
    COMMA           shift and go to state 15


state 7

    (10) type_specifier -> int .

    ID              reduce using rule 10 (type_specifier -> int .)


state 8

    (11) type_specifier -> float .

    ID              reduce using rule 11 (type_specifier -> float .)


state 9

    (12) type_specifier -> str .

    ID              reduce using rule 12 (type_specifier -> str .)


state 10

    (2) program -> program external_declaration .

    int             reduce using rule 2 (program -> program external_declaration .)
    float           reduce using rule 2 (program -> program external_declaration .)
    str             reduce using rule 2 (program -> program external_declaration .)
    $end            reduce using rule 2 (program -> program external_declaration .)


state 11

    (5) function_definition -> type_specifier ID . LPAREN parameter_list RPAREN compound_statement
    (6) function_definition -> type_specifier ID . LPAREN RPAREN compound_statement
    (15) declarator -> ID .
    (16) declarator -> ID . LBRACKET constant_expression RBRACKET

    LPAREN          shift and go to state 16
    EQUALS          reduce using rule 15 (declarator -> ID .)
    SEMI            reduce using rule 15 (declarator -> ID .)
    COMMA           reduce using rule 15 (declarator -> ID .)
    LBRACKET        shift and go to state 17


state 12

    (8) init_declarator_list -> type_specifier init_declarator .

    SEMI            reduce using rule 8 (init_declarator_list -> type_specifier init_declarator .)
    COMMA           reduce using rule 8 (init_declarator_list -> type_specifier init_declarator .)


state 13

    (13) init_declarator -> declarator .
    (14) init_declarator -> declarator . EQUALS initializer

    SEMI            reduce using rule 13 (init_declarator -> declarator .)
    COMMA           reduce using rule 13 (init_declarator -> declarator .)
    EQUALS          shift and go to state 18


state 14

    (7) declaration -> init_declarator_list SEMI .

    int             reduce using rule 7 (declaration -> init_declarator_list SEMI .)
    float           reduce using rule 7 (declaration -> init_declarator_list SEMI .)
    str             reduce using rule 7 (declaration -> init_declarator_list SEMI .)
    $end            reduce using rule 7 (declaration -> init_declarator_list SEMI .)
    RBRACE          reduce using rule 7 (declaration -> init_declarator_list SEMI .)
    LBRACE          reduce using rule 7 (declaration -> init_declarator_list SEMI .)
    if              reduce using rule 7 (declaration -> init_declarator_list SEMI .)
    while           reduce using rule 7 (declaration -> init_declarator_list SEMI .)
    do              reduce using rule 7 (declaration -> init_declarator_list SEMI .)
    for             reduce using rule 7 (declaration -> init_declarator_list SEMI .)
    return          reduce using rule 7 (declaration -> init_declarator_list SEMI .)
    ID              reduce using rule 7 (declaration -> init_declarator_list SEMI .)
    LNOT            reduce using rule 7 (declaration -> init_declarator_list SEMI .)
    MINUS           reduce using rule 7 (declaration -> init_declarator_list SEMI .)
    INCREMENT       reduce using rule 7 (declaration -> init_declarator_list SEMI .)
    DECREMENT       reduce using rule 7 (declaration -> init_declarator_list SEMI .)
    INTEGER         reduce using rule 7 (declaration -> init_declarator_list SEMI .)
    FLOAT           reduce using rule 7 (declaration -> init_declarator_list SEMI .)
    STR             reduce using rule 7 (declaration -> init_declarator_list SEMI .)
    LPAREN          reduce using rule 7 (declaration -> init_declarator_list SEMI .)
    else            reduce using rule 7 (declaration -> init_declarator_list SEMI .)


state 15

    (9) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (13) init_declarator -> . declarator
    (14) init_declarator -> . declarator EQUALS initializer
    (15) declarator -> . ID
    (16) declarator -> . ID LBRACKET constant_expression RBRACKET

    ID              shift and go to state 20

    init_declarator                shift and go to state 19
    declarator                     shift and go to state 13

state 16

    (5) function_definition -> type_specifier ID LPAREN . parameter_list RPAREN compound_statement
    (6) function_definition -> type_specifier ID LPAREN . RPAREN compound_statement
    (17) parameter_list -> . parameter
    (18) parameter_list -> . parameter_list COMMA parameter
    (19) parameter -> . type_specifier declarator
    (10) type_specifier -> . int
    (11) type_specifier -> . float
    (12) type_specifier -> . str

    RPAREN          shift and go to state 23
    int             shift and go to state 7
    float           shift and go to state 8
    str             shift and go to state 9

    type_specifier                 shift and go to state 21
    parameter_list                 shift and go to state 22
    parameter                      shift and go to state 24

state 17

    (16) declarator -> ID LBRACKET . constant_expression RBRACKET
    (45) constant_expression -> . conditional_expression
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (48) logical_and_expression -> . equality_expression
    (49) logical_and_expression -> . logical_and_expression LAND equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression EQ relational_expression
    (52) equality_expression -> . equality_expression NE relational_expression
    (53) relational_expression -> . additive_expression
    (54) relational_expression -> . relational_expression LT additive_expression
    (55) relational_expression -> . relational_expression GT additive_expression
    (56) relational_expression -> . relational_expression LE additive_expression
    (57) relational_expression -> . relational_expression GE additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression PLUS multiplicative_expression
    (60) additive_expression -> . additive_expression MINUS multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (63) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (64) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    ID              shift and go to state 25
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    constant_expression            shift and go to state 26
    conditional_expression         shift and go to state 27
    logical_or_expression          shift and go to state 28
    logical_and_expression         shift and go to state 29
    equality_expression            shift and go to state 30
    relational_expression          shift and go to state 31
    additive_expression            shift and go to state 32
    multiplicative_expression      shift and go to state 33
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 18

    (14) init_declarator -> declarator EQUALS . initializer
    (20) initializer -> . assignment_expression
    (40) assignment_expression -> . conditional_expression
    (41) assignment_expression -> . ID LBRACKET constant_expression RBRACKET EQUALS assignment_expression
    (42) assignment_expression -> . ID EQUALS assignment_expression
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (48) logical_and_expression -> . equality_expression
    (49) logical_and_expression -> . logical_and_expression LAND equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression EQ relational_expression
    (52) equality_expression -> . equality_expression NE relational_expression
    (53) relational_expression -> . additive_expression
    (54) relational_expression -> . relational_expression LT additive_expression
    (55) relational_expression -> . relational_expression GT additive_expression
    (56) relational_expression -> . relational_expression LE additive_expression
    (57) relational_expression -> . relational_expression GE additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression PLUS multiplicative_expression
    (60) additive_expression -> . additive_expression MINUS multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (63) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (64) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 48
    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    initializer                    shift and go to state 45
    assignment_expression          shift and go to state 46
    conditional_expression         shift and go to state 47
    logical_or_expression          shift and go to state 28
    logical_and_expression         shift and go to state 29
    equality_expression            shift and go to state 30
    relational_expression          shift and go to state 31
    additive_expression            shift and go to state 32
    multiplicative_expression      shift and go to state 33
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 19

    (9) init_declarator_list -> init_declarator_list COMMA init_declarator .

    SEMI            reduce using rule 9 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    COMMA           reduce using rule 9 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 20

    (15) declarator -> ID .
    (16) declarator -> ID . LBRACKET constant_expression RBRACKET

    EQUALS          reduce using rule 15 (declarator -> ID .)
    SEMI            reduce using rule 15 (declarator -> ID .)
    COMMA           reduce using rule 15 (declarator -> ID .)
    RPAREN          reduce using rule 15 (declarator -> ID .)
    LBRACKET        shift and go to state 17


state 21

    (19) parameter -> type_specifier . declarator
    (15) declarator -> . ID
    (16) declarator -> . ID LBRACKET constant_expression RBRACKET

    ID              shift and go to state 20

    declarator                     shift and go to state 49

state 22

    (5) function_definition -> type_specifier ID LPAREN parameter_list . RPAREN compound_statement
    (18) parameter_list -> parameter_list . COMMA parameter

    RPAREN          shift and go to state 50
    COMMA           shift and go to state 51


state 23

    (6) function_definition -> type_specifier ID LPAREN RPAREN . compound_statement
    (30) compound_statement -> . LBRACE statement_list RBRACE
    (31) compound_statement -> . LBRACE RBRACE

    LBRACE          shift and go to state 53

    compound_statement             shift and go to state 52

state 24

    (17) parameter_list -> parameter .

    RPAREN          reduce using rule 17 (parameter_list -> parameter .)
    COMMA           reduce using rule 17 (parameter_list -> parameter .)


state 25

    (72) postfix_expression -> ID . LPAREN argument_expression_list RPAREN
    (73) primary_expression -> ID .

    LPAREN          shift and go to state 54
    LBRACKET        reduce using rule 73 (primary_expression -> ID .)
    TIMES           reduce using rule 73 (primary_expression -> ID .)
    DIVIDE          reduce using rule 73 (primary_expression -> ID .)
    MODULO          reduce using rule 73 (primary_expression -> ID .)
    PLUS            reduce using rule 73 (primary_expression -> ID .)
    MINUS           reduce using rule 73 (primary_expression -> ID .)
    LT              reduce using rule 73 (primary_expression -> ID .)
    GT              reduce using rule 73 (primary_expression -> ID .)
    LE              reduce using rule 73 (primary_expression -> ID .)
    GE              reduce using rule 73 (primary_expression -> ID .)
    EQ              reduce using rule 73 (primary_expression -> ID .)
    NE              reduce using rule 73 (primary_expression -> ID .)
    LAND            reduce using rule 73 (primary_expression -> ID .)
    TERNARY         reduce using rule 73 (primary_expression -> ID .)
    LOR             reduce using rule 73 (primary_expression -> ID .)
    RBRACKET        reduce using rule 73 (primary_expression -> ID .)
    SEMI            reduce using rule 73 (primary_expression -> ID .)
    COMMA           reduce using rule 73 (primary_expression -> ID .)
    RPAREN          reduce using rule 73 (primary_expression -> ID .)
    COLON           reduce using rule 73 (primary_expression -> ID .)


state 26

    (16) declarator -> ID LBRACKET constant_expression . RBRACKET

    RBRACKET        shift and go to state 55


state 27

    (45) constant_expression -> conditional_expression .

    RBRACKET        reduce using rule 45 (constant_expression -> conditional_expression .)


state 28

    (43) conditional_expression -> logical_or_expression .
    (44) conditional_expression -> logical_or_expression . TERNARY expression COLON conditional_expression
    (47) logical_or_expression -> logical_or_expression . LOR logical_and_expression

    RBRACKET        reduce using rule 43 (conditional_expression -> logical_or_expression .)
    SEMI            reduce using rule 43 (conditional_expression -> logical_or_expression .)
    COMMA           reduce using rule 43 (conditional_expression -> logical_or_expression .)
    RPAREN          reduce using rule 43 (conditional_expression -> logical_or_expression .)
    COLON           reduce using rule 43 (conditional_expression -> logical_or_expression .)
    TERNARY         shift and go to state 56
    LOR             shift and go to state 57


state 29

    (46) logical_or_expression -> logical_and_expression .
    (49) logical_and_expression -> logical_and_expression . LAND equality_expression

    TERNARY         reduce using rule 46 (logical_or_expression -> logical_and_expression .)
    LOR             reduce using rule 46 (logical_or_expression -> logical_and_expression .)
    RBRACKET        reduce using rule 46 (logical_or_expression -> logical_and_expression .)
    SEMI            reduce using rule 46 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 46 (logical_or_expression -> logical_and_expression .)
    RPAREN          reduce using rule 46 (logical_or_expression -> logical_and_expression .)
    COLON           reduce using rule 46 (logical_or_expression -> logical_and_expression .)
    LAND            shift and go to state 58


state 30

    (48) logical_and_expression -> equality_expression .
    (51) equality_expression -> equality_expression . EQ relational_expression
    (52) equality_expression -> equality_expression . NE relational_expression

    LAND            reduce using rule 48 (logical_and_expression -> equality_expression .)
    TERNARY         reduce using rule 48 (logical_and_expression -> equality_expression .)
    LOR             reduce using rule 48 (logical_and_expression -> equality_expression .)
    RBRACKET        reduce using rule 48 (logical_and_expression -> equality_expression .)
    SEMI            reduce using rule 48 (logical_and_expression -> equality_expression .)
    COMMA           reduce using rule 48 (logical_and_expression -> equality_expression .)
    RPAREN          reduce using rule 48 (logical_and_expression -> equality_expression .)
    COLON           reduce using rule 48 (logical_and_expression -> equality_expression .)
    EQ              shift and go to state 59
    NE              shift and go to state 60


state 31

    (50) equality_expression -> relational_expression .
    (54) relational_expression -> relational_expression . LT additive_expression
    (55) relational_expression -> relational_expression . GT additive_expression
    (56) relational_expression -> relational_expression . LE additive_expression
    (57) relational_expression -> relational_expression . GE additive_expression

    EQ              reduce using rule 50 (equality_expression -> relational_expression .)
    NE              reduce using rule 50 (equality_expression -> relational_expression .)
    LAND            reduce using rule 50 (equality_expression -> relational_expression .)
    TERNARY         reduce using rule 50 (equality_expression -> relational_expression .)
    LOR             reduce using rule 50 (equality_expression -> relational_expression .)
    RBRACKET        reduce using rule 50 (equality_expression -> relational_expression .)
    SEMI            reduce using rule 50 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 50 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 50 (equality_expression -> relational_expression .)
    COLON           reduce using rule 50 (equality_expression -> relational_expression .)
    LT              shift and go to state 61
    GT              shift and go to state 62
    LE              shift and go to state 63
    GE              shift and go to state 64


state 32

    (53) relational_expression -> additive_expression .
    (59) additive_expression -> additive_expression . PLUS multiplicative_expression
    (60) additive_expression -> additive_expression . MINUS multiplicative_expression

    LT              reduce using rule 53 (relational_expression -> additive_expression .)
    GT              reduce using rule 53 (relational_expression -> additive_expression .)
    LE              reduce using rule 53 (relational_expression -> additive_expression .)
    GE              reduce using rule 53 (relational_expression -> additive_expression .)
    EQ              reduce using rule 53 (relational_expression -> additive_expression .)
    NE              reduce using rule 53 (relational_expression -> additive_expression .)
    LAND            reduce using rule 53 (relational_expression -> additive_expression .)
    TERNARY         reduce using rule 53 (relational_expression -> additive_expression .)
    LOR             reduce using rule 53 (relational_expression -> additive_expression .)
    RBRACKET        reduce using rule 53 (relational_expression -> additive_expression .)
    SEMI            reduce using rule 53 (relational_expression -> additive_expression .)
    COMMA           reduce using rule 53 (relational_expression -> additive_expression .)
    RPAREN          reduce using rule 53 (relational_expression -> additive_expression .)
    COLON           reduce using rule 53 (relational_expression -> additive_expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66


state 33

    (58) additive_expression -> multiplicative_expression .
    (62) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (63) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (64) multiplicative_expression -> multiplicative_expression . MODULO unary_expression

    PLUS            reduce using rule 58 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 58 (additive_expression -> multiplicative_expression .)
    LT              reduce using rule 58 (additive_expression -> multiplicative_expression .)
    GT              reduce using rule 58 (additive_expression -> multiplicative_expression .)
    LE              reduce using rule 58 (additive_expression -> multiplicative_expression .)
    GE              reduce using rule 58 (additive_expression -> multiplicative_expression .)
    EQ              reduce using rule 58 (additive_expression -> multiplicative_expression .)
    NE              reduce using rule 58 (additive_expression -> multiplicative_expression .)
    LAND            reduce using rule 58 (additive_expression -> multiplicative_expression .)
    TERNARY         reduce using rule 58 (additive_expression -> multiplicative_expression .)
    LOR             reduce using rule 58 (additive_expression -> multiplicative_expression .)
    RBRACKET        reduce using rule 58 (additive_expression -> multiplicative_expression .)
    SEMI            reduce using rule 58 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 58 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 58 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 58 (additive_expression -> multiplicative_expression .)
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68
    MODULO          shift and go to state 69


state 34

    (67) unary_expression -> MINUS . unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    ID              shift and go to state 25
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    unary_expression               shift and go to state 70
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 35

    (61) multiplicative_expression -> unary_expression .

    TIMES           reduce using rule 61 (multiplicative_expression -> unary_expression .)
    DIVIDE          reduce using rule 61 (multiplicative_expression -> unary_expression .)
    MODULO          reduce using rule 61 (multiplicative_expression -> unary_expression .)
    PLUS            reduce using rule 61 (multiplicative_expression -> unary_expression .)
    MINUS           reduce using rule 61 (multiplicative_expression -> unary_expression .)
    LT              reduce using rule 61 (multiplicative_expression -> unary_expression .)
    GT              reduce using rule 61 (multiplicative_expression -> unary_expression .)
    LE              reduce using rule 61 (multiplicative_expression -> unary_expression .)
    GE              reduce using rule 61 (multiplicative_expression -> unary_expression .)
    EQ              reduce using rule 61 (multiplicative_expression -> unary_expression .)
    NE              reduce using rule 61 (multiplicative_expression -> unary_expression .)
    LAND            reduce using rule 61 (multiplicative_expression -> unary_expression .)
    TERNARY         reduce using rule 61 (multiplicative_expression -> unary_expression .)
    LOR             reduce using rule 61 (multiplicative_expression -> unary_expression .)
    RBRACKET        reduce using rule 61 (multiplicative_expression -> unary_expression .)
    SEMI            reduce using rule 61 (multiplicative_expression -> unary_expression .)
    COMMA           reduce using rule 61 (multiplicative_expression -> unary_expression .)
    RPAREN          reduce using rule 61 (multiplicative_expression -> unary_expression .)
    COLON           reduce using rule 61 (multiplicative_expression -> unary_expression .)


state 36

    (65) unary_expression -> postfix_expression .
    (71) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET

    TIMES           reduce using rule 65 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 65 (unary_expression -> postfix_expression .)
    MODULO          reduce using rule 65 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 65 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 65 (unary_expression -> postfix_expression .)
    LT              reduce using rule 65 (unary_expression -> postfix_expression .)
    GT              reduce using rule 65 (unary_expression -> postfix_expression .)
    LE              reduce using rule 65 (unary_expression -> postfix_expression .)
    GE              reduce using rule 65 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 65 (unary_expression -> postfix_expression .)
    NE              reduce using rule 65 (unary_expression -> postfix_expression .)
    LAND            reduce using rule 65 (unary_expression -> postfix_expression .)
    TERNARY         reduce using rule 65 (unary_expression -> postfix_expression .)
    LOR             reduce using rule 65 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 65 (unary_expression -> postfix_expression .)
    SEMI            reduce using rule 65 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 65 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 65 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 65 (unary_expression -> postfix_expression .)
    LBRACKET        shift and go to state 71


state 37

    (66) unary_expression -> LNOT . unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    ID              shift and go to state 25
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 38

    (68) unary_expression -> INCREMENT . unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    ID              shift and go to state 25
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    unary_expression               shift and go to state 73
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 39

    (69) unary_expression -> DECREMENT . unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    ID              shift and go to state 25
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    unary_expression               shift and go to state 74
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 40

    (70) postfix_expression -> primary_expression .

    LBRACKET        reduce using rule 70 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 70 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 70 (postfix_expression -> primary_expression .)
    MODULO          reduce using rule 70 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 70 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 70 (postfix_expression -> primary_expression .)
    LT              reduce using rule 70 (postfix_expression -> primary_expression .)
    GT              reduce using rule 70 (postfix_expression -> primary_expression .)
    LE              reduce using rule 70 (postfix_expression -> primary_expression .)
    GE              reduce using rule 70 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 70 (postfix_expression -> primary_expression .)
    NE              reduce using rule 70 (postfix_expression -> primary_expression .)
    LAND            reduce using rule 70 (postfix_expression -> primary_expression .)
    TERNARY         reduce using rule 70 (postfix_expression -> primary_expression .)
    LOR             reduce using rule 70 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 70 (postfix_expression -> primary_expression .)
    SEMI            reduce using rule 70 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 70 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 70 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 70 (postfix_expression -> primary_expression .)


state 41

    (77) primary_expression -> LPAREN . expression RPAREN
    (38) expression -> . assignment_expression
    (39) expression -> . expression COMMA assignment_expression
    (40) assignment_expression -> . conditional_expression
    (41) assignment_expression -> . ID LBRACKET constant_expression RBRACKET EQUALS assignment_expression
    (42) assignment_expression -> . ID EQUALS assignment_expression
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (48) logical_and_expression -> . equality_expression
    (49) logical_and_expression -> . logical_and_expression LAND equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression EQ relational_expression
    (52) equality_expression -> . equality_expression NE relational_expression
    (53) relational_expression -> . additive_expression
    (54) relational_expression -> . relational_expression LT additive_expression
    (55) relational_expression -> . relational_expression GT additive_expression
    (56) relational_expression -> . relational_expression LE additive_expression
    (57) relational_expression -> . relational_expression GE additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression PLUS multiplicative_expression
    (60) additive_expression -> . additive_expression MINUS multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (63) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (64) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 48
    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    expression                     shift and go to state 75
    assignment_expression          shift and go to state 76
    conditional_expression         shift and go to state 47
    logical_or_expression          shift and go to state 28
    logical_and_expression         shift and go to state 29
    equality_expression            shift and go to state 30
    relational_expression          shift and go to state 31
    additive_expression            shift and go to state 32
    multiplicative_expression      shift and go to state 33
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 42

    (74) primary_expression -> INTEGER .

    LBRACKET        reduce using rule 74 (primary_expression -> INTEGER .)
    TIMES           reduce using rule 74 (primary_expression -> INTEGER .)
    DIVIDE          reduce using rule 74 (primary_expression -> INTEGER .)
    MODULO          reduce using rule 74 (primary_expression -> INTEGER .)
    PLUS            reduce using rule 74 (primary_expression -> INTEGER .)
    MINUS           reduce using rule 74 (primary_expression -> INTEGER .)
    LT              reduce using rule 74 (primary_expression -> INTEGER .)
    GT              reduce using rule 74 (primary_expression -> INTEGER .)
    LE              reduce using rule 74 (primary_expression -> INTEGER .)
    GE              reduce using rule 74 (primary_expression -> INTEGER .)
    EQ              reduce using rule 74 (primary_expression -> INTEGER .)
    NE              reduce using rule 74 (primary_expression -> INTEGER .)
    LAND            reduce using rule 74 (primary_expression -> INTEGER .)
    TERNARY         reduce using rule 74 (primary_expression -> INTEGER .)
    LOR             reduce using rule 74 (primary_expression -> INTEGER .)
    RBRACKET        reduce using rule 74 (primary_expression -> INTEGER .)
    SEMI            reduce using rule 74 (primary_expression -> INTEGER .)
    COMMA           reduce using rule 74 (primary_expression -> INTEGER .)
    RPAREN          reduce using rule 74 (primary_expression -> INTEGER .)
    COLON           reduce using rule 74 (primary_expression -> INTEGER .)


state 43

    (75) primary_expression -> FLOAT .

    LBRACKET        reduce using rule 75 (primary_expression -> FLOAT .)
    TIMES           reduce using rule 75 (primary_expression -> FLOAT .)
    DIVIDE          reduce using rule 75 (primary_expression -> FLOAT .)
    MODULO          reduce using rule 75 (primary_expression -> FLOAT .)
    PLUS            reduce using rule 75 (primary_expression -> FLOAT .)
    MINUS           reduce using rule 75 (primary_expression -> FLOAT .)
    LT              reduce using rule 75 (primary_expression -> FLOAT .)
    GT              reduce using rule 75 (primary_expression -> FLOAT .)
    LE              reduce using rule 75 (primary_expression -> FLOAT .)
    GE              reduce using rule 75 (primary_expression -> FLOAT .)
    EQ              reduce using rule 75 (primary_expression -> FLOAT .)
    NE              reduce using rule 75 (primary_expression -> FLOAT .)
    LAND            reduce using rule 75 (primary_expression -> FLOAT .)
    TERNARY         reduce using rule 75 (primary_expression -> FLOAT .)
    LOR             reduce using rule 75 (primary_expression -> FLOAT .)
    RBRACKET        reduce using rule 75 (primary_expression -> FLOAT .)
    SEMI            reduce using rule 75 (primary_expression -> FLOAT .)
    COMMA           reduce using rule 75 (primary_expression -> FLOAT .)
    RPAREN          reduce using rule 75 (primary_expression -> FLOAT .)
    COLON           reduce using rule 75 (primary_expression -> FLOAT .)


state 44

    (76) primary_expression -> STR .

    LBRACKET        reduce using rule 76 (primary_expression -> STR .)
    TIMES           reduce using rule 76 (primary_expression -> STR .)
    DIVIDE          reduce using rule 76 (primary_expression -> STR .)
    MODULO          reduce using rule 76 (primary_expression -> STR .)
    PLUS            reduce using rule 76 (primary_expression -> STR .)
    MINUS           reduce using rule 76 (primary_expression -> STR .)
    LT              reduce using rule 76 (primary_expression -> STR .)
    GT              reduce using rule 76 (primary_expression -> STR .)
    LE              reduce using rule 76 (primary_expression -> STR .)
    GE              reduce using rule 76 (primary_expression -> STR .)
    EQ              reduce using rule 76 (primary_expression -> STR .)
    NE              reduce using rule 76 (primary_expression -> STR .)
    LAND            reduce using rule 76 (primary_expression -> STR .)
    TERNARY         reduce using rule 76 (primary_expression -> STR .)
    LOR             reduce using rule 76 (primary_expression -> STR .)
    RBRACKET        reduce using rule 76 (primary_expression -> STR .)
    SEMI            reduce using rule 76 (primary_expression -> STR .)
    COMMA           reduce using rule 76 (primary_expression -> STR .)
    RPAREN          reduce using rule 76 (primary_expression -> STR .)
    COLON           reduce using rule 76 (primary_expression -> STR .)


state 45

    (14) init_declarator -> declarator EQUALS initializer .

    SEMI            reduce using rule 14 (init_declarator -> declarator EQUALS initializer .)
    COMMA           reduce using rule 14 (init_declarator -> declarator EQUALS initializer .)


state 46

    (20) initializer -> assignment_expression .

    SEMI            reduce using rule 20 (initializer -> assignment_expression .)
    COMMA           reduce using rule 20 (initializer -> assignment_expression .)


state 47

    (40) assignment_expression -> conditional_expression .

    SEMI            reduce using rule 40 (assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 40 (assignment_expression -> conditional_expression .)
    RPAREN          reduce using rule 40 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 40 (assignment_expression -> conditional_expression .)
    RBRACKET        reduce using rule 40 (assignment_expression -> conditional_expression .)


state 48

    (41) assignment_expression -> ID . LBRACKET constant_expression RBRACKET EQUALS assignment_expression
    (42) assignment_expression -> ID . EQUALS assignment_expression
    (72) postfix_expression -> ID . LPAREN argument_expression_list RPAREN
    (73) primary_expression -> ID .

  ! shift/reduce conflict for LBRACKET resolved as shift
    LBRACKET        shift and go to state 77
    EQUALS          shift and go to state 78
    LPAREN          shift and go to state 54
    TIMES           reduce using rule 73 (primary_expression -> ID .)
    DIVIDE          reduce using rule 73 (primary_expression -> ID .)
    MODULO          reduce using rule 73 (primary_expression -> ID .)
    PLUS            reduce using rule 73 (primary_expression -> ID .)
    MINUS           reduce using rule 73 (primary_expression -> ID .)
    LT              reduce using rule 73 (primary_expression -> ID .)
    GT              reduce using rule 73 (primary_expression -> ID .)
    LE              reduce using rule 73 (primary_expression -> ID .)
    GE              reduce using rule 73 (primary_expression -> ID .)
    EQ              reduce using rule 73 (primary_expression -> ID .)
    NE              reduce using rule 73 (primary_expression -> ID .)
    LAND            reduce using rule 73 (primary_expression -> ID .)
    TERNARY         reduce using rule 73 (primary_expression -> ID .)
    LOR             reduce using rule 73 (primary_expression -> ID .)
    SEMI            reduce using rule 73 (primary_expression -> ID .)
    COMMA           reduce using rule 73 (primary_expression -> ID .)
    RPAREN          reduce using rule 73 (primary_expression -> ID .)
    COLON           reduce using rule 73 (primary_expression -> ID .)
    RBRACKET        reduce using rule 73 (primary_expression -> ID .)

  ! LBRACKET        [ reduce using rule 73 (primary_expression -> ID .) ]


state 49

    (19) parameter -> type_specifier declarator .

    RPAREN          reduce using rule 19 (parameter -> type_specifier declarator .)
    COMMA           reduce using rule 19 (parameter -> type_specifier declarator .)


state 50

    (5) function_definition -> type_specifier ID LPAREN parameter_list RPAREN . compound_statement
    (30) compound_statement -> . LBRACE statement_list RBRACE
    (31) compound_statement -> . LBRACE RBRACE

    LBRACE          shift and go to state 53

    compound_statement             shift and go to state 79

state 51

    (18) parameter_list -> parameter_list COMMA . parameter
    (19) parameter -> . type_specifier declarator
    (10) type_specifier -> . int
    (11) type_specifier -> . float
    (12) type_specifier -> . str

    int             shift and go to state 7
    float           shift and go to state 8
    str             shift and go to state 9

    parameter                      shift and go to state 80
    type_specifier                 shift and go to state 21

state 52

    (6) function_definition -> type_specifier ID LPAREN RPAREN compound_statement .

    int             reduce using rule 6 (function_definition -> type_specifier ID LPAREN RPAREN compound_statement .)
    float           reduce using rule 6 (function_definition -> type_specifier ID LPAREN RPAREN compound_statement .)
    str             reduce using rule 6 (function_definition -> type_specifier ID LPAREN RPAREN compound_statement .)
    $end            reduce using rule 6 (function_definition -> type_specifier ID LPAREN RPAREN compound_statement .)


state 53

    (30) compound_statement -> LBRACE . statement_list RBRACE
    (31) compound_statement -> LBRACE . RBRACE
    (21) statement_list -> . statement
    (22) statement_list -> . statement_list statement
    (23) statement -> . expression_statement
    (24) statement -> . declaration
    (25) statement -> . compound_statement
    (26) statement -> . selection_statement
    (27) statement -> . iteration_statement
    (28) statement -> . jump_statement
    (29) expression_statement -> . expression SEMI
    (7) declaration -> . init_declarator_list SEMI
    (30) compound_statement -> . LBRACE statement_list RBRACE
    (31) compound_statement -> . LBRACE RBRACE
    (32) selection_statement -> . if LPAREN expression RPAREN statement
    (33) selection_statement -> . if LPAREN expression RPAREN statement else statement
    (34) iteration_statement -> . while LPAREN expression RPAREN statement
    (35) iteration_statement -> . do statement while LPAREN expression RPAREN SEMI
    (36) iteration_statement -> . for LPAREN expression SEMI expression SEMI expression RPAREN statement
    (37) jump_statement -> . return expression SEMI
    (38) expression -> . assignment_expression
    (39) expression -> . expression COMMA assignment_expression
    (8) init_declarator_list -> . type_specifier init_declarator
    (9) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (40) assignment_expression -> . conditional_expression
    (41) assignment_expression -> . ID LBRACKET constant_expression RBRACKET EQUALS assignment_expression
    (42) assignment_expression -> . ID EQUALS assignment_expression
    (10) type_specifier -> . int
    (11) type_specifier -> . float
    (12) type_specifier -> . str
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (48) logical_and_expression -> . equality_expression
    (49) logical_and_expression -> . logical_and_expression LAND equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression EQ relational_expression
    (52) equality_expression -> . equality_expression NE relational_expression
    (53) relational_expression -> . additive_expression
    (54) relational_expression -> . relational_expression LT additive_expression
    (55) relational_expression -> . relational_expression GT additive_expression
    (56) relational_expression -> . relational_expression LE additive_expression
    (57) relational_expression -> . relational_expression GE additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression PLUS multiplicative_expression
    (60) additive_expression -> . additive_expression MINUS multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (63) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (64) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    RBRACE          shift and go to state 82
    LBRACE          shift and go to state 53
    if              shift and go to state 91
    while           shift and go to state 92
    do              shift and go to state 93
    for             shift and go to state 94
    return          shift and go to state 95
    ID              shift and go to state 48
    int             shift and go to state 7
    float           shift and go to state 8
    str             shift and go to state 9
    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    statement_list                 shift and go to state 81
    statement                      shift and go to state 83
    expression_statement           shift and go to state 84
    declaration                    shift and go to state 85
    compound_statement             shift and go to state 86
    selection_statement            shift and go to state 87
    iteration_statement            shift and go to state 88
    jump_statement                 shift and go to state 89
    expression                     shift and go to state 90
    init_declarator_list           shift and go to state 6
    assignment_expression          shift and go to state 76
    type_specifier                 shift and go to state 96
    conditional_expression         shift and go to state 47
    logical_or_expression          shift and go to state 28
    logical_and_expression         shift and go to state 29
    equality_expression            shift and go to state 30
    relational_expression          shift and go to state 31
    additive_expression            shift and go to state 32
    multiplicative_expression      shift and go to state 33
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 54

    (72) postfix_expression -> ID LPAREN . argument_expression_list RPAREN
    (78) argument_expression_list -> . assignment_expression
    (79) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (40) assignment_expression -> . conditional_expression
    (41) assignment_expression -> . ID LBRACKET constant_expression RBRACKET EQUALS assignment_expression
    (42) assignment_expression -> . ID EQUALS assignment_expression
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (48) logical_and_expression -> . equality_expression
    (49) logical_and_expression -> . logical_and_expression LAND equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression EQ relational_expression
    (52) equality_expression -> . equality_expression NE relational_expression
    (53) relational_expression -> . additive_expression
    (54) relational_expression -> . relational_expression LT additive_expression
    (55) relational_expression -> . relational_expression GT additive_expression
    (56) relational_expression -> . relational_expression LE additive_expression
    (57) relational_expression -> . relational_expression GE additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression PLUS multiplicative_expression
    (60) additive_expression -> . additive_expression MINUS multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (63) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (64) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 48
    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    argument_expression_list       shift and go to state 97
    assignment_expression          shift and go to state 98
    conditional_expression         shift and go to state 47
    logical_or_expression          shift and go to state 28
    logical_and_expression         shift and go to state 29
    equality_expression            shift and go to state 30
    relational_expression          shift and go to state 31
    additive_expression            shift and go to state 32
    multiplicative_expression      shift and go to state 33
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 55

    (16) declarator -> ID LBRACKET constant_expression RBRACKET .

    EQUALS          reduce using rule 16 (declarator -> ID LBRACKET constant_expression RBRACKET .)
    SEMI            reduce using rule 16 (declarator -> ID LBRACKET constant_expression RBRACKET .)
    COMMA           reduce using rule 16 (declarator -> ID LBRACKET constant_expression RBRACKET .)
    RPAREN          reduce using rule 16 (declarator -> ID LBRACKET constant_expression RBRACKET .)


state 56

    (44) conditional_expression -> logical_or_expression TERNARY . expression COLON conditional_expression
    (38) expression -> . assignment_expression
    (39) expression -> . expression COMMA assignment_expression
    (40) assignment_expression -> . conditional_expression
    (41) assignment_expression -> . ID LBRACKET constant_expression RBRACKET EQUALS assignment_expression
    (42) assignment_expression -> . ID EQUALS assignment_expression
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (48) logical_and_expression -> . equality_expression
    (49) logical_and_expression -> . logical_and_expression LAND equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression EQ relational_expression
    (52) equality_expression -> . equality_expression NE relational_expression
    (53) relational_expression -> . additive_expression
    (54) relational_expression -> . relational_expression LT additive_expression
    (55) relational_expression -> . relational_expression GT additive_expression
    (56) relational_expression -> . relational_expression LE additive_expression
    (57) relational_expression -> . relational_expression GE additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression PLUS multiplicative_expression
    (60) additive_expression -> . additive_expression MINUS multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (63) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (64) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 48
    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    logical_or_expression          shift and go to state 28
    expression                     shift and go to state 99
    conditional_expression         shift and go to state 47
    assignment_expression          shift and go to state 76
    logical_and_expression         shift and go to state 29
    equality_expression            shift and go to state 30
    relational_expression          shift and go to state 31
    additive_expression            shift and go to state 32
    multiplicative_expression      shift and go to state 33
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 57

    (47) logical_or_expression -> logical_or_expression LOR . logical_and_expression
    (48) logical_and_expression -> . equality_expression
    (49) logical_and_expression -> . logical_and_expression LAND equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression EQ relational_expression
    (52) equality_expression -> . equality_expression NE relational_expression
    (53) relational_expression -> . additive_expression
    (54) relational_expression -> . relational_expression LT additive_expression
    (55) relational_expression -> . relational_expression GT additive_expression
    (56) relational_expression -> . relational_expression LE additive_expression
    (57) relational_expression -> . relational_expression GE additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression PLUS multiplicative_expression
    (60) additive_expression -> . additive_expression MINUS multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (63) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (64) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    ID              shift and go to state 25
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    logical_and_expression         shift and go to state 100
    equality_expression            shift and go to state 30
    relational_expression          shift and go to state 31
    additive_expression            shift and go to state 32
    multiplicative_expression      shift and go to state 33
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 58

    (49) logical_and_expression -> logical_and_expression LAND . equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression EQ relational_expression
    (52) equality_expression -> . equality_expression NE relational_expression
    (53) relational_expression -> . additive_expression
    (54) relational_expression -> . relational_expression LT additive_expression
    (55) relational_expression -> . relational_expression GT additive_expression
    (56) relational_expression -> . relational_expression LE additive_expression
    (57) relational_expression -> . relational_expression GE additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression PLUS multiplicative_expression
    (60) additive_expression -> . additive_expression MINUS multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (63) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (64) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    ID              shift and go to state 25
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    equality_expression            shift and go to state 101
    relational_expression          shift and go to state 31
    additive_expression            shift and go to state 32
    multiplicative_expression      shift and go to state 33
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 59

    (51) equality_expression -> equality_expression EQ . relational_expression
    (53) relational_expression -> . additive_expression
    (54) relational_expression -> . relational_expression LT additive_expression
    (55) relational_expression -> . relational_expression GT additive_expression
    (56) relational_expression -> . relational_expression LE additive_expression
    (57) relational_expression -> . relational_expression GE additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression PLUS multiplicative_expression
    (60) additive_expression -> . additive_expression MINUS multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (63) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (64) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    ID              shift and go to state 25
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    relational_expression          shift and go to state 102
    additive_expression            shift and go to state 32
    multiplicative_expression      shift and go to state 33
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 60

    (52) equality_expression -> equality_expression NE . relational_expression
    (53) relational_expression -> . additive_expression
    (54) relational_expression -> . relational_expression LT additive_expression
    (55) relational_expression -> . relational_expression GT additive_expression
    (56) relational_expression -> . relational_expression LE additive_expression
    (57) relational_expression -> . relational_expression GE additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression PLUS multiplicative_expression
    (60) additive_expression -> . additive_expression MINUS multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (63) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (64) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    ID              shift and go to state 25
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    relational_expression          shift and go to state 103
    additive_expression            shift and go to state 32
    multiplicative_expression      shift and go to state 33
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 61

    (54) relational_expression -> relational_expression LT . additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression PLUS multiplicative_expression
    (60) additive_expression -> . additive_expression MINUS multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (63) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (64) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    ID              shift and go to state 25
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    additive_expression            shift and go to state 104
    multiplicative_expression      shift and go to state 33
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 62

    (55) relational_expression -> relational_expression GT . additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression PLUS multiplicative_expression
    (60) additive_expression -> . additive_expression MINUS multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (63) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (64) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    ID              shift and go to state 25
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    additive_expression            shift and go to state 105
    multiplicative_expression      shift and go to state 33
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 63

    (56) relational_expression -> relational_expression LE . additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression PLUS multiplicative_expression
    (60) additive_expression -> . additive_expression MINUS multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (63) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (64) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    ID              shift and go to state 25
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    additive_expression            shift and go to state 106
    multiplicative_expression      shift and go to state 33
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 64

    (57) relational_expression -> relational_expression GE . additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression PLUS multiplicative_expression
    (60) additive_expression -> . additive_expression MINUS multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (63) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (64) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    ID              shift and go to state 25
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    additive_expression            shift and go to state 107
    multiplicative_expression      shift and go to state 33
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 65

    (59) additive_expression -> additive_expression PLUS . multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (63) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (64) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    ID              shift and go to state 25
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    multiplicative_expression      shift and go to state 108
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 66

    (60) additive_expression -> additive_expression MINUS . multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (63) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (64) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    ID              shift and go to state 25
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    multiplicative_expression      shift and go to state 109
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 67

    (62) multiplicative_expression -> multiplicative_expression TIMES . unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    ID              shift and go to state 25
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    unary_expression               shift and go to state 110
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 68

    (63) multiplicative_expression -> multiplicative_expression DIVIDE . unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    ID              shift and go to state 25
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    unary_expression               shift and go to state 111
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 69

    (64) multiplicative_expression -> multiplicative_expression MODULO . unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    ID              shift and go to state 25
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    unary_expression               shift and go to state 112
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 70

    (67) unary_expression -> MINUS unary_expression .

    TIMES           reduce using rule 67 (unary_expression -> MINUS unary_expression .)
    DIVIDE          reduce using rule 67 (unary_expression -> MINUS unary_expression .)
    MODULO          reduce using rule 67 (unary_expression -> MINUS unary_expression .)
    PLUS            reduce using rule 67 (unary_expression -> MINUS unary_expression .)
    MINUS           reduce using rule 67 (unary_expression -> MINUS unary_expression .)
    LT              reduce using rule 67 (unary_expression -> MINUS unary_expression .)
    GT              reduce using rule 67 (unary_expression -> MINUS unary_expression .)
    LE              reduce using rule 67 (unary_expression -> MINUS unary_expression .)
    GE              reduce using rule 67 (unary_expression -> MINUS unary_expression .)
    EQ              reduce using rule 67 (unary_expression -> MINUS unary_expression .)
    NE              reduce using rule 67 (unary_expression -> MINUS unary_expression .)
    LAND            reduce using rule 67 (unary_expression -> MINUS unary_expression .)
    TERNARY         reduce using rule 67 (unary_expression -> MINUS unary_expression .)
    LOR             reduce using rule 67 (unary_expression -> MINUS unary_expression .)
    RBRACKET        reduce using rule 67 (unary_expression -> MINUS unary_expression .)
    SEMI            reduce using rule 67 (unary_expression -> MINUS unary_expression .)
    COMMA           reduce using rule 67 (unary_expression -> MINUS unary_expression .)
    RPAREN          reduce using rule 67 (unary_expression -> MINUS unary_expression .)
    COLON           reduce using rule 67 (unary_expression -> MINUS unary_expression .)


state 71

    (71) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (38) expression -> . assignment_expression
    (39) expression -> . expression COMMA assignment_expression
    (40) assignment_expression -> . conditional_expression
    (41) assignment_expression -> . ID LBRACKET constant_expression RBRACKET EQUALS assignment_expression
    (42) assignment_expression -> . ID EQUALS assignment_expression
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (48) logical_and_expression -> . equality_expression
    (49) logical_and_expression -> . logical_and_expression LAND equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression EQ relational_expression
    (52) equality_expression -> . equality_expression NE relational_expression
    (53) relational_expression -> . additive_expression
    (54) relational_expression -> . relational_expression LT additive_expression
    (55) relational_expression -> . relational_expression GT additive_expression
    (56) relational_expression -> . relational_expression LE additive_expression
    (57) relational_expression -> . relational_expression GE additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression PLUS multiplicative_expression
    (60) additive_expression -> . additive_expression MINUS multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (63) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (64) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 48
    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    postfix_expression             shift and go to state 36
    expression                     shift and go to state 113
    assignment_expression          shift and go to state 76
    conditional_expression         shift and go to state 47
    logical_or_expression          shift and go to state 28
    logical_and_expression         shift and go to state 29
    equality_expression            shift and go to state 30
    relational_expression          shift and go to state 31
    additive_expression            shift and go to state 32
    multiplicative_expression      shift and go to state 33
    unary_expression               shift and go to state 35
    primary_expression             shift and go to state 40

state 72

    (66) unary_expression -> LNOT unary_expression .

    TIMES           reduce using rule 66 (unary_expression -> LNOT unary_expression .)
    DIVIDE          reduce using rule 66 (unary_expression -> LNOT unary_expression .)
    MODULO          reduce using rule 66 (unary_expression -> LNOT unary_expression .)
    PLUS            reduce using rule 66 (unary_expression -> LNOT unary_expression .)
    MINUS           reduce using rule 66 (unary_expression -> LNOT unary_expression .)
    LT              reduce using rule 66 (unary_expression -> LNOT unary_expression .)
    GT              reduce using rule 66 (unary_expression -> LNOT unary_expression .)
    LE              reduce using rule 66 (unary_expression -> LNOT unary_expression .)
    GE              reduce using rule 66 (unary_expression -> LNOT unary_expression .)
    EQ              reduce using rule 66 (unary_expression -> LNOT unary_expression .)
    NE              reduce using rule 66 (unary_expression -> LNOT unary_expression .)
    LAND            reduce using rule 66 (unary_expression -> LNOT unary_expression .)
    TERNARY         reduce using rule 66 (unary_expression -> LNOT unary_expression .)
    LOR             reduce using rule 66 (unary_expression -> LNOT unary_expression .)
    RBRACKET        reduce using rule 66 (unary_expression -> LNOT unary_expression .)
    SEMI            reduce using rule 66 (unary_expression -> LNOT unary_expression .)
    COMMA           reduce using rule 66 (unary_expression -> LNOT unary_expression .)
    RPAREN          reduce using rule 66 (unary_expression -> LNOT unary_expression .)
    COLON           reduce using rule 66 (unary_expression -> LNOT unary_expression .)


state 73

    (68) unary_expression -> INCREMENT unary_expression .

    TIMES           reduce using rule 68 (unary_expression -> INCREMENT unary_expression .)
    DIVIDE          reduce using rule 68 (unary_expression -> INCREMENT unary_expression .)
    MODULO          reduce using rule 68 (unary_expression -> INCREMENT unary_expression .)
    PLUS            reduce using rule 68 (unary_expression -> INCREMENT unary_expression .)
    MINUS           reduce using rule 68 (unary_expression -> INCREMENT unary_expression .)
    LT              reduce using rule 68 (unary_expression -> INCREMENT unary_expression .)
    GT              reduce using rule 68 (unary_expression -> INCREMENT unary_expression .)
    LE              reduce using rule 68 (unary_expression -> INCREMENT unary_expression .)
    GE              reduce using rule 68 (unary_expression -> INCREMENT unary_expression .)
    EQ              reduce using rule 68 (unary_expression -> INCREMENT unary_expression .)
    NE              reduce using rule 68 (unary_expression -> INCREMENT unary_expression .)
    LAND            reduce using rule 68 (unary_expression -> INCREMENT unary_expression .)
    TERNARY         reduce using rule 68 (unary_expression -> INCREMENT unary_expression .)
    LOR             reduce using rule 68 (unary_expression -> INCREMENT unary_expression .)
    RBRACKET        reduce using rule 68 (unary_expression -> INCREMENT unary_expression .)
    SEMI            reduce using rule 68 (unary_expression -> INCREMENT unary_expression .)
    COMMA           reduce using rule 68 (unary_expression -> INCREMENT unary_expression .)
    RPAREN          reduce using rule 68 (unary_expression -> INCREMENT unary_expression .)
    COLON           reduce using rule 68 (unary_expression -> INCREMENT unary_expression .)


state 74

    (69) unary_expression -> DECREMENT unary_expression .

    TIMES           reduce using rule 69 (unary_expression -> DECREMENT unary_expression .)
    DIVIDE          reduce using rule 69 (unary_expression -> DECREMENT unary_expression .)
    MODULO          reduce using rule 69 (unary_expression -> DECREMENT unary_expression .)
    PLUS            reduce using rule 69 (unary_expression -> DECREMENT unary_expression .)
    MINUS           reduce using rule 69 (unary_expression -> DECREMENT unary_expression .)
    LT              reduce using rule 69 (unary_expression -> DECREMENT unary_expression .)
    GT              reduce using rule 69 (unary_expression -> DECREMENT unary_expression .)
    LE              reduce using rule 69 (unary_expression -> DECREMENT unary_expression .)
    GE              reduce using rule 69 (unary_expression -> DECREMENT unary_expression .)
    EQ              reduce using rule 69 (unary_expression -> DECREMENT unary_expression .)
    NE              reduce using rule 69 (unary_expression -> DECREMENT unary_expression .)
    LAND            reduce using rule 69 (unary_expression -> DECREMENT unary_expression .)
    TERNARY         reduce using rule 69 (unary_expression -> DECREMENT unary_expression .)
    LOR             reduce using rule 69 (unary_expression -> DECREMENT unary_expression .)
    RBRACKET        reduce using rule 69 (unary_expression -> DECREMENT unary_expression .)
    SEMI            reduce using rule 69 (unary_expression -> DECREMENT unary_expression .)
    COMMA           reduce using rule 69 (unary_expression -> DECREMENT unary_expression .)
    RPAREN          reduce using rule 69 (unary_expression -> DECREMENT unary_expression .)
    COLON           reduce using rule 69 (unary_expression -> DECREMENT unary_expression .)


state 75

    (77) primary_expression -> LPAREN expression . RPAREN
    (39) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 114
    COMMA           shift and go to state 115


state 76

    (38) expression -> assignment_expression .

    RPAREN          reduce using rule 38 (expression -> assignment_expression .)
    COMMA           reduce using rule 38 (expression -> assignment_expression .)
    SEMI            reduce using rule 38 (expression -> assignment_expression .)
    COLON           reduce using rule 38 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 38 (expression -> assignment_expression .)


state 77

    (41) assignment_expression -> ID LBRACKET . constant_expression RBRACKET EQUALS assignment_expression
    (45) constant_expression -> . conditional_expression
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (48) logical_and_expression -> . equality_expression
    (49) logical_and_expression -> . logical_and_expression LAND equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression EQ relational_expression
    (52) equality_expression -> . equality_expression NE relational_expression
    (53) relational_expression -> . additive_expression
    (54) relational_expression -> . relational_expression LT additive_expression
    (55) relational_expression -> . relational_expression GT additive_expression
    (56) relational_expression -> . relational_expression LE additive_expression
    (57) relational_expression -> . relational_expression GE additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression PLUS multiplicative_expression
    (60) additive_expression -> . additive_expression MINUS multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (63) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (64) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    ID              shift and go to state 25
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    constant_expression            shift and go to state 116
    conditional_expression         shift and go to state 27
    logical_or_expression          shift and go to state 28
    logical_and_expression         shift and go to state 29
    equality_expression            shift and go to state 30
    relational_expression          shift and go to state 31
    additive_expression            shift and go to state 32
    multiplicative_expression      shift and go to state 33
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 78

    (42) assignment_expression -> ID EQUALS . assignment_expression
    (40) assignment_expression -> . conditional_expression
    (41) assignment_expression -> . ID LBRACKET constant_expression RBRACKET EQUALS assignment_expression
    (42) assignment_expression -> . ID EQUALS assignment_expression
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (48) logical_and_expression -> . equality_expression
    (49) logical_and_expression -> . logical_and_expression LAND equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression EQ relational_expression
    (52) equality_expression -> . equality_expression NE relational_expression
    (53) relational_expression -> . additive_expression
    (54) relational_expression -> . relational_expression LT additive_expression
    (55) relational_expression -> . relational_expression GT additive_expression
    (56) relational_expression -> . relational_expression LE additive_expression
    (57) relational_expression -> . relational_expression GE additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression PLUS multiplicative_expression
    (60) additive_expression -> . additive_expression MINUS multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (63) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (64) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 48
    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    assignment_expression          shift and go to state 117
    conditional_expression         shift and go to state 47
    logical_or_expression          shift and go to state 28
    logical_and_expression         shift and go to state 29
    equality_expression            shift and go to state 30
    relational_expression          shift and go to state 31
    additive_expression            shift and go to state 32
    multiplicative_expression      shift and go to state 33
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 79

    (5) function_definition -> type_specifier ID LPAREN parameter_list RPAREN compound_statement .

    int             reduce using rule 5 (function_definition -> type_specifier ID LPAREN parameter_list RPAREN compound_statement .)
    float           reduce using rule 5 (function_definition -> type_specifier ID LPAREN parameter_list RPAREN compound_statement .)
    str             reduce using rule 5 (function_definition -> type_specifier ID LPAREN parameter_list RPAREN compound_statement .)
    $end            reduce using rule 5 (function_definition -> type_specifier ID LPAREN parameter_list RPAREN compound_statement .)


state 80

    (18) parameter_list -> parameter_list COMMA parameter .

    RPAREN          reduce using rule 18 (parameter_list -> parameter_list COMMA parameter .)
    COMMA           reduce using rule 18 (parameter_list -> parameter_list COMMA parameter .)


state 81

    (30) compound_statement -> LBRACE statement_list . RBRACE
    (22) statement_list -> statement_list . statement
    (23) statement -> . expression_statement
    (24) statement -> . declaration
    (25) statement -> . compound_statement
    (26) statement -> . selection_statement
    (27) statement -> . iteration_statement
    (28) statement -> . jump_statement
    (29) expression_statement -> . expression SEMI
    (7) declaration -> . init_declarator_list SEMI
    (30) compound_statement -> . LBRACE statement_list RBRACE
    (31) compound_statement -> . LBRACE RBRACE
    (32) selection_statement -> . if LPAREN expression RPAREN statement
    (33) selection_statement -> . if LPAREN expression RPAREN statement else statement
    (34) iteration_statement -> . while LPAREN expression RPAREN statement
    (35) iteration_statement -> . do statement while LPAREN expression RPAREN SEMI
    (36) iteration_statement -> . for LPAREN expression SEMI expression SEMI expression RPAREN statement
    (37) jump_statement -> . return expression SEMI
    (38) expression -> . assignment_expression
    (39) expression -> . expression COMMA assignment_expression
    (8) init_declarator_list -> . type_specifier init_declarator
    (9) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (40) assignment_expression -> . conditional_expression
    (41) assignment_expression -> . ID LBRACKET constant_expression RBRACKET EQUALS assignment_expression
    (42) assignment_expression -> . ID EQUALS assignment_expression
    (10) type_specifier -> . int
    (11) type_specifier -> . float
    (12) type_specifier -> . str
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (48) logical_and_expression -> . equality_expression
    (49) logical_and_expression -> . logical_and_expression LAND equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression EQ relational_expression
    (52) equality_expression -> . equality_expression NE relational_expression
    (53) relational_expression -> . additive_expression
    (54) relational_expression -> . relational_expression LT additive_expression
    (55) relational_expression -> . relational_expression GT additive_expression
    (56) relational_expression -> . relational_expression LE additive_expression
    (57) relational_expression -> . relational_expression GE additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression PLUS multiplicative_expression
    (60) additive_expression -> . additive_expression MINUS multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (63) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (64) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    RBRACE          shift and go to state 118
    LBRACE          shift and go to state 53
    if              shift and go to state 91
    while           shift and go to state 92
    do              shift and go to state 93
    for             shift and go to state 94
    return          shift and go to state 95
    ID              shift and go to state 48
    int             shift and go to state 7
    float           shift and go to state 8
    str             shift and go to state 9
    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    statement                      shift and go to state 119
    expression_statement           shift and go to state 84
    declaration                    shift and go to state 85
    compound_statement             shift and go to state 86
    selection_statement            shift and go to state 87
    iteration_statement            shift and go to state 88
    jump_statement                 shift and go to state 89
    expression                     shift and go to state 90
    init_declarator_list           shift and go to state 6
    assignment_expression          shift and go to state 76
    type_specifier                 shift and go to state 96
    conditional_expression         shift and go to state 47
    logical_or_expression          shift and go to state 28
    logical_and_expression         shift and go to state 29
    equality_expression            shift and go to state 30
    relational_expression          shift and go to state 31
    additive_expression            shift and go to state 32
    multiplicative_expression      shift and go to state 33
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 82

    (31) compound_statement -> LBRACE RBRACE .

    int             reduce using rule 31 (compound_statement -> LBRACE RBRACE .)
    float           reduce using rule 31 (compound_statement -> LBRACE RBRACE .)
    str             reduce using rule 31 (compound_statement -> LBRACE RBRACE .)
    $end            reduce using rule 31 (compound_statement -> LBRACE RBRACE .)
    RBRACE          reduce using rule 31 (compound_statement -> LBRACE RBRACE .)
    LBRACE          reduce using rule 31 (compound_statement -> LBRACE RBRACE .)
    if              reduce using rule 31 (compound_statement -> LBRACE RBRACE .)
    while           reduce using rule 31 (compound_statement -> LBRACE RBRACE .)
    do              reduce using rule 31 (compound_statement -> LBRACE RBRACE .)
    for             reduce using rule 31 (compound_statement -> LBRACE RBRACE .)
    return          reduce using rule 31 (compound_statement -> LBRACE RBRACE .)
    ID              reduce using rule 31 (compound_statement -> LBRACE RBRACE .)
    LNOT            reduce using rule 31 (compound_statement -> LBRACE RBRACE .)
    MINUS           reduce using rule 31 (compound_statement -> LBRACE RBRACE .)
    INCREMENT       reduce using rule 31 (compound_statement -> LBRACE RBRACE .)
    DECREMENT       reduce using rule 31 (compound_statement -> LBRACE RBRACE .)
    INTEGER         reduce using rule 31 (compound_statement -> LBRACE RBRACE .)
    FLOAT           reduce using rule 31 (compound_statement -> LBRACE RBRACE .)
    STR             reduce using rule 31 (compound_statement -> LBRACE RBRACE .)
    LPAREN          reduce using rule 31 (compound_statement -> LBRACE RBRACE .)
    else            reduce using rule 31 (compound_statement -> LBRACE RBRACE .)


state 83

    (21) statement_list -> statement .

    RBRACE          reduce using rule 21 (statement_list -> statement .)
    LBRACE          reduce using rule 21 (statement_list -> statement .)
    if              reduce using rule 21 (statement_list -> statement .)
    while           reduce using rule 21 (statement_list -> statement .)
    do              reduce using rule 21 (statement_list -> statement .)
    for             reduce using rule 21 (statement_list -> statement .)
    return          reduce using rule 21 (statement_list -> statement .)
    ID              reduce using rule 21 (statement_list -> statement .)
    int             reduce using rule 21 (statement_list -> statement .)
    float           reduce using rule 21 (statement_list -> statement .)
    str             reduce using rule 21 (statement_list -> statement .)
    LNOT            reduce using rule 21 (statement_list -> statement .)
    MINUS           reduce using rule 21 (statement_list -> statement .)
    INCREMENT       reduce using rule 21 (statement_list -> statement .)
    DECREMENT       reduce using rule 21 (statement_list -> statement .)
    INTEGER         reduce using rule 21 (statement_list -> statement .)
    FLOAT           reduce using rule 21 (statement_list -> statement .)
    STR             reduce using rule 21 (statement_list -> statement .)
    LPAREN          reduce using rule 21 (statement_list -> statement .)


state 84

    (23) statement -> expression_statement .

    RBRACE          reduce using rule 23 (statement -> expression_statement .)
    LBRACE          reduce using rule 23 (statement -> expression_statement .)
    if              reduce using rule 23 (statement -> expression_statement .)
    while           reduce using rule 23 (statement -> expression_statement .)
    do              reduce using rule 23 (statement -> expression_statement .)
    for             reduce using rule 23 (statement -> expression_statement .)
    return          reduce using rule 23 (statement -> expression_statement .)
    ID              reduce using rule 23 (statement -> expression_statement .)
    int             reduce using rule 23 (statement -> expression_statement .)
    float           reduce using rule 23 (statement -> expression_statement .)
    str             reduce using rule 23 (statement -> expression_statement .)
    LNOT            reduce using rule 23 (statement -> expression_statement .)
    MINUS           reduce using rule 23 (statement -> expression_statement .)
    INCREMENT       reduce using rule 23 (statement -> expression_statement .)
    DECREMENT       reduce using rule 23 (statement -> expression_statement .)
    INTEGER         reduce using rule 23 (statement -> expression_statement .)
    FLOAT           reduce using rule 23 (statement -> expression_statement .)
    STR             reduce using rule 23 (statement -> expression_statement .)
    LPAREN          reduce using rule 23 (statement -> expression_statement .)
    else            reduce using rule 23 (statement -> expression_statement .)


state 85

    (24) statement -> declaration .

    RBRACE          reduce using rule 24 (statement -> declaration .)
    LBRACE          reduce using rule 24 (statement -> declaration .)
    if              reduce using rule 24 (statement -> declaration .)
    while           reduce using rule 24 (statement -> declaration .)
    do              reduce using rule 24 (statement -> declaration .)
    for             reduce using rule 24 (statement -> declaration .)
    return          reduce using rule 24 (statement -> declaration .)
    ID              reduce using rule 24 (statement -> declaration .)
    int             reduce using rule 24 (statement -> declaration .)
    float           reduce using rule 24 (statement -> declaration .)
    str             reduce using rule 24 (statement -> declaration .)
    LNOT            reduce using rule 24 (statement -> declaration .)
    MINUS           reduce using rule 24 (statement -> declaration .)
    INCREMENT       reduce using rule 24 (statement -> declaration .)
    DECREMENT       reduce using rule 24 (statement -> declaration .)
    INTEGER         reduce using rule 24 (statement -> declaration .)
    FLOAT           reduce using rule 24 (statement -> declaration .)
    STR             reduce using rule 24 (statement -> declaration .)
    LPAREN          reduce using rule 24 (statement -> declaration .)
    else            reduce using rule 24 (statement -> declaration .)


state 86

    (25) statement -> compound_statement .

    RBRACE          reduce using rule 25 (statement -> compound_statement .)
    LBRACE          reduce using rule 25 (statement -> compound_statement .)
    if              reduce using rule 25 (statement -> compound_statement .)
    while           reduce using rule 25 (statement -> compound_statement .)
    do              reduce using rule 25 (statement -> compound_statement .)
    for             reduce using rule 25 (statement -> compound_statement .)
    return          reduce using rule 25 (statement -> compound_statement .)
    ID              reduce using rule 25 (statement -> compound_statement .)
    int             reduce using rule 25 (statement -> compound_statement .)
    float           reduce using rule 25 (statement -> compound_statement .)
    str             reduce using rule 25 (statement -> compound_statement .)
    LNOT            reduce using rule 25 (statement -> compound_statement .)
    MINUS           reduce using rule 25 (statement -> compound_statement .)
    INCREMENT       reduce using rule 25 (statement -> compound_statement .)
    DECREMENT       reduce using rule 25 (statement -> compound_statement .)
    INTEGER         reduce using rule 25 (statement -> compound_statement .)
    FLOAT           reduce using rule 25 (statement -> compound_statement .)
    STR             reduce using rule 25 (statement -> compound_statement .)
    LPAREN          reduce using rule 25 (statement -> compound_statement .)
    else            reduce using rule 25 (statement -> compound_statement .)


state 87

    (26) statement -> selection_statement .

    RBRACE          reduce using rule 26 (statement -> selection_statement .)
    LBRACE          reduce using rule 26 (statement -> selection_statement .)
    if              reduce using rule 26 (statement -> selection_statement .)
    while           reduce using rule 26 (statement -> selection_statement .)
    do              reduce using rule 26 (statement -> selection_statement .)
    for             reduce using rule 26 (statement -> selection_statement .)
    return          reduce using rule 26 (statement -> selection_statement .)
    ID              reduce using rule 26 (statement -> selection_statement .)
    int             reduce using rule 26 (statement -> selection_statement .)
    float           reduce using rule 26 (statement -> selection_statement .)
    str             reduce using rule 26 (statement -> selection_statement .)
    LNOT            reduce using rule 26 (statement -> selection_statement .)
    MINUS           reduce using rule 26 (statement -> selection_statement .)
    INCREMENT       reduce using rule 26 (statement -> selection_statement .)
    DECREMENT       reduce using rule 26 (statement -> selection_statement .)
    INTEGER         reduce using rule 26 (statement -> selection_statement .)
    FLOAT           reduce using rule 26 (statement -> selection_statement .)
    STR             reduce using rule 26 (statement -> selection_statement .)
    LPAREN          reduce using rule 26 (statement -> selection_statement .)
    else            reduce using rule 26 (statement -> selection_statement .)


state 88

    (27) statement -> iteration_statement .

    RBRACE          reduce using rule 27 (statement -> iteration_statement .)
    LBRACE          reduce using rule 27 (statement -> iteration_statement .)
    if              reduce using rule 27 (statement -> iteration_statement .)
    while           reduce using rule 27 (statement -> iteration_statement .)
    do              reduce using rule 27 (statement -> iteration_statement .)
    for             reduce using rule 27 (statement -> iteration_statement .)
    return          reduce using rule 27 (statement -> iteration_statement .)
    ID              reduce using rule 27 (statement -> iteration_statement .)
    int             reduce using rule 27 (statement -> iteration_statement .)
    float           reduce using rule 27 (statement -> iteration_statement .)
    str             reduce using rule 27 (statement -> iteration_statement .)
    LNOT            reduce using rule 27 (statement -> iteration_statement .)
    MINUS           reduce using rule 27 (statement -> iteration_statement .)
    INCREMENT       reduce using rule 27 (statement -> iteration_statement .)
    DECREMENT       reduce using rule 27 (statement -> iteration_statement .)
    INTEGER         reduce using rule 27 (statement -> iteration_statement .)
    FLOAT           reduce using rule 27 (statement -> iteration_statement .)
    STR             reduce using rule 27 (statement -> iteration_statement .)
    LPAREN          reduce using rule 27 (statement -> iteration_statement .)
    else            reduce using rule 27 (statement -> iteration_statement .)


state 89

    (28) statement -> jump_statement .

    RBRACE          reduce using rule 28 (statement -> jump_statement .)
    LBRACE          reduce using rule 28 (statement -> jump_statement .)
    if              reduce using rule 28 (statement -> jump_statement .)
    while           reduce using rule 28 (statement -> jump_statement .)
    do              reduce using rule 28 (statement -> jump_statement .)
    for             reduce using rule 28 (statement -> jump_statement .)
    return          reduce using rule 28 (statement -> jump_statement .)
    ID              reduce using rule 28 (statement -> jump_statement .)
    int             reduce using rule 28 (statement -> jump_statement .)
    float           reduce using rule 28 (statement -> jump_statement .)
    str             reduce using rule 28 (statement -> jump_statement .)
    LNOT            reduce using rule 28 (statement -> jump_statement .)
    MINUS           reduce using rule 28 (statement -> jump_statement .)
    INCREMENT       reduce using rule 28 (statement -> jump_statement .)
    DECREMENT       reduce using rule 28 (statement -> jump_statement .)
    INTEGER         reduce using rule 28 (statement -> jump_statement .)
    FLOAT           reduce using rule 28 (statement -> jump_statement .)
    STR             reduce using rule 28 (statement -> jump_statement .)
    LPAREN          reduce using rule 28 (statement -> jump_statement .)
    else            reduce using rule 28 (statement -> jump_statement .)


state 90

    (29) expression_statement -> expression . SEMI
    (39) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 120
    COMMA           shift and go to state 115


state 91

    (32) selection_statement -> if . LPAREN expression RPAREN statement
    (33) selection_statement -> if . LPAREN expression RPAREN statement else statement

    LPAREN          shift and go to state 121


state 92

    (34) iteration_statement -> while . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 122


state 93

    (35) iteration_statement -> do . statement while LPAREN expression RPAREN SEMI
    (23) statement -> . expression_statement
    (24) statement -> . declaration
    (25) statement -> . compound_statement
    (26) statement -> . selection_statement
    (27) statement -> . iteration_statement
    (28) statement -> . jump_statement
    (29) expression_statement -> . expression SEMI
    (7) declaration -> . init_declarator_list SEMI
    (30) compound_statement -> . LBRACE statement_list RBRACE
    (31) compound_statement -> . LBRACE RBRACE
    (32) selection_statement -> . if LPAREN expression RPAREN statement
    (33) selection_statement -> . if LPAREN expression RPAREN statement else statement
    (34) iteration_statement -> . while LPAREN expression RPAREN statement
    (35) iteration_statement -> . do statement while LPAREN expression RPAREN SEMI
    (36) iteration_statement -> . for LPAREN expression SEMI expression SEMI expression RPAREN statement
    (37) jump_statement -> . return expression SEMI
    (38) expression -> . assignment_expression
    (39) expression -> . expression COMMA assignment_expression
    (8) init_declarator_list -> . type_specifier init_declarator
    (9) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (40) assignment_expression -> . conditional_expression
    (41) assignment_expression -> . ID LBRACKET constant_expression RBRACKET EQUALS assignment_expression
    (42) assignment_expression -> . ID EQUALS assignment_expression
    (10) type_specifier -> . int
    (11) type_specifier -> . float
    (12) type_specifier -> . str
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (48) logical_and_expression -> . equality_expression
    (49) logical_and_expression -> . logical_and_expression LAND equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression EQ relational_expression
    (52) equality_expression -> . equality_expression NE relational_expression
    (53) relational_expression -> . additive_expression
    (54) relational_expression -> . relational_expression LT additive_expression
    (55) relational_expression -> . relational_expression GT additive_expression
    (56) relational_expression -> . relational_expression LE additive_expression
    (57) relational_expression -> . relational_expression GE additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression PLUS multiplicative_expression
    (60) additive_expression -> . additive_expression MINUS multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (63) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (64) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 53
    if              shift and go to state 91
    while           shift and go to state 92
    do              shift and go to state 93
    for             shift and go to state 94
    return          shift and go to state 95
    ID              shift and go to state 48
    int             shift and go to state 7
    float           shift and go to state 8
    str             shift and go to state 9
    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    statement                      shift and go to state 123
    expression                     shift and go to state 90
    expression_statement           shift and go to state 84
    declaration                    shift and go to state 85
    compound_statement             shift and go to state 86
    selection_statement            shift and go to state 87
    iteration_statement            shift and go to state 88
    jump_statement                 shift and go to state 89
    init_declarator_list           shift and go to state 6
    assignment_expression          shift and go to state 76
    type_specifier                 shift and go to state 96
    conditional_expression         shift and go to state 47
    logical_or_expression          shift and go to state 28
    logical_and_expression         shift and go to state 29
    equality_expression            shift and go to state 30
    relational_expression          shift and go to state 31
    additive_expression            shift and go to state 32
    multiplicative_expression      shift and go to state 33
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 94

    (36) iteration_statement -> for . LPAREN expression SEMI expression SEMI expression RPAREN statement

    LPAREN          shift and go to state 124


state 95

    (37) jump_statement -> return . expression SEMI
    (38) expression -> . assignment_expression
    (39) expression -> . expression COMMA assignment_expression
    (40) assignment_expression -> . conditional_expression
    (41) assignment_expression -> . ID LBRACKET constant_expression RBRACKET EQUALS assignment_expression
    (42) assignment_expression -> . ID EQUALS assignment_expression
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (48) logical_and_expression -> . equality_expression
    (49) logical_and_expression -> . logical_and_expression LAND equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression EQ relational_expression
    (52) equality_expression -> . equality_expression NE relational_expression
    (53) relational_expression -> . additive_expression
    (54) relational_expression -> . relational_expression LT additive_expression
    (55) relational_expression -> . relational_expression GT additive_expression
    (56) relational_expression -> . relational_expression LE additive_expression
    (57) relational_expression -> . relational_expression GE additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression PLUS multiplicative_expression
    (60) additive_expression -> . additive_expression MINUS multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (63) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (64) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 48
    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    expression                     shift and go to state 125
    assignment_expression          shift and go to state 76
    conditional_expression         shift and go to state 47
    logical_or_expression          shift and go to state 28
    logical_and_expression         shift and go to state 29
    equality_expression            shift and go to state 30
    relational_expression          shift and go to state 31
    additive_expression            shift and go to state 32
    multiplicative_expression      shift and go to state 33
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 96

    (8) init_declarator_list -> type_specifier . init_declarator
    (13) init_declarator -> . declarator
    (14) init_declarator -> . declarator EQUALS initializer
    (15) declarator -> . ID
    (16) declarator -> . ID LBRACKET constant_expression RBRACKET

    ID              shift and go to state 20

    init_declarator                shift and go to state 12
    declarator                     shift and go to state 13

state 97

    (72) postfix_expression -> ID LPAREN argument_expression_list . RPAREN
    (79) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 126
    COMMA           shift and go to state 127


state 98

    (78) argument_expression_list -> assignment_expression .

    RPAREN          reduce using rule 78 (argument_expression_list -> assignment_expression .)
    COMMA           reduce using rule 78 (argument_expression_list -> assignment_expression .)


state 99

    (44) conditional_expression -> logical_or_expression TERNARY expression . COLON conditional_expression
    (39) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 128
    COMMA           shift and go to state 115


state 100

    (47) logical_or_expression -> logical_or_expression LOR logical_and_expression .
    (49) logical_and_expression -> logical_and_expression . LAND equality_expression

    TERNARY         reduce using rule 47 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    LOR             reduce using rule 47 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    RBRACKET        reduce using rule 47 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    SEMI            reduce using rule 47 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    COMMA           reduce using rule 47 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    RPAREN          reduce using rule 47 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    COLON           reduce using rule 47 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    LAND            shift and go to state 58


state 101

    (49) logical_and_expression -> logical_and_expression LAND equality_expression .
    (51) equality_expression -> equality_expression . EQ relational_expression
    (52) equality_expression -> equality_expression . NE relational_expression

    LAND            reduce using rule 49 (logical_and_expression -> logical_and_expression LAND equality_expression .)
    TERNARY         reduce using rule 49 (logical_and_expression -> logical_and_expression LAND equality_expression .)
    LOR             reduce using rule 49 (logical_and_expression -> logical_and_expression LAND equality_expression .)
    RBRACKET        reduce using rule 49 (logical_and_expression -> logical_and_expression LAND equality_expression .)
    SEMI            reduce using rule 49 (logical_and_expression -> logical_and_expression LAND equality_expression .)
    COMMA           reduce using rule 49 (logical_and_expression -> logical_and_expression LAND equality_expression .)
    RPAREN          reduce using rule 49 (logical_and_expression -> logical_and_expression LAND equality_expression .)
    COLON           reduce using rule 49 (logical_and_expression -> logical_and_expression LAND equality_expression .)
    EQ              shift and go to state 59
    NE              shift and go to state 60


state 102

    (51) equality_expression -> equality_expression EQ relational_expression .
    (54) relational_expression -> relational_expression . LT additive_expression
    (55) relational_expression -> relational_expression . GT additive_expression
    (56) relational_expression -> relational_expression . LE additive_expression
    (57) relational_expression -> relational_expression . GE additive_expression

    EQ              reduce using rule 51 (equality_expression -> equality_expression EQ relational_expression .)
    NE              reduce using rule 51 (equality_expression -> equality_expression EQ relational_expression .)
    LAND            reduce using rule 51 (equality_expression -> equality_expression EQ relational_expression .)
    TERNARY         reduce using rule 51 (equality_expression -> equality_expression EQ relational_expression .)
    LOR             reduce using rule 51 (equality_expression -> equality_expression EQ relational_expression .)
    RBRACKET        reduce using rule 51 (equality_expression -> equality_expression EQ relational_expression .)
    SEMI            reduce using rule 51 (equality_expression -> equality_expression EQ relational_expression .)
    COMMA           reduce using rule 51 (equality_expression -> equality_expression EQ relational_expression .)
    RPAREN          reduce using rule 51 (equality_expression -> equality_expression EQ relational_expression .)
    COLON           reduce using rule 51 (equality_expression -> equality_expression EQ relational_expression .)
    LT              shift and go to state 61
    GT              shift and go to state 62
    LE              shift and go to state 63
    GE              shift and go to state 64


state 103

    (52) equality_expression -> equality_expression NE relational_expression .
    (54) relational_expression -> relational_expression . LT additive_expression
    (55) relational_expression -> relational_expression . GT additive_expression
    (56) relational_expression -> relational_expression . LE additive_expression
    (57) relational_expression -> relational_expression . GE additive_expression

    EQ              reduce using rule 52 (equality_expression -> equality_expression NE relational_expression .)
    NE              reduce using rule 52 (equality_expression -> equality_expression NE relational_expression .)
    LAND            reduce using rule 52 (equality_expression -> equality_expression NE relational_expression .)
    TERNARY         reduce using rule 52 (equality_expression -> equality_expression NE relational_expression .)
    LOR             reduce using rule 52 (equality_expression -> equality_expression NE relational_expression .)
    RBRACKET        reduce using rule 52 (equality_expression -> equality_expression NE relational_expression .)
    SEMI            reduce using rule 52 (equality_expression -> equality_expression NE relational_expression .)
    COMMA           reduce using rule 52 (equality_expression -> equality_expression NE relational_expression .)
    RPAREN          reduce using rule 52 (equality_expression -> equality_expression NE relational_expression .)
    COLON           reduce using rule 52 (equality_expression -> equality_expression NE relational_expression .)
    LT              shift and go to state 61
    GT              shift and go to state 62
    LE              shift and go to state 63
    GE              shift and go to state 64


state 104

    (54) relational_expression -> relational_expression LT additive_expression .
    (59) additive_expression -> additive_expression . PLUS multiplicative_expression
    (60) additive_expression -> additive_expression . MINUS multiplicative_expression

    LT              reduce using rule 54 (relational_expression -> relational_expression LT additive_expression .)
    GT              reduce using rule 54 (relational_expression -> relational_expression LT additive_expression .)
    LE              reduce using rule 54 (relational_expression -> relational_expression LT additive_expression .)
    GE              reduce using rule 54 (relational_expression -> relational_expression LT additive_expression .)
    EQ              reduce using rule 54 (relational_expression -> relational_expression LT additive_expression .)
    NE              reduce using rule 54 (relational_expression -> relational_expression LT additive_expression .)
    LAND            reduce using rule 54 (relational_expression -> relational_expression LT additive_expression .)
    TERNARY         reduce using rule 54 (relational_expression -> relational_expression LT additive_expression .)
    LOR             reduce using rule 54 (relational_expression -> relational_expression LT additive_expression .)
    RBRACKET        reduce using rule 54 (relational_expression -> relational_expression LT additive_expression .)
    SEMI            reduce using rule 54 (relational_expression -> relational_expression LT additive_expression .)
    COMMA           reduce using rule 54 (relational_expression -> relational_expression LT additive_expression .)
    RPAREN          reduce using rule 54 (relational_expression -> relational_expression LT additive_expression .)
    COLON           reduce using rule 54 (relational_expression -> relational_expression LT additive_expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66


state 105

    (55) relational_expression -> relational_expression GT additive_expression .
    (59) additive_expression -> additive_expression . PLUS multiplicative_expression
    (60) additive_expression -> additive_expression . MINUS multiplicative_expression

    LT              reduce using rule 55 (relational_expression -> relational_expression GT additive_expression .)
    GT              reduce using rule 55 (relational_expression -> relational_expression GT additive_expression .)
    LE              reduce using rule 55 (relational_expression -> relational_expression GT additive_expression .)
    GE              reduce using rule 55 (relational_expression -> relational_expression GT additive_expression .)
    EQ              reduce using rule 55 (relational_expression -> relational_expression GT additive_expression .)
    NE              reduce using rule 55 (relational_expression -> relational_expression GT additive_expression .)
    LAND            reduce using rule 55 (relational_expression -> relational_expression GT additive_expression .)
    TERNARY         reduce using rule 55 (relational_expression -> relational_expression GT additive_expression .)
    LOR             reduce using rule 55 (relational_expression -> relational_expression GT additive_expression .)
    RBRACKET        reduce using rule 55 (relational_expression -> relational_expression GT additive_expression .)
    SEMI            reduce using rule 55 (relational_expression -> relational_expression GT additive_expression .)
    COMMA           reduce using rule 55 (relational_expression -> relational_expression GT additive_expression .)
    RPAREN          reduce using rule 55 (relational_expression -> relational_expression GT additive_expression .)
    COLON           reduce using rule 55 (relational_expression -> relational_expression GT additive_expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66


state 106

    (56) relational_expression -> relational_expression LE additive_expression .
    (59) additive_expression -> additive_expression . PLUS multiplicative_expression
    (60) additive_expression -> additive_expression . MINUS multiplicative_expression

    LT              reduce using rule 56 (relational_expression -> relational_expression LE additive_expression .)
    GT              reduce using rule 56 (relational_expression -> relational_expression LE additive_expression .)
    LE              reduce using rule 56 (relational_expression -> relational_expression LE additive_expression .)
    GE              reduce using rule 56 (relational_expression -> relational_expression LE additive_expression .)
    EQ              reduce using rule 56 (relational_expression -> relational_expression LE additive_expression .)
    NE              reduce using rule 56 (relational_expression -> relational_expression LE additive_expression .)
    LAND            reduce using rule 56 (relational_expression -> relational_expression LE additive_expression .)
    TERNARY         reduce using rule 56 (relational_expression -> relational_expression LE additive_expression .)
    LOR             reduce using rule 56 (relational_expression -> relational_expression LE additive_expression .)
    RBRACKET        reduce using rule 56 (relational_expression -> relational_expression LE additive_expression .)
    SEMI            reduce using rule 56 (relational_expression -> relational_expression LE additive_expression .)
    COMMA           reduce using rule 56 (relational_expression -> relational_expression LE additive_expression .)
    RPAREN          reduce using rule 56 (relational_expression -> relational_expression LE additive_expression .)
    COLON           reduce using rule 56 (relational_expression -> relational_expression LE additive_expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66


state 107

    (57) relational_expression -> relational_expression GE additive_expression .
    (59) additive_expression -> additive_expression . PLUS multiplicative_expression
    (60) additive_expression -> additive_expression . MINUS multiplicative_expression

    LT              reduce using rule 57 (relational_expression -> relational_expression GE additive_expression .)
    GT              reduce using rule 57 (relational_expression -> relational_expression GE additive_expression .)
    LE              reduce using rule 57 (relational_expression -> relational_expression GE additive_expression .)
    GE              reduce using rule 57 (relational_expression -> relational_expression GE additive_expression .)
    EQ              reduce using rule 57 (relational_expression -> relational_expression GE additive_expression .)
    NE              reduce using rule 57 (relational_expression -> relational_expression GE additive_expression .)
    LAND            reduce using rule 57 (relational_expression -> relational_expression GE additive_expression .)
    TERNARY         reduce using rule 57 (relational_expression -> relational_expression GE additive_expression .)
    LOR             reduce using rule 57 (relational_expression -> relational_expression GE additive_expression .)
    RBRACKET        reduce using rule 57 (relational_expression -> relational_expression GE additive_expression .)
    SEMI            reduce using rule 57 (relational_expression -> relational_expression GE additive_expression .)
    COMMA           reduce using rule 57 (relational_expression -> relational_expression GE additive_expression .)
    RPAREN          reduce using rule 57 (relational_expression -> relational_expression GE additive_expression .)
    COLON           reduce using rule 57 (relational_expression -> relational_expression GE additive_expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66


state 108

    (59) additive_expression -> additive_expression PLUS multiplicative_expression .
    (62) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (63) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (64) multiplicative_expression -> multiplicative_expression . MODULO unary_expression

    PLUS            reduce using rule 59 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 59 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LT              reduce using rule 59 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GT              reduce using rule 59 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LE              reduce using rule 59 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GE              reduce using rule 59 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQ              reduce using rule 59 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NE              reduce using rule 59 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LAND            reduce using rule 59 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TERNARY         reduce using rule 59 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LOR             reduce using rule 59 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACKET        reduce using rule 59 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMI            reduce using rule 59 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 59 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 59 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COLON           reduce using rule 59 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68
    MODULO          shift and go to state 69


state 109

    (60) additive_expression -> additive_expression MINUS multiplicative_expression .
    (62) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (63) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (64) multiplicative_expression -> multiplicative_expression . MODULO unary_expression

    PLUS            reduce using rule 60 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 60 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LT              reduce using rule 60 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GT              reduce using rule 60 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LE              reduce using rule 60 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GE              reduce using rule 60 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQ              reduce using rule 60 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NE              reduce using rule 60 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LAND            reduce using rule 60 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TERNARY         reduce using rule 60 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LOR             reduce using rule 60 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACKET        reduce using rule 60 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMI            reduce using rule 60 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 60 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 60 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COLON           reduce using rule 60 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68
    MODULO          shift and go to state 69


state 110

    (62) multiplicative_expression -> multiplicative_expression TIMES unary_expression .

    TIMES           reduce using rule 62 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    DIVIDE          reduce using rule 62 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    MODULO          reduce using rule 62 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    PLUS            reduce using rule 62 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    MINUS           reduce using rule 62 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    LT              reduce using rule 62 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    GT              reduce using rule 62 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    LE              reduce using rule 62 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    GE              reduce using rule 62 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    EQ              reduce using rule 62 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    NE              reduce using rule 62 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    LAND            reduce using rule 62 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    TERNARY         reduce using rule 62 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    LOR             reduce using rule 62 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    RBRACKET        reduce using rule 62 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    SEMI            reduce using rule 62 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    COMMA           reduce using rule 62 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    RPAREN          reduce using rule 62 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    COLON           reduce using rule 62 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)


state 111

    (63) multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .

    TIMES           reduce using rule 63 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    DIVIDE          reduce using rule 63 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    MODULO          reduce using rule 63 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    PLUS            reduce using rule 63 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    MINUS           reduce using rule 63 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LT              reduce using rule 63 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    GT              reduce using rule 63 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LE              reduce using rule 63 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    GE              reduce using rule 63 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    EQ              reduce using rule 63 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    NE              reduce using rule 63 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LAND            reduce using rule 63 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    TERNARY         reduce using rule 63 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LOR             reduce using rule 63 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RBRACKET        reduce using rule 63 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    SEMI            reduce using rule 63 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    COMMA           reduce using rule 63 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RPAREN          reduce using rule 63 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    COLON           reduce using rule 63 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)


state 112

    (64) multiplicative_expression -> multiplicative_expression MODULO unary_expression .

    TIMES           reduce using rule 64 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    DIVIDE          reduce using rule 64 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    MODULO          reduce using rule 64 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    PLUS            reduce using rule 64 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    MINUS           reduce using rule 64 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    LT              reduce using rule 64 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    GT              reduce using rule 64 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    LE              reduce using rule 64 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    GE              reduce using rule 64 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    EQ              reduce using rule 64 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    NE              reduce using rule 64 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    LAND            reduce using rule 64 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    TERNARY         reduce using rule 64 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    LOR             reduce using rule 64 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    RBRACKET        reduce using rule 64 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    SEMI            reduce using rule 64 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    COMMA           reduce using rule 64 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    RPAREN          reduce using rule 64 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    COLON           reduce using rule 64 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)


state 113

    (71) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET
    (39) expression -> expression . COMMA assignment_expression

    RBRACKET        shift and go to state 129
    COMMA           shift and go to state 115


state 114

    (77) primary_expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 77 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 77 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 77 (primary_expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 77 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 77 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 77 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 77 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 77 (primary_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 77 (primary_expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 77 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 77 (primary_expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 77 (primary_expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 77 (primary_expression -> LPAREN expression RPAREN .)
    TERNARY         reduce using rule 77 (primary_expression -> LPAREN expression RPAREN .)
    LOR             reduce using rule 77 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 77 (primary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 77 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 77 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 77 (primary_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 77 (primary_expression -> LPAREN expression RPAREN .)


state 115

    (39) expression -> expression COMMA . assignment_expression
    (40) assignment_expression -> . conditional_expression
    (41) assignment_expression -> . ID LBRACKET constant_expression RBRACKET EQUALS assignment_expression
    (42) assignment_expression -> . ID EQUALS assignment_expression
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (48) logical_and_expression -> . equality_expression
    (49) logical_and_expression -> . logical_and_expression LAND equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression EQ relational_expression
    (52) equality_expression -> . equality_expression NE relational_expression
    (53) relational_expression -> . additive_expression
    (54) relational_expression -> . relational_expression LT additive_expression
    (55) relational_expression -> . relational_expression GT additive_expression
    (56) relational_expression -> . relational_expression LE additive_expression
    (57) relational_expression -> . relational_expression GE additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression PLUS multiplicative_expression
    (60) additive_expression -> . additive_expression MINUS multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (63) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (64) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 48
    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    assignment_expression          shift and go to state 130
    conditional_expression         shift and go to state 47
    logical_or_expression          shift and go to state 28
    logical_and_expression         shift and go to state 29
    equality_expression            shift and go to state 30
    relational_expression          shift and go to state 31
    additive_expression            shift and go to state 32
    multiplicative_expression      shift and go to state 33
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 116

    (41) assignment_expression -> ID LBRACKET constant_expression . RBRACKET EQUALS assignment_expression

    RBRACKET        shift and go to state 131


state 117

    (42) assignment_expression -> ID EQUALS assignment_expression .

    SEMI            reduce using rule 42 (assignment_expression -> ID EQUALS assignment_expression .)
    COMMA           reduce using rule 42 (assignment_expression -> ID EQUALS assignment_expression .)
    RPAREN          reduce using rule 42 (assignment_expression -> ID EQUALS assignment_expression .)
    COLON           reduce using rule 42 (assignment_expression -> ID EQUALS assignment_expression .)
    RBRACKET        reduce using rule 42 (assignment_expression -> ID EQUALS assignment_expression .)


state 118

    (30) compound_statement -> LBRACE statement_list RBRACE .

    int             reduce using rule 30 (compound_statement -> LBRACE statement_list RBRACE .)
    float           reduce using rule 30 (compound_statement -> LBRACE statement_list RBRACE .)
    str             reduce using rule 30 (compound_statement -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 30 (compound_statement -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 30 (compound_statement -> LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 30 (compound_statement -> LBRACE statement_list RBRACE .)
    if              reduce using rule 30 (compound_statement -> LBRACE statement_list RBRACE .)
    while           reduce using rule 30 (compound_statement -> LBRACE statement_list RBRACE .)
    do              reduce using rule 30 (compound_statement -> LBRACE statement_list RBRACE .)
    for             reduce using rule 30 (compound_statement -> LBRACE statement_list RBRACE .)
    return          reduce using rule 30 (compound_statement -> LBRACE statement_list RBRACE .)
    ID              reduce using rule 30 (compound_statement -> LBRACE statement_list RBRACE .)
    LNOT            reduce using rule 30 (compound_statement -> LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 30 (compound_statement -> LBRACE statement_list RBRACE .)
    INCREMENT       reduce using rule 30 (compound_statement -> LBRACE statement_list RBRACE .)
    DECREMENT       reduce using rule 30 (compound_statement -> LBRACE statement_list RBRACE .)
    INTEGER         reduce using rule 30 (compound_statement -> LBRACE statement_list RBRACE .)
    FLOAT           reduce using rule 30 (compound_statement -> LBRACE statement_list RBRACE .)
    STR             reduce using rule 30 (compound_statement -> LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 30 (compound_statement -> LBRACE statement_list RBRACE .)
    else            reduce using rule 30 (compound_statement -> LBRACE statement_list RBRACE .)


state 119

    (22) statement_list -> statement_list statement .

    RBRACE          reduce using rule 22 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 22 (statement_list -> statement_list statement .)
    if              reduce using rule 22 (statement_list -> statement_list statement .)
    while           reduce using rule 22 (statement_list -> statement_list statement .)
    do              reduce using rule 22 (statement_list -> statement_list statement .)
    for             reduce using rule 22 (statement_list -> statement_list statement .)
    return          reduce using rule 22 (statement_list -> statement_list statement .)
    ID              reduce using rule 22 (statement_list -> statement_list statement .)
    int             reduce using rule 22 (statement_list -> statement_list statement .)
    float           reduce using rule 22 (statement_list -> statement_list statement .)
    str             reduce using rule 22 (statement_list -> statement_list statement .)
    LNOT            reduce using rule 22 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 22 (statement_list -> statement_list statement .)
    INCREMENT       reduce using rule 22 (statement_list -> statement_list statement .)
    DECREMENT       reduce using rule 22 (statement_list -> statement_list statement .)
    INTEGER         reduce using rule 22 (statement_list -> statement_list statement .)
    FLOAT           reduce using rule 22 (statement_list -> statement_list statement .)
    STR             reduce using rule 22 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 22 (statement_list -> statement_list statement .)


state 120

    (29) expression_statement -> expression SEMI .

    RBRACE          reduce using rule 29 (expression_statement -> expression SEMI .)
    LBRACE          reduce using rule 29 (expression_statement -> expression SEMI .)
    if              reduce using rule 29 (expression_statement -> expression SEMI .)
    while           reduce using rule 29 (expression_statement -> expression SEMI .)
    do              reduce using rule 29 (expression_statement -> expression SEMI .)
    for             reduce using rule 29 (expression_statement -> expression SEMI .)
    return          reduce using rule 29 (expression_statement -> expression SEMI .)
    ID              reduce using rule 29 (expression_statement -> expression SEMI .)
    int             reduce using rule 29 (expression_statement -> expression SEMI .)
    float           reduce using rule 29 (expression_statement -> expression SEMI .)
    str             reduce using rule 29 (expression_statement -> expression SEMI .)
    LNOT            reduce using rule 29 (expression_statement -> expression SEMI .)
    MINUS           reduce using rule 29 (expression_statement -> expression SEMI .)
    INCREMENT       reduce using rule 29 (expression_statement -> expression SEMI .)
    DECREMENT       reduce using rule 29 (expression_statement -> expression SEMI .)
    INTEGER         reduce using rule 29 (expression_statement -> expression SEMI .)
    FLOAT           reduce using rule 29 (expression_statement -> expression SEMI .)
    STR             reduce using rule 29 (expression_statement -> expression SEMI .)
    LPAREN          reduce using rule 29 (expression_statement -> expression SEMI .)
    else            reduce using rule 29 (expression_statement -> expression SEMI .)


state 121

    (32) selection_statement -> if LPAREN . expression RPAREN statement
    (33) selection_statement -> if LPAREN . expression RPAREN statement else statement
    (38) expression -> . assignment_expression
    (39) expression -> . expression COMMA assignment_expression
    (40) assignment_expression -> . conditional_expression
    (41) assignment_expression -> . ID LBRACKET constant_expression RBRACKET EQUALS assignment_expression
    (42) assignment_expression -> . ID EQUALS assignment_expression
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (48) logical_and_expression -> . equality_expression
    (49) logical_and_expression -> . logical_and_expression LAND equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression EQ relational_expression
    (52) equality_expression -> . equality_expression NE relational_expression
    (53) relational_expression -> . additive_expression
    (54) relational_expression -> . relational_expression LT additive_expression
    (55) relational_expression -> . relational_expression GT additive_expression
    (56) relational_expression -> . relational_expression LE additive_expression
    (57) relational_expression -> . relational_expression GE additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression PLUS multiplicative_expression
    (60) additive_expression -> . additive_expression MINUS multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (63) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (64) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 48
    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    expression                     shift and go to state 132
    assignment_expression          shift and go to state 76
    conditional_expression         shift and go to state 47
    logical_or_expression          shift and go to state 28
    logical_and_expression         shift and go to state 29
    equality_expression            shift and go to state 30
    relational_expression          shift and go to state 31
    additive_expression            shift and go to state 32
    multiplicative_expression      shift and go to state 33
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 122

    (34) iteration_statement -> while LPAREN . expression RPAREN statement
    (38) expression -> . assignment_expression
    (39) expression -> . expression COMMA assignment_expression
    (40) assignment_expression -> . conditional_expression
    (41) assignment_expression -> . ID LBRACKET constant_expression RBRACKET EQUALS assignment_expression
    (42) assignment_expression -> . ID EQUALS assignment_expression
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (48) logical_and_expression -> . equality_expression
    (49) logical_and_expression -> . logical_and_expression LAND equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression EQ relational_expression
    (52) equality_expression -> . equality_expression NE relational_expression
    (53) relational_expression -> . additive_expression
    (54) relational_expression -> . relational_expression LT additive_expression
    (55) relational_expression -> . relational_expression GT additive_expression
    (56) relational_expression -> . relational_expression LE additive_expression
    (57) relational_expression -> . relational_expression GE additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression PLUS multiplicative_expression
    (60) additive_expression -> . additive_expression MINUS multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (63) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (64) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 48
    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    expression                     shift and go to state 133
    assignment_expression          shift and go to state 76
    conditional_expression         shift and go to state 47
    logical_or_expression          shift and go to state 28
    logical_and_expression         shift and go to state 29
    equality_expression            shift and go to state 30
    relational_expression          shift and go to state 31
    additive_expression            shift and go to state 32
    multiplicative_expression      shift and go to state 33
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 123

    (35) iteration_statement -> do statement . while LPAREN expression RPAREN SEMI

    while           shift and go to state 134


state 124

    (36) iteration_statement -> for LPAREN . expression SEMI expression SEMI expression RPAREN statement
    (38) expression -> . assignment_expression
    (39) expression -> . expression COMMA assignment_expression
    (40) assignment_expression -> . conditional_expression
    (41) assignment_expression -> . ID LBRACKET constant_expression RBRACKET EQUALS assignment_expression
    (42) assignment_expression -> . ID EQUALS assignment_expression
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (48) logical_and_expression -> . equality_expression
    (49) logical_and_expression -> . logical_and_expression LAND equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression EQ relational_expression
    (52) equality_expression -> . equality_expression NE relational_expression
    (53) relational_expression -> . additive_expression
    (54) relational_expression -> . relational_expression LT additive_expression
    (55) relational_expression -> . relational_expression GT additive_expression
    (56) relational_expression -> . relational_expression LE additive_expression
    (57) relational_expression -> . relational_expression GE additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression PLUS multiplicative_expression
    (60) additive_expression -> . additive_expression MINUS multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (63) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (64) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 48
    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    expression                     shift and go to state 135
    assignment_expression          shift and go to state 76
    conditional_expression         shift and go to state 47
    logical_or_expression          shift and go to state 28
    logical_and_expression         shift and go to state 29
    equality_expression            shift and go to state 30
    relational_expression          shift and go to state 31
    additive_expression            shift and go to state 32
    multiplicative_expression      shift and go to state 33
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 125

    (37) jump_statement -> return expression . SEMI
    (39) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 136
    COMMA           shift and go to state 115


state 126

    (72) postfix_expression -> ID LPAREN argument_expression_list RPAREN .

    LBRACKET        reduce using rule 72 (postfix_expression -> ID LPAREN argument_expression_list RPAREN .)
    TIMES           reduce using rule 72 (postfix_expression -> ID LPAREN argument_expression_list RPAREN .)
    DIVIDE          reduce using rule 72 (postfix_expression -> ID LPAREN argument_expression_list RPAREN .)
    MODULO          reduce using rule 72 (postfix_expression -> ID LPAREN argument_expression_list RPAREN .)
    PLUS            reduce using rule 72 (postfix_expression -> ID LPAREN argument_expression_list RPAREN .)
    MINUS           reduce using rule 72 (postfix_expression -> ID LPAREN argument_expression_list RPAREN .)
    LT              reduce using rule 72 (postfix_expression -> ID LPAREN argument_expression_list RPAREN .)
    GT              reduce using rule 72 (postfix_expression -> ID LPAREN argument_expression_list RPAREN .)
    LE              reduce using rule 72 (postfix_expression -> ID LPAREN argument_expression_list RPAREN .)
    GE              reduce using rule 72 (postfix_expression -> ID LPAREN argument_expression_list RPAREN .)
    EQ              reduce using rule 72 (postfix_expression -> ID LPAREN argument_expression_list RPAREN .)
    NE              reduce using rule 72 (postfix_expression -> ID LPAREN argument_expression_list RPAREN .)
    LAND            reduce using rule 72 (postfix_expression -> ID LPAREN argument_expression_list RPAREN .)
    TERNARY         reduce using rule 72 (postfix_expression -> ID LPAREN argument_expression_list RPAREN .)
    LOR             reduce using rule 72 (postfix_expression -> ID LPAREN argument_expression_list RPAREN .)
    RBRACKET        reduce using rule 72 (postfix_expression -> ID LPAREN argument_expression_list RPAREN .)
    SEMI            reduce using rule 72 (postfix_expression -> ID LPAREN argument_expression_list RPAREN .)
    COMMA           reduce using rule 72 (postfix_expression -> ID LPAREN argument_expression_list RPAREN .)
    RPAREN          reduce using rule 72 (postfix_expression -> ID LPAREN argument_expression_list RPAREN .)
    COLON           reduce using rule 72 (postfix_expression -> ID LPAREN argument_expression_list RPAREN .)


state 127

    (79) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (40) assignment_expression -> . conditional_expression
    (41) assignment_expression -> . ID LBRACKET constant_expression RBRACKET EQUALS assignment_expression
    (42) assignment_expression -> . ID EQUALS assignment_expression
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (48) logical_and_expression -> . equality_expression
    (49) logical_and_expression -> . logical_and_expression LAND equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression EQ relational_expression
    (52) equality_expression -> . equality_expression NE relational_expression
    (53) relational_expression -> . additive_expression
    (54) relational_expression -> . relational_expression LT additive_expression
    (55) relational_expression -> . relational_expression GT additive_expression
    (56) relational_expression -> . relational_expression LE additive_expression
    (57) relational_expression -> . relational_expression GE additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression PLUS multiplicative_expression
    (60) additive_expression -> . additive_expression MINUS multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (63) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (64) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 48
    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    assignment_expression          shift and go to state 137
    conditional_expression         shift and go to state 47
    logical_or_expression          shift and go to state 28
    logical_and_expression         shift and go to state 29
    equality_expression            shift and go to state 30
    relational_expression          shift and go to state 31
    additive_expression            shift and go to state 32
    multiplicative_expression      shift and go to state 33
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 128

    (44) conditional_expression -> logical_or_expression TERNARY expression COLON . conditional_expression
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (48) logical_and_expression -> . equality_expression
    (49) logical_and_expression -> . logical_and_expression LAND equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression EQ relational_expression
    (52) equality_expression -> . equality_expression NE relational_expression
    (53) relational_expression -> . additive_expression
    (54) relational_expression -> . relational_expression LT additive_expression
    (55) relational_expression -> . relational_expression GT additive_expression
    (56) relational_expression -> . relational_expression LE additive_expression
    (57) relational_expression -> . relational_expression GE additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression PLUS multiplicative_expression
    (60) additive_expression -> . additive_expression MINUS multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (63) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (64) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    ID              shift and go to state 25
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    logical_or_expression          shift and go to state 28
    conditional_expression         shift and go to state 138
    logical_and_expression         shift and go to state 29
    equality_expression            shift and go to state 30
    relational_expression          shift and go to state 31
    additive_expression            shift and go to state 32
    multiplicative_expression      shift and go to state 33
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 129

    (71) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 71 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 71 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 71 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MODULO          reduce using rule 71 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 71 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 71 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 71 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 71 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 71 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GE              reduce using rule 71 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 71 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NE              reduce using rule 71 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LAND            reduce using rule 71 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TERNARY         reduce using rule 71 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LOR             reduce using rule 71 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 71 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 71 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 71 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 71 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COLON           reduce using rule 71 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)


state 130

    (39) expression -> expression COMMA assignment_expression .

    RPAREN          reduce using rule 39 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 39 (expression -> expression COMMA assignment_expression .)
    SEMI            reduce using rule 39 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 39 (expression -> expression COMMA assignment_expression .)
    RBRACKET        reduce using rule 39 (expression -> expression COMMA assignment_expression .)


state 131

    (41) assignment_expression -> ID LBRACKET constant_expression RBRACKET . EQUALS assignment_expression

    EQUALS          shift and go to state 139


state 132

    (32) selection_statement -> if LPAREN expression . RPAREN statement
    (33) selection_statement -> if LPAREN expression . RPAREN statement else statement
    (39) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 140
    COMMA           shift and go to state 115


state 133

    (34) iteration_statement -> while LPAREN expression . RPAREN statement
    (39) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 141
    COMMA           shift and go to state 115


state 134

    (35) iteration_statement -> do statement while . LPAREN expression RPAREN SEMI

    LPAREN          shift and go to state 142


state 135

    (36) iteration_statement -> for LPAREN expression . SEMI expression SEMI expression RPAREN statement
    (39) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 143
    COMMA           shift and go to state 115


state 136

    (37) jump_statement -> return expression SEMI .

    RBRACE          reduce using rule 37 (jump_statement -> return expression SEMI .)
    LBRACE          reduce using rule 37 (jump_statement -> return expression SEMI .)
    if              reduce using rule 37 (jump_statement -> return expression SEMI .)
    while           reduce using rule 37 (jump_statement -> return expression SEMI .)
    do              reduce using rule 37 (jump_statement -> return expression SEMI .)
    for             reduce using rule 37 (jump_statement -> return expression SEMI .)
    return          reduce using rule 37 (jump_statement -> return expression SEMI .)
    ID              reduce using rule 37 (jump_statement -> return expression SEMI .)
    int             reduce using rule 37 (jump_statement -> return expression SEMI .)
    float           reduce using rule 37 (jump_statement -> return expression SEMI .)
    str             reduce using rule 37 (jump_statement -> return expression SEMI .)
    LNOT            reduce using rule 37 (jump_statement -> return expression SEMI .)
    MINUS           reduce using rule 37 (jump_statement -> return expression SEMI .)
    INCREMENT       reduce using rule 37 (jump_statement -> return expression SEMI .)
    DECREMENT       reduce using rule 37 (jump_statement -> return expression SEMI .)
    INTEGER         reduce using rule 37 (jump_statement -> return expression SEMI .)
    FLOAT           reduce using rule 37 (jump_statement -> return expression SEMI .)
    STR             reduce using rule 37 (jump_statement -> return expression SEMI .)
    LPAREN          reduce using rule 37 (jump_statement -> return expression SEMI .)
    else            reduce using rule 37 (jump_statement -> return expression SEMI .)


state 137

    (79) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    RPAREN          reduce using rule 79 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 79 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)


state 138

    (44) conditional_expression -> logical_or_expression TERNARY expression COLON conditional_expression .

    RBRACKET        reduce using rule 44 (conditional_expression -> logical_or_expression TERNARY expression COLON conditional_expression .)
    SEMI            reduce using rule 44 (conditional_expression -> logical_or_expression TERNARY expression COLON conditional_expression .)
    COMMA           reduce using rule 44 (conditional_expression -> logical_or_expression TERNARY expression COLON conditional_expression .)
    RPAREN          reduce using rule 44 (conditional_expression -> logical_or_expression TERNARY expression COLON conditional_expression .)
    COLON           reduce using rule 44 (conditional_expression -> logical_or_expression TERNARY expression COLON conditional_expression .)


state 139

    (41) assignment_expression -> ID LBRACKET constant_expression RBRACKET EQUALS . assignment_expression
    (40) assignment_expression -> . conditional_expression
    (41) assignment_expression -> . ID LBRACKET constant_expression RBRACKET EQUALS assignment_expression
    (42) assignment_expression -> . ID EQUALS assignment_expression
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (48) logical_and_expression -> . equality_expression
    (49) logical_and_expression -> . logical_and_expression LAND equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression EQ relational_expression
    (52) equality_expression -> . equality_expression NE relational_expression
    (53) relational_expression -> . additive_expression
    (54) relational_expression -> . relational_expression LT additive_expression
    (55) relational_expression -> . relational_expression GT additive_expression
    (56) relational_expression -> . relational_expression LE additive_expression
    (57) relational_expression -> . relational_expression GE additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression PLUS multiplicative_expression
    (60) additive_expression -> . additive_expression MINUS multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (63) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (64) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 48
    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    assignment_expression          shift and go to state 144
    conditional_expression         shift and go to state 47
    logical_or_expression          shift and go to state 28
    logical_and_expression         shift and go to state 29
    equality_expression            shift and go to state 30
    relational_expression          shift and go to state 31
    additive_expression            shift and go to state 32
    multiplicative_expression      shift and go to state 33
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 140

    (32) selection_statement -> if LPAREN expression RPAREN . statement
    (33) selection_statement -> if LPAREN expression RPAREN . statement else statement
    (23) statement -> . expression_statement
    (24) statement -> . declaration
    (25) statement -> . compound_statement
    (26) statement -> . selection_statement
    (27) statement -> . iteration_statement
    (28) statement -> . jump_statement
    (29) expression_statement -> . expression SEMI
    (7) declaration -> . init_declarator_list SEMI
    (30) compound_statement -> . LBRACE statement_list RBRACE
    (31) compound_statement -> . LBRACE RBRACE
    (32) selection_statement -> . if LPAREN expression RPAREN statement
    (33) selection_statement -> . if LPAREN expression RPAREN statement else statement
    (34) iteration_statement -> . while LPAREN expression RPAREN statement
    (35) iteration_statement -> . do statement while LPAREN expression RPAREN SEMI
    (36) iteration_statement -> . for LPAREN expression SEMI expression SEMI expression RPAREN statement
    (37) jump_statement -> . return expression SEMI
    (38) expression -> . assignment_expression
    (39) expression -> . expression COMMA assignment_expression
    (8) init_declarator_list -> . type_specifier init_declarator
    (9) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (40) assignment_expression -> . conditional_expression
    (41) assignment_expression -> . ID LBRACKET constant_expression RBRACKET EQUALS assignment_expression
    (42) assignment_expression -> . ID EQUALS assignment_expression
    (10) type_specifier -> . int
    (11) type_specifier -> . float
    (12) type_specifier -> . str
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (48) logical_and_expression -> . equality_expression
    (49) logical_and_expression -> . logical_and_expression LAND equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression EQ relational_expression
    (52) equality_expression -> . equality_expression NE relational_expression
    (53) relational_expression -> . additive_expression
    (54) relational_expression -> . relational_expression LT additive_expression
    (55) relational_expression -> . relational_expression GT additive_expression
    (56) relational_expression -> . relational_expression LE additive_expression
    (57) relational_expression -> . relational_expression GE additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression PLUS multiplicative_expression
    (60) additive_expression -> . additive_expression MINUS multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (63) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (64) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 53
    if              shift and go to state 91
    while           shift and go to state 92
    do              shift and go to state 93
    for             shift and go to state 94
    return          shift and go to state 95
    ID              shift and go to state 48
    int             shift and go to state 7
    float           shift and go to state 8
    str             shift and go to state 9
    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    expression                     shift and go to state 90
    statement                      shift and go to state 145
    expression_statement           shift and go to state 84
    declaration                    shift and go to state 85
    compound_statement             shift and go to state 86
    selection_statement            shift and go to state 87
    iteration_statement            shift and go to state 88
    jump_statement                 shift and go to state 89
    init_declarator_list           shift and go to state 6
    assignment_expression          shift and go to state 76
    type_specifier                 shift and go to state 96
    conditional_expression         shift and go to state 47
    logical_or_expression          shift and go to state 28
    logical_and_expression         shift and go to state 29
    equality_expression            shift and go to state 30
    relational_expression          shift and go to state 31
    additive_expression            shift and go to state 32
    multiplicative_expression      shift and go to state 33
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 141

    (34) iteration_statement -> while LPAREN expression RPAREN . statement
    (23) statement -> . expression_statement
    (24) statement -> . declaration
    (25) statement -> . compound_statement
    (26) statement -> . selection_statement
    (27) statement -> . iteration_statement
    (28) statement -> . jump_statement
    (29) expression_statement -> . expression SEMI
    (7) declaration -> . init_declarator_list SEMI
    (30) compound_statement -> . LBRACE statement_list RBRACE
    (31) compound_statement -> . LBRACE RBRACE
    (32) selection_statement -> . if LPAREN expression RPAREN statement
    (33) selection_statement -> . if LPAREN expression RPAREN statement else statement
    (34) iteration_statement -> . while LPAREN expression RPAREN statement
    (35) iteration_statement -> . do statement while LPAREN expression RPAREN SEMI
    (36) iteration_statement -> . for LPAREN expression SEMI expression SEMI expression RPAREN statement
    (37) jump_statement -> . return expression SEMI
    (38) expression -> . assignment_expression
    (39) expression -> . expression COMMA assignment_expression
    (8) init_declarator_list -> . type_specifier init_declarator
    (9) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (40) assignment_expression -> . conditional_expression
    (41) assignment_expression -> . ID LBRACKET constant_expression RBRACKET EQUALS assignment_expression
    (42) assignment_expression -> . ID EQUALS assignment_expression
    (10) type_specifier -> . int
    (11) type_specifier -> . float
    (12) type_specifier -> . str
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (48) logical_and_expression -> . equality_expression
    (49) logical_and_expression -> . logical_and_expression LAND equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression EQ relational_expression
    (52) equality_expression -> . equality_expression NE relational_expression
    (53) relational_expression -> . additive_expression
    (54) relational_expression -> . relational_expression LT additive_expression
    (55) relational_expression -> . relational_expression GT additive_expression
    (56) relational_expression -> . relational_expression LE additive_expression
    (57) relational_expression -> . relational_expression GE additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression PLUS multiplicative_expression
    (60) additive_expression -> . additive_expression MINUS multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (63) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (64) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 53
    if              shift and go to state 91
    while           shift and go to state 92
    do              shift and go to state 93
    for             shift and go to state 94
    return          shift and go to state 95
    ID              shift and go to state 48
    int             shift and go to state 7
    float           shift and go to state 8
    str             shift and go to state 9
    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    expression                     shift and go to state 90
    statement                      shift and go to state 146
    expression_statement           shift and go to state 84
    declaration                    shift and go to state 85
    compound_statement             shift and go to state 86
    selection_statement            shift and go to state 87
    iteration_statement            shift and go to state 88
    jump_statement                 shift and go to state 89
    init_declarator_list           shift and go to state 6
    assignment_expression          shift and go to state 76
    type_specifier                 shift and go to state 96
    conditional_expression         shift and go to state 47
    logical_or_expression          shift and go to state 28
    logical_and_expression         shift and go to state 29
    equality_expression            shift and go to state 30
    relational_expression          shift and go to state 31
    additive_expression            shift and go to state 32
    multiplicative_expression      shift and go to state 33
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 142

    (35) iteration_statement -> do statement while LPAREN . expression RPAREN SEMI
    (38) expression -> . assignment_expression
    (39) expression -> . expression COMMA assignment_expression
    (40) assignment_expression -> . conditional_expression
    (41) assignment_expression -> . ID LBRACKET constant_expression RBRACKET EQUALS assignment_expression
    (42) assignment_expression -> . ID EQUALS assignment_expression
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (48) logical_and_expression -> . equality_expression
    (49) logical_and_expression -> . logical_and_expression LAND equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression EQ relational_expression
    (52) equality_expression -> . equality_expression NE relational_expression
    (53) relational_expression -> . additive_expression
    (54) relational_expression -> . relational_expression LT additive_expression
    (55) relational_expression -> . relational_expression GT additive_expression
    (56) relational_expression -> . relational_expression LE additive_expression
    (57) relational_expression -> . relational_expression GE additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression PLUS multiplicative_expression
    (60) additive_expression -> . additive_expression MINUS multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (63) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (64) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 48
    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    expression                     shift and go to state 147
    assignment_expression          shift and go to state 76
    conditional_expression         shift and go to state 47
    logical_or_expression          shift and go to state 28
    logical_and_expression         shift and go to state 29
    equality_expression            shift and go to state 30
    relational_expression          shift and go to state 31
    additive_expression            shift and go to state 32
    multiplicative_expression      shift and go to state 33
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 143

    (36) iteration_statement -> for LPAREN expression SEMI . expression SEMI expression RPAREN statement
    (38) expression -> . assignment_expression
    (39) expression -> . expression COMMA assignment_expression
    (40) assignment_expression -> . conditional_expression
    (41) assignment_expression -> . ID LBRACKET constant_expression RBRACKET EQUALS assignment_expression
    (42) assignment_expression -> . ID EQUALS assignment_expression
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (48) logical_and_expression -> . equality_expression
    (49) logical_and_expression -> . logical_and_expression LAND equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression EQ relational_expression
    (52) equality_expression -> . equality_expression NE relational_expression
    (53) relational_expression -> . additive_expression
    (54) relational_expression -> . relational_expression LT additive_expression
    (55) relational_expression -> . relational_expression GT additive_expression
    (56) relational_expression -> . relational_expression LE additive_expression
    (57) relational_expression -> . relational_expression GE additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression PLUS multiplicative_expression
    (60) additive_expression -> . additive_expression MINUS multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (63) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (64) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 48
    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    expression                     shift and go to state 148
    assignment_expression          shift and go to state 76
    conditional_expression         shift and go to state 47
    logical_or_expression          shift and go to state 28
    logical_and_expression         shift and go to state 29
    equality_expression            shift and go to state 30
    relational_expression          shift and go to state 31
    additive_expression            shift and go to state 32
    multiplicative_expression      shift and go to state 33
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 144

    (41) assignment_expression -> ID LBRACKET constant_expression RBRACKET EQUALS assignment_expression .

    SEMI            reduce using rule 41 (assignment_expression -> ID LBRACKET constant_expression RBRACKET EQUALS assignment_expression .)
    COMMA           reduce using rule 41 (assignment_expression -> ID LBRACKET constant_expression RBRACKET EQUALS assignment_expression .)
    RPAREN          reduce using rule 41 (assignment_expression -> ID LBRACKET constant_expression RBRACKET EQUALS assignment_expression .)
    COLON           reduce using rule 41 (assignment_expression -> ID LBRACKET constant_expression RBRACKET EQUALS assignment_expression .)
    RBRACKET        reduce using rule 41 (assignment_expression -> ID LBRACKET constant_expression RBRACKET EQUALS assignment_expression .)


state 145

    (32) selection_statement -> if LPAREN expression RPAREN statement .
    (33) selection_statement -> if LPAREN expression RPAREN statement . else statement

  ! shift/reduce conflict for else resolved as shift
    RBRACE          reduce using rule 32 (selection_statement -> if LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 32 (selection_statement -> if LPAREN expression RPAREN statement .)
    if              reduce using rule 32 (selection_statement -> if LPAREN expression RPAREN statement .)
    while           reduce using rule 32 (selection_statement -> if LPAREN expression RPAREN statement .)
    do              reduce using rule 32 (selection_statement -> if LPAREN expression RPAREN statement .)
    for             reduce using rule 32 (selection_statement -> if LPAREN expression RPAREN statement .)
    return          reduce using rule 32 (selection_statement -> if LPAREN expression RPAREN statement .)
    ID              reduce using rule 32 (selection_statement -> if LPAREN expression RPAREN statement .)
    int             reduce using rule 32 (selection_statement -> if LPAREN expression RPAREN statement .)
    float           reduce using rule 32 (selection_statement -> if LPAREN expression RPAREN statement .)
    str             reduce using rule 32 (selection_statement -> if LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 32 (selection_statement -> if LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 32 (selection_statement -> if LPAREN expression RPAREN statement .)
    INCREMENT       reduce using rule 32 (selection_statement -> if LPAREN expression RPAREN statement .)
    DECREMENT       reduce using rule 32 (selection_statement -> if LPAREN expression RPAREN statement .)
    INTEGER         reduce using rule 32 (selection_statement -> if LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 32 (selection_statement -> if LPAREN expression RPAREN statement .)
    STR             reduce using rule 32 (selection_statement -> if LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 32 (selection_statement -> if LPAREN expression RPAREN statement .)
    else            shift and go to state 149

  ! else            [ reduce using rule 32 (selection_statement -> if LPAREN expression RPAREN statement .) ]


state 146

    (34) iteration_statement -> while LPAREN expression RPAREN statement .

    RBRACE          reduce using rule 34 (iteration_statement -> while LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 34 (iteration_statement -> while LPAREN expression RPAREN statement .)
    if              reduce using rule 34 (iteration_statement -> while LPAREN expression RPAREN statement .)
    while           reduce using rule 34 (iteration_statement -> while LPAREN expression RPAREN statement .)
    do              reduce using rule 34 (iteration_statement -> while LPAREN expression RPAREN statement .)
    for             reduce using rule 34 (iteration_statement -> while LPAREN expression RPAREN statement .)
    return          reduce using rule 34 (iteration_statement -> while LPAREN expression RPAREN statement .)
    ID              reduce using rule 34 (iteration_statement -> while LPAREN expression RPAREN statement .)
    int             reduce using rule 34 (iteration_statement -> while LPAREN expression RPAREN statement .)
    float           reduce using rule 34 (iteration_statement -> while LPAREN expression RPAREN statement .)
    str             reduce using rule 34 (iteration_statement -> while LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 34 (iteration_statement -> while LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 34 (iteration_statement -> while LPAREN expression RPAREN statement .)
    INCREMENT       reduce using rule 34 (iteration_statement -> while LPAREN expression RPAREN statement .)
    DECREMENT       reduce using rule 34 (iteration_statement -> while LPAREN expression RPAREN statement .)
    INTEGER         reduce using rule 34 (iteration_statement -> while LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 34 (iteration_statement -> while LPAREN expression RPAREN statement .)
    STR             reduce using rule 34 (iteration_statement -> while LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 34 (iteration_statement -> while LPAREN expression RPAREN statement .)
    else            reduce using rule 34 (iteration_statement -> while LPAREN expression RPAREN statement .)


state 147

    (35) iteration_statement -> do statement while LPAREN expression . RPAREN SEMI
    (39) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 150
    COMMA           shift and go to state 115


state 148

    (36) iteration_statement -> for LPAREN expression SEMI expression . SEMI expression RPAREN statement
    (39) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 151
    COMMA           shift and go to state 115


state 149

    (33) selection_statement -> if LPAREN expression RPAREN statement else . statement
    (23) statement -> . expression_statement
    (24) statement -> . declaration
    (25) statement -> . compound_statement
    (26) statement -> . selection_statement
    (27) statement -> . iteration_statement
    (28) statement -> . jump_statement
    (29) expression_statement -> . expression SEMI
    (7) declaration -> . init_declarator_list SEMI
    (30) compound_statement -> . LBRACE statement_list RBRACE
    (31) compound_statement -> . LBRACE RBRACE
    (32) selection_statement -> . if LPAREN expression RPAREN statement
    (33) selection_statement -> . if LPAREN expression RPAREN statement else statement
    (34) iteration_statement -> . while LPAREN expression RPAREN statement
    (35) iteration_statement -> . do statement while LPAREN expression RPAREN SEMI
    (36) iteration_statement -> . for LPAREN expression SEMI expression SEMI expression RPAREN statement
    (37) jump_statement -> . return expression SEMI
    (38) expression -> . assignment_expression
    (39) expression -> . expression COMMA assignment_expression
    (8) init_declarator_list -> . type_specifier init_declarator
    (9) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (40) assignment_expression -> . conditional_expression
    (41) assignment_expression -> . ID LBRACKET constant_expression RBRACKET EQUALS assignment_expression
    (42) assignment_expression -> . ID EQUALS assignment_expression
    (10) type_specifier -> . int
    (11) type_specifier -> . float
    (12) type_specifier -> . str
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (48) logical_and_expression -> . equality_expression
    (49) logical_and_expression -> . logical_and_expression LAND equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression EQ relational_expression
    (52) equality_expression -> . equality_expression NE relational_expression
    (53) relational_expression -> . additive_expression
    (54) relational_expression -> . relational_expression LT additive_expression
    (55) relational_expression -> . relational_expression GT additive_expression
    (56) relational_expression -> . relational_expression LE additive_expression
    (57) relational_expression -> . relational_expression GE additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression PLUS multiplicative_expression
    (60) additive_expression -> . additive_expression MINUS multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (63) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (64) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 53
    if              shift and go to state 91
    while           shift and go to state 92
    do              shift and go to state 93
    for             shift and go to state 94
    return          shift and go to state 95
    ID              shift and go to state 48
    int             shift and go to state 7
    float           shift and go to state 8
    str             shift and go to state 9
    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    expression                     shift and go to state 90
    statement                      shift and go to state 152
    expression_statement           shift and go to state 84
    declaration                    shift and go to state 85
    compound_statement             shift and go to state 86
    selection_statement            shift and go to state 87
    iteration_statement            shift and go to state 88
    jump_statement                 shift and go to state 89
    init_declarator_list           shift and go to state 6
    assignment_expression          shift and go to state 76
    type_specifier                 shift and go to state 96
    conditional_expression         shift and go to state 47
    logical_or_expression          shift and go to state 28
    logical_and_expression         shift and go to state 29
    equality_expression            shift and go to state 30
    relational_expression          shift and go to state 31
    additive_expression            shift and go to state 32
    multiplicative_expression      shift and go to state 33
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 150

    (35) iteration_statement -> do statement while LPAREN expression RPAREN . SEMI

    SEMI            shift and go to state 153


state 151

    (36) iteration_statement -> for LPAREN expression SEMI expression SEMI . expression RPAREN statement
    (38) expression -> . assignment_expression
    (39) expression -> . expression COMMA assignment_expression
    (40) assignment_expression -> . conditional_expression
    (41) assignment_expression -> . ID LBRACKET constant_expression RBRACKET EQUALS assignment_expression
    (42) assignment_expression -> . ID EQUALS assignment_expression
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (48) logical_and_expression -> . equality_expression
    (49) logical_and_expression -> . logical_and_expression LAND equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression EQ relational_expression
    (52) equality_expression -> . equality_expression NE relational_expression
    (53) relational_expression -> . additive_expression
    (54) relational_expression -> . relational_expression LT additive_expression
    (55) relational_expression -> . relational_expression GT additive_expression
    (56) relational_expression -> . relational_expression LE additive_expression
    (57) relational_expression -> . relational_expression GE additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression PLUS multiplicative_expression
    (60) additive_expression -> . additive_expression MINUS multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (63) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (64) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 48
    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    expression                     shift and go to state 154
    assignment_expression          shift and go to state 76
    conditional_expression         shift and go to state 47
    logical_or_expression          shift and go to state 28
    logical_and_expression         shift and go to state 29
    equality_expression            shift and go to state 30
    relational_expression          shift and go to state 31
    additive_expression            shift and go to state 32
    multiplicative_expression      shift and go to state 33
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 152

    (33) selection_statement -> if LPAREN expression RPAREN statement else statement .

    RBRACE          reduce using rule 33 (selection_statement -> if LPAREN expression RPAREN statement else statement .)
    LBRACE          reduce using rule 33 (selection_statement -> if LPAREN expression RPAREN statement else statement .)
    if              reduce using rule 33 (selection_statement -> if LPAREN expression RPAREN statement else statement .)
    while           reduce using rule 33 (selection_statement -> if LPAREN expression RPAREN statement else statement .)
    do              reduce using rule 33 (selection_statement -> if LPAREN expression RPAREN statement else statement .)
    for             reduce using rule 33 (selection_statement -> if LPAREN expression RPAREN statement else statement .)
    return          reduce using rule 33 (selection_statement -> if LPAREN expression RPAREN statement else statement .)
    ID              reduce using rule 33 (selection_statement -> if LPAREN expression RPAREN statement else statement .)
    int             reduce using rule 33 (selection_statement -> if LPAREN expression RPAREN statement else statement .)
    float           reduce using rule 33 (selection_statement -> if LPAREN expression RPAREN statement else statement .)
    str             reduce using rule 33 (selection_statement -> if LPAREN expression RPAREN statement else statement .)
    LNOT            reduce using rule 33 (selection_statement -> if LPAREN expression RPAREN statement else statement .)
    MINUS           reduce using rule 33 (selection_statement -> if LPAREN expression RPAREN statement else statement .)
    INCREMENT       reduce using rule 33 (selection_statement -> if LPAREN expression RPAREN statement else statement .)
    DECREMENT       reduce using rule 33 (selection_statement -> if LPAREN expression RPAREN statement else statement .)
    INTEGER         reduce using rule 33 (selection_statement -> if LPAREN expression RPAREN statement else statement .)
    FLOAT           reduce using rule 33 (selection_statement -> if LPAREN expression RPAREN statement else statement .)
    STR             reduce using rule 33 (selection_statement -> if LPAREN expression RPAREN statement else statement .)
    LPAREN          reduce using rule 33 (selection_statement -> if LPAREN expression RPAREN statement else statement .)
    else            reduce using rule 33 (selection_statement -> if LPAREN expression RPAREN statement else statement .)


state 153

    (35) iteration_statement -> do statement while LPAREN expression RPAREN SEMI .

    RBRACE          reduce using rule 35 (iteration_statement -> do statement while LPAREN expression RPAREN SEMI .)
    LBRACE          reduce using rule 35 (iteration_statement -> do statement while LPAREN expression RPAREN SEMI .)
    if              reduce using rule 35 (iteration_statement -> do statement while LPAREN expression RPAREN SEMI .)
    while           reduce using rule 35 (iteration_statement -> do statement while LPAREN expression RPAREN SEMI .)
    do              reduce using rule 35 (iteration_statement -> do statement while LPAREN expression RPAREN SEMI .)
    for             reduce using rule 35 (iteration_statement -> do statement while LPAREN expression RPAREN SEMI .)
    return          reduce using rule 35 (iteration_statement -> do statement while LPAREN expression RPAREN SEMI .)
    ID              reduce using rule 35 (iteration_statement -> do statement while LPAREN expression RPAREN SEMI .)
    int             reduce using rule 35 (iteration_statement -> do statement while LPAREN expression RPAREN SEMI .)
    float           reduce using rule 35 (iteration_statement -> do statement while LPAREN expression RPAREN SEMI .)
    str             reduce using rule 35 (iteration_statement -> do statement while LPAREN expression RPAREN SEMI .)
    LNOT            reduce using rule 35 (iteration_statement -> do statement while LPAREN expression RPAREN SEMI .)
    MINUS           reduce using rule 35 (iteration_statement -> do statement while LPAREN expression RPAREN SEMI .)
    INCREMENT       reduce using rule 35 (iteration_statement -> do statement while LPAREN expression RPAREN SEMI .)
    DECREMENT       reduce using rule 35 (iteration_statement -> do statement while LPAREN expression RPAREN SEMI .)
    INTEGER         reduce using rule 35 (iteration_statement -> do statement while LPAREN expression RPAREN SEMI .)
    FLOAT           reduce using rule 35 (iteration_statement -> do statement while LPAREN expression RPAREN SEMI .)
    STR             reduce using rule 35 (iteration_statement -> do statement while LPAREN expression RPAREN SEMI .)
    LPAREN          reduce using rule 35 (iteration_statement -> do statement while LPAREN expression RPAREN SEMI .)
    else            reduce using rule 35 (iteration_statement -> do statement while LPAREN expression RPAREN SEMI .)


state 154

    (36) iteration_statement -> for LPAREN expression SEMI expression SEMI expression . RPAREN statement
    (39) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 155
    COMMA           shift and go to state 115


state 155

    (36) iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN . statement
    (23) statement -> . expression_statement
    (24) statement -> . declaration
    (25) statement -> . compound_statement
    (26) statement -> . selection_statement
    (27) statement -> . iteration_statement
    (28) statement -> . jump_statement
    (29) expression_statement -> . expression SEMI
    (7) declaration -> . init_declarator_list SEMI
    (30) compound_statement -> . LBRACE statement_list RBRACE
    (31) compound_statement -> . LBRACE RBRACE
    (32) selection_statement -> . if LPAREN expression RPAREN statement
    (33) selection_statement -> . if LPAREN expression RPAREN statement else statement
    (34) iteration_statement -> . while LPAREN expression RPAREN statement
    (35) iteration_statement -> . do statement while LPAREN expression RPAREN SEMI
    (36) iteration_statement -> . for LPAREN expression SEMI expression SEMI expression RPAREN statement
    (37) jump_statement -> . return expression SEMI
    (38) expression -> . assignment_expression
    (39) expression -> . expression COMMA assignment_expression
    (8) init_declarator_list -> . type_specifier init_declarator
    (9) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (40) assignment_expression -> . conditional_expression
    (41) assignment_expression -> . ID LBRACKET constant_expression RBRACKET EQUALS assignment_expression
    (42) assignment_expression -> . ID EQUALS assignment_expression
    (10) type_specifier -> . int
    (11) type_specifier -> . float
    (12) type_specifier -> . str
    (43) conditional_expression -> . logical_or_expression
    (44) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (46) logical_or_expression -> . logical_and_expression
    (47) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (48) logical_and_expression -> . equality_expression
    (49) logical_and_expression -> . logical_and_expression LAND equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression EQ relational_expression
    (52) equality_expression -> . equality_expression NE relational_expression
    (53) relational_expression -> . additive_expression
    (54) relational_expression -> . relational_expression LT additive_expression
    (55) relational_expression -> . relational_expression GT additive_expression
    (56) relational_expression -> . relational_expression LE additive_expression
    (57) relational_expression -> . relational_expression GE additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression PLUS multiplicative_expression
    (60) additive_expression -> . additive_expression MINUS multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (63) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (64) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (65) unary_expression -> . postfix_expression
    (66) unary_expression -> . LNOT unary_expression
    (67) unary_expression -> . MINUS unary_expression
    (68) unary_expression -> . INCREMENT unary_expression
    (69) unary_expression -> . DECREMENT unary_expression
    (70) postfix_expression -> . primary_expression
    (71) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (72) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (73) primary_expression -> . ID
    (74) primary_expression -> . INTEGER
    (75) primary_expression -> . FLOAT
    (76) primary_expression -> . STR
    (77) primary_expression -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 53
    if              shift and go to state 91
    while           shift and go to state 92
    do              shift and go to state 93
    for             shift and go to state 94
    return          shift and go to state 95
    ID              shift and go to state 48
    int             shift and go to state 7
    float           shift and go to state 8
    str             shift and go to state 9
    LNOT            shift and go to state 37
    MINUS           shift and go to state 34
    INCREMENT       shift and go to state 38
    DECREMENT       shift and go to state 39
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    LPAREN          shift and go to state 41

    expression                     shift and go to state 90
    statement                      shift and go to state 156
    expression_statement           shift and go to state 84
    declaration                    shift and go to state 85
    compound_statement             shift and go to state 86
    selection_statement            shift and go to state 87
    iteration_statement            shift and go to state 88
    jump_statement                 shift and go to state 89
    init_declarator_list           shift and go to state 6
    assignment_expression          shift and go to state 76
    type_specifier                 shift and go to state 96
    conditional_expression         shift and go to state 47
    logical_or_expression          shift and go to state 28
    logical_and_expression         shift and go to state 29
    equality_expression            shift and go to state 30
    relational_expression          shift and go to state 31
    additive_expression            shift and go to state 32
    multiplicative_expression      shift and go to state 33
    unary_expression               shift and go to state 35
    postfix_expression             shift and go to state 36
    primary_expression             shift and go to state 40

state 156

    (36) iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .

    RBRACE          reduce using rule 36 (iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    LBRACE          reduce using rule 36 (iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    if              reduce using rule 36 (iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    while           reduce using rule 36 (iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    do              reduce using rule 36 (iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    for             reduce using rule 36 (iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    return          reduce using rule 36 (iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    ID              reduce using rule 36 (iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    int             reduce using rule 36 (iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    float           reduce using rule 36 (iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    str             reduce using rule 36 (iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    LNOT            reduce using rule 36 (iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    MINUS           reduce using rule 36 (iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    INCREMENT       reduce using rule 36 (iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    DECREMENT       reduce using rule 36 (iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    INTEGER         reduce using rule 36 (iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    FLOAT           reduce using rule 36 (iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    STR             reduce using rule 36 (iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    LPAREN          reduce using rule 36 (iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    else            reduce using rule 36 (iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LBRACKET in state 48 resolved as shift
WARNING: shift/reduce conflict for else in state 145 resolved as shift
