Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> external_declaration
Rule 2     program -> program external_declaration
Rule 3     external_declaration -> function_definition
Rule 4     external_declaration -> declaration
Rule 5     function_definition -> type_specifier ID LPAREN parameter_list RPAREN compound_statement
Rule 6     function_definition -> type_specifier ID LPAREN RPAREN compound_statement
Rule 7     declaration -> init_declarator_list SEMI
Rule 8     init_declarator_list -> type_specifier init_declarator
Rule 9     type_specifier -> int
Rule 10    type_specifier -> float
Rule 11    type_specifier -> str
Rule 12    init_declarator -> declarator
Rule 13    init_declarator -> declarator EQUALS initializer
Rule 14    declarator -> ID
Rule 15    parameter_list -> parameter
Rule 16    parameter_list -> parameter_list COMMA parameter
Rule 17    parameter -> type_specifier declarator
Rule 18    initializer -> assignment_expression
Rule 19    statement_list -> statement
Rule 20    statement_list -> statement_list statement
Rule 21    statement -> expression_statement
Rule 22    statement -> declaration
Rule 23    statement -> compound_statement
Rule 24    statement -> selection_statement
Rule 25    statement -> iteration_statement
Rule 26    statement -> jump_statement
Rule 27    expression_statement -> expression SEMI
Rule 28    compound_statement -> LBRACE statement_list RBRACE
Rule 29    compound_statement -> LBRACE RBRACE
Rule 30    selection_statement -> if LPAREN expression RPAREN statement
Rule 31    selection_statement -> if LPAREN expression RPAREN statement else statement
Rule 32    iteration_statement -> while LPAREN expression RPAREN statement
Rule 33    iteration_statement -> do statement while LPAREN expression RPAREN SEMI
Rule 34    iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement
Rule 35    jump_statement -> return expression SEMI
Rule 36    expression -> assignment_expression
Rule 37    expression -> expression COMMA assignment_expression
Rule 38    assignment_expression -> conditional_expression
Rule 39    assignment_expression -> ID EQUALS assignment_expression
Rule 40    conditional_expression -> logical_or_expression
Rule 41    conditional_expression -> logical_or_expression TERNARY expression COLON conditional_expression
Rule 42    logical_or_expression -> logical_and_expression
Rule 43    logical_or_expression -> logical_or_expression LOR logical_and_expression
Rule 44    logical_and_expression -> equality_expression
Rule 45    logical_and_expression -> logical_and_expression LAND equality_expression
Rule 46    equality_expression -> relational_expression
Rule 47    equality_expression -> equality_expression EQ relational_expression
Rule 48    equality_expression -> equality_expression NE relational_expression
Rule 49    relational_expression -> additive_expression
Rule 50    relational_expression -> relational_expression LT additive_expression
Rule 51    relational_expression -> relational_expression GT additive_expression
Rule 52    relational_expression -> relational_expression LE additive_expression
Rule 53    relational_expression -> relational_expression GE additive_expression
Rule 54    additive_expression -> multiplicative_expression
Rule 55    additive_expression -> additive_expression PLUS multiplicative_expression
Rule 56    additive_expression -> additive_expression MINUS multiplicative_expression
Rule 57    multiplicative_expression -> unary_expression
Rule 58    multiplicative_expression -> multiplicative_expression TIMES unary_expression
Rule 59    multiplicative_expression -> multiplicative_expression DIVIDE unary_expression
Rule 60    multiplicative_expression -> multiplicative_expression MODULO unary_expression
Rule 61    unary_expression -> postfix_expression
Rule 62    unary_expression -> LNOT unary_expression
Rule 63    unary_expression -> MINUS unary_expression
Rule 64    unary_expression -> INCREMENT unary_expression
Rule 65    unary_expression -> DECREMENT unary_expression
Rule 66    postfix_expression -> primary_expression
Rule 67    postfix_expression -> ID LPAREN argument_expression_list RPAREN
Rule 68    primary_expression -> ID
Rule 69    primary_expression -> INTEGER
Rule 70    primary_expression -> FLOAT
Rule 71    primary_expression -> STR
Rule 72    primary_expression -> LPAREN expression RPAREN
Rule 73    argument_expression_list -> assignment_expression
Rule 74    argument_expression_list -> argument_expression_list COMMA assignment_expression

Terminals, with rules where they appear

COLON                : 41
COMMA                : 16 37 74
DECREMENT            : 65
DIVIDE               : 59
EQ                   : 47
EQUALS               : 13 39
FLOAT                : 70
GE                   : 53
GT                   : 51
ID                   : 5 6 14 39 67 68
INCREMENT            : 64
INTEGER              : 69
LAND                 : 45
LBRACE               : 28 29
LE                   : 52
LNOT                 : 62
LOR                  : 43
LPAREN               : 5 6 30 31 32 33 34 67 72
LT                   : 50
MINUS                : 56 63
MODULO               : 60
NE                   : 48
PLUS                 : 55
RBRACE               : 28 29
RPAREN               : 5 6 30 31 32 33 34 67 72
SEMI                 : 7 27 33 34 34 35
STR                  : 71
TERNARY              : 41
TIMES                : 58
do                   : 33
else                 : 31
error                : 
float                : 10
for                  : 34
if                   : 30 31
int                  : 9
return               : 35
str                  : 11
while                : 32 33

Nonterminals, with rules where they appear

additive_expression  : 49 50 51 52 53 55 56
argument_expression_list : 67 74
assignment_expression : 18 36 37 39 73 74
compound_statement   : 5 6 23
conditional_expression : 38 41
declaration          : 4 22
declarator           : 12 13 17
equality_expression  : 44 45 47 48
expression           : 27 30 31 32 33 34 34 34 35 37 41 72
expression_statement : 21
external_declaration : 1 2
function_definition  : 3
init_declarator      : 8
init_declarator_list : 7
initializer          : 13
iteration_statement  : 25
jump_statement       : 26
logical_and_expression : 42 43 45
logical_or_expression : 40 41 43
multiplicative_expression : 54 55 56 58 59 60
parameter            : 15 16
parameter_list       : 5 16
postfix_expression   : 61
primary_expression   : 66
program              : 2 0
relational_expression : 46 47 48 50 51 52 53
selection_statement  : 24
statement            : 19 20 30 31 31 32 33 34
statement_list       : 20 28
type_specifier       : 5 6 8 17
unary_expression     : 57 58 59 60 62 63 64 65

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . external_declaration
    (2) program -> . program external_declaration
    (3) external_declaration -> . function_definition
    (4) external_declaration -> . declaration
    (5) function_definition -> . type_specifier ID LPAREN parameter_list RPAREN compound_statement
    (6) function_definition -> . type_specifier ID LPAREN RPAREN compound_statement
    (7) declaration -> . init_declarator_list SEMI
    (9) type_specifier -> . int
    (10) type_specifier -> . float
    (11) type_specifier -> . str
    (8) init_declarator_list -> . type_specifier init_declarator

    int             shift and go to state 7
    float           shift and go to state 8
    str             shift and go to state 9

    program                        shift and go to state 1
    external_declaration           shift and go to state 2
    function_definition            shift and go to state 3
    declaration                    shift and go to state 4
    type_specifier                 shift and go to state 5
    init_declarator_list           shift and go to state 6

state 1

    (0) S' -> program .
    (2) program -> program . external_declaration
    (3) external_declaration -> . function_definition
    (4) external_declaration -> . declaration
    (5) function_definition -> . type_specifier ID LPAREN parameter_list RPAREN compound_statement
    (6) function_definition -> . type_specifier ID LPAREN RPAREN compound_statement
    (7) declaration -> . init_declarator_list SEMI
    (9) type_specifier -> . int
    (10) type_specifier -> . float
    (11) type_specifier -> . str
    (8) init_declarator_list -> . type_specifier init_declarator

    int             shift and go to state 7
    float           shift and go to state 8
    str             shift and go to state 9

    external_declaration           shift and go to state 10
    function_definition            shift and go to state 3
    declaration                    shift and go to state 4
    type_specifier                 shift and go to state 5
    init_declarator_list           shift and go to state 6

state 2

    (1) program -> external_declaration .

    int             reduce using rule 1 (program -> external_declaration .)
    float           reduce using rule 1 (program -> external_declaration .)
    str             reduce using rule 1 (program -> external_declaration .)
    $end            reduce using rule 1 (program -> external_declaration .)


state 3

    (3) external_declaration -> function_definition .

    int             reduce using rule 3 (external_declaration -> function_definition .)
    float           reduce using rule 3 (external_declaration -> function_definition .)
    str             reduce using rule 3 (external_declaration -> function_definition .)
    $end            reduce using rule 3 (external_declaration -> function_definition .)


state 4

    (4) external_declaration -> declaration .

    int             reduce using rule 4 (external_declaration -> declaration .)
    float           reduce using rule 4 (external_declaration -> declaration .)
    str             reduce using rule 4 (external_declaration -> declaration .)
    $end            reduce using rule 4 (external_declaration -> declaration .)


state 5

    (5) function_definition -> type_specifier . ID LPAREN parameter_list RPAREN compound_statement
    (6) function_definition -> type_specifier . ID LPAREN RPAREN compound_statement
    (8) init_declarator_list -> type_specifier . init_declarator
    (12) init_declarator -> . declarator
    (13) init_declarator -> . declarator EQUALS initializer
    (14) declarator -> . ID

    ID              shift and go to state 11

    init_declarator                shift and go to state 12
    declarator                     shift and go to state 13

state 6

    (7) declaration -> init_declarator_list . SEMI

    SEMI            shift and go to state 14


state 7

    (9) type_specifier -> int .

    ID              reduce using rule 9 (type_specifier -> int .)


state 8

    (10) type_specifier -> float .

    ID              reduce using rule 10 (type_specifier -> float .)


state 9

    (11) type_specifier -> str .

    ID              reduce using rule 11 (type_specifier -> str .)


state 10

    (2) program -> program external_declaration .

    int             reduce using rule 2 (program -> program external_declaration .)
    float           reduce using rule 2 (program -> program external_declaration .)
    str             reduce using rule 2 (program -> program external_declaration .)
    $end            reduce using rule 2 (program -> program external_declaration .)


state 11

    (5) function_definition -> type_specifier ID . LPAREN parameter_list RPAREN compound_statement
    (6) function_definition -> type_specifier ID . LPAREN RPAREN compound_statement
    (14) declarator -> ID .

    LPAREN          shift and go to state 15
    EQUALS          reduce using rule 14 (declarator -> ID .)
    SEMI            reduce using rule 14 (declarator -> ID .)


state 12

    (8) init_declarator_list -> type_specifier init_declarator .

    SEMI            reduce using rule 8 (init_declarator_list -> type_specifier init_declarator .)


state 13

    (12) init_declarator -> declarator .
    (13) init_declarator -> declarator . EQUALS initializer

    SEMI            reduce using rule 12 (init_declarator -> declarator .)
    EQUALS          shift and go to state 16


state 14

    (7) declaration -> init_declarator_list SEMI .

    int             reduce using rule 7 (declaration -> init_declarator_list SEMI .)
    float           reduce using rule 7 (declaration -> init_declarator_list SEMI .)
    str             reduce using rule 7 (declaration -> init_declarator_list SEMI .)
    $end            reduce using rule 7 (declaration -> init_declarator_list SEMI .)
    RBRACE          reduce using rule 7 (declaration -> init_declarator_list SEMI .)
    LBRACE          reduce using rule 7 (declaration -> init_declarator_list SEMI .)
    if              reduce using rule 7 (declaration -> init_declarator_list SEMI .)
    while           reduce using rule 7 (declaration -> init_declarator_list SEMI .)
    do              reduce using rule 7 (declaration -> init_declarator_list SEMI .)
    for             reduce using rule 7 (declaration -> init_declarator_list SEMI .)
    return          reduce using rule 7 (declaration -> init_declarator_list SEMI .)
    ID              reduce using rule 7 (declaration -> init_declarator_list SEMI .)
    LNOT            reduce using rule 7 (declaration -> init_declarator_list SEMI .)
    MINUS           reduce using rule 7 (declaration -> init_declarator_list SEMI .)
    INCREMENT       reduce using rule 7 (declaration -> init_declarator_list SEMI .)
    DECREMENT       reduce using rule 7 (declaration -> init_declarator_list SEMI .)
    INTEGER         reduce using rule 7 (declaration -> init_declarator_list SEMI .)
    FLOAT           reduce using rule 7 (declaration -> init_declarator_list SEMI .)
    STR             reduce using rule 7 (declaration -> init_declarator_list SEMI .)
    LPAREN          reduce using rule 7 (declaration -> init_declarator_list SEMI .)
    else            reduce using rule 7 (declaration -> init_declarator_list SEMI .)


state 15

    (5) function_definition -> type_specifier ID LPAREN . parameter_list RPAREN compound_statement
    (6) function_definition -> type_specifier ID LPAREN . RPAREN compound_statement
    (15) parameter_list -> . parameter
    (16) parameter_list -> . parameter_list COMMA parameter
    (17) parameter -> . type_specifier declarator
    (9) type_specifier -> . int
    (10) type_specifier -> . float
    (11) type_specifier -> . str

    RPAREN          shift and go to state 19
    int             shift and go to state 7
    float           shift and go to state 8
    str             shift and go to state 9

    type_specifier                 shift and go to state 17
    parameter_list                 shift and go to state 18
    parameter                      shift and go to state 20

state 16

    (13) init_declarator -> declarator EQUALS . initializer
    (18) initializer -> . assignment_expression
    (38) assignment_expression -> . conditional_expression
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (40) conditional_expression -> . logical_or_expression
    (41) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (42) logical_or_expression -> . logical_and_expression
    (43) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (44) logical_and_expression -> . equality_expression
    (45) logical_and_expression -> . logical_and_expression LAND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ relational_expression
    (48) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . additive_expression
    (50) relational_expression -> . relational_expression LT additive_expression
    (51) relational_expression -> . relational_expression GT additive_expression
    (52) relational_expression -> . relational_expression LE additive_expression
    (53) relational_expression -> . relational_expression GE additive_expression
    (54) additive_expression -> . multiplicative_expression
    (55) additive_expression -> . additive_expression PLUS multiplicative_expression
    (56) additive_expression -> . additive_expression MINUS multiplicative_expression
    (57) multiplicative_expression -> . unary_expression
    (58) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (59) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (60) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (61) unary_expression -> . postfix_expression
    (62) unary_expression -> . LNOT unary_expression
    (63) unary_expression -> . MINUS unary_expression
    (64) unary_expression -> . INCREMENT unary_expression
    (65) unary_expression -> . DECREMENT unary_expression
    (66) postfix_expression -> . primary_expression
    (67) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (68) primary_expression -> . ID
    (69) primary_expression -> . INTEGER
    (70) primary_expression -> . FLOAT
    (71) primary_expression -> . STR
    (72) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 24
    LNOT            shift and go to state 34
    MINUS           shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STR             shift and go to state 41
    LPAREN          shift and go to state 38

    initializer                    shift and go to state 21
    assignment_expression          shift and go to state 22
    conditional_expression         shift and go to state 23
    logical_or_expression          shift and go to state 25
    logical_and_expression         shift and go to state 26
    equality_expression            shift and go to state 27
    relational_expression          shift and go to state 28
    additive_expression            shift and go to state 29
    multiplicative_expression      shift and go to state 30
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 33
    primary_expression             shift and go to state 37

state 17

    (17) parameter -> type_specifier . declarator
    (14) declarator -> . ID

    ID              shift and go to state 43

    declarator                     shift and go to state 42

state 18

    (5) function_definition -> type_specifier ID LPAREN parameter_list . RPAREN compound_statement
    (16) parameter_list -> parameter_list . COMMA parameter

    RPAREN          shift and go to state 44
    COMMA           shift and go to state 45


state 19

    (6) function_definition -> type_specifier ID LPAREN RPAREN . compound_statement
    (28) compound_statement -> . LBRACE statement_list RBRACE
    (29) compound_statement -> . LBRACE RBRACE

    LBRACE          shift and go to state 47

    compound_statement             shift and go to state 46

state 20

    (15) parameter_list -> parameter .

    RPAREN          reduce using rule 15 (parameter_list -> parameter .)
    COMMA           reduce using rule 15 (parameter_list -> parameter .)


state 21

    (13) init_declarator -> declarator EQUALS initializer .

    SEMI            reduce using rule 13 (init_declarator -> declarator EQUALS initializer .)


state 22

    (18) initializer -> assignment_expression .

    SEMI            reduce using rule 18 (initializer -> assignment_expression .)


state 23

    (38) assignment_expression -> conditional_expression .

    SEMI            reduce using rule 38 (assignment_expression -> conditional_expression .)
    RPAREN          reduce using rule 38 (assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 38 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 38 (assignment_expression -> conditional_expression .)


state 24

    (39) assignment_expression -> ID . EQUALS assignment_expression
    (67) postfix_expression -> ID . LPAREN argument_expression_list RPAREN
    (68) primary_expression -> ID .

    EQUALS          shift and go to state 48
    LPAREN          shift and go to state 49
    TIMES           reduce using rule 68 (primary_expression -> ID .)
    DIVIDE          reduce using rule 68 (primary_expression -> ID .)
    MODULO          reduce using rule 68 (primary_expression -> ID .)
    PLUS            reduce using rule 68 (primary_expression -> ID .)
    MINUS           reduce using rule 68 (primary_expression -> ID .)
    LT              reduce using rule 68 (primary_expression -> ID .)
    GT              reduce using rule 68 (primary_expression -> ID .)
    LE              reduce using rule 68 (primary_expression -> ID .)
    GE              reduce using rule 68 (primary_expression -> ID .)
    EQ              reduce using rule 68 (primary_expression -> ID .)
    NE              reduce using rule 68 (primary_expression -> ID .)
    LAND            reduce using rule 68 (primary_expression -> ID .)
    TERNARY         reduce using rule 68 (primary_expression -> ID .)
    LOR             reduce using rule 68 (primary_expression -> ID .)
    SEMI            reduce using rule 68 (primary_expression -> ID .)
    RPAREN          reduce using rule 68 (primary_expression -> ID .)
    COMMA           reduce using rule 68 (primary_expression -> ID .)
    COLON           reduce using rule 68 (primary_expression -> ID .)


state 25

    (40) conditional_expression -> logical_or_expression .
    (41) conditional_expression -> logical_or_expression . TERNARY expression COLON conditional_expression
    (43) logical_or_expression -> logical_or_expression . LOR logical_and_expression

    SEMI            reduce using rule 40 (conditional_expression -> logical_or_expression .)
    RPAREN          reduce using rule 40 (conditional_expression -> logical_or_expression .)
    COMMA           reduce using rule 40 (conditional_expression -> logical_or_expression .)
    COLON           reduce using rule 40 (conditional_expression -> logical_or_expression .)
    TERNARY         shift and go to state 50
    LOR             shift and go to state 51


state 26

    (42) logical_or_expression -> logical_and_expression .
    (45) logical_and_expression -> logical_and_expression . LAND equality_expression

    TERNARY         reduce using rule 42 (logical_or_expression -> logical_and_expression .)
    LOR             reduce using rule 42 (logical_or_expression -> logical_and_expression .)
    SEMI            reduce using rule 42 (logical_or_expression -> logical_and_expression .)
    RPAREN          reduce using rule 42 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 42 (logical_or_expression -> logical_and_expression .)
    COLON           reduce using rule 42 (logical_or_expression -> logical_and_expression .)
    LAND            shift and go to state 52


state 27

    (44) logical_and_expression -> equality_expression .
    (47) equality_expression -> equality_expression . EQ relational_expression
    (48) equality_expression -> equality_expression . NE relational_expression

    LAND            reduce using rule 44 (logical_and_expression -> equality_expression .)
    TERNARY         reduce using rule 44 (logical_and_expression -> equality_expression .)
    LOR             reduce using rule 44 (logical_and_expression -> equality_expression .)
    SEMI            reduce using rule 44 (logical_and_expression -> equality_expression .)
    RPAREN          reduce using rule 44 (logical_and_expression -> equality_expression .)
    COMMA           reduce using rule 44 (logical_and_expression -> equality_expression .)
    COLON           reduce using rule 44 (logical_and_expression -> equality_expression .)
    EQ              shift and go to state 53
    NE              shift and go to state 54


state 28

    (46) equality_expression -> relational_expression .
    (50) relational_expression -> relational_expression . LT additive_expression
    (51) relational_expression -> relational_expression . GT additive_expression
    (52) relational_expression -> relational_expression . LE additive_expression
    (53) relational_expression -> relational_expression . GE additive_expression

    EQ              reduce using rule 46 (equality_expression -> relational_expression .)
    NE              reduce using rule 46 (equality_expression -> relational_expression .)
    LAND            reduce using rule 46 (equality_expression -> relational_expression .)
    TERNARY         reduce using rule 46 (equality_expression -> relational_expression .)
    LOR             reduce using rule 46 (equality_expression -> relational_expression .)
    SEMI            reduce using rule 46 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 46 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 46 (equality_expression -> relational_expression .)
    COLON           reduce using rule 46 (equality_expression -> relational_expression .)
    LT              shift and go to state 55
    GT              shift and go to state 56
    LE              shift and go to state 57
    GE              shift and go to state 58


state 29

    (49) relational_expression -> additive_expression .
    (55) additive_expression -> additive_expression . PLUS multiplicative_expression
    (56) additive_expression -> additive_expression . MINUS multiplicative_expression

    LT              reduce using rule 49 (relational_expression -> additive_expression .)
    GT              reduce using rule 49 (relational_expression -> additive_expression .)
    LE              reduce using rule 49 (relational_expression -> additive_expression .)
    GE              reduce using rule 49 (relational_expression -> additive_expression .)
    EQ              reduce using rule 49 (relational_expression -> additive_expression .)
    NE              reduce using rule 49 (relational_expression -> additive_expression .)
    LAND            reduce using rule 49 (relational_expression -> additive_expression .)
    TERNARY         reduce using rule 49 (relational_expression -> additive_expression .)
    LOR             reduce using rule 49 (relational_expression -> additive_expression .)
    SEMI            reduce using rule 49 (relational_expression -> additive_expression .)
    RPAREN          reduce using rule 49 (relational_expression -> additive_expression .)
    COMMA           reduce using rule 49 (relational_expression -> additive_expression .)
    COLON           reduce using rule 49 (relational_expression -> additive_expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60


state 30

    (54) additive_expression -> multiplicative_expression .
    (58) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (59) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (60) multiplicative_expression -> multiplicative_expression . MODULO unary_expression

    PLUS            reduce using rule 54 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 54 (additive_expression -> multiplicative_expression .)
    LT              reduce using rule 54 (additive_expression -> multiplicative_expression .)
    GT              reduce using rule 54 (additive_expression -> multiplicative_expression .)
    LE              reduce using rule 54 (additive_expression -> multiplicative_expression .)
    GE              reduce using rule 54 (additive_expression -> multiplicative_expression .)
    EQ              reduce using rule 54 (additive_expression -> multiplicative_expression .)
    NE              reduce using rule 54 (additive_expression -> multiplicative_expression .)
    LAND            reduce using rule 54 (additive_expression -> multiplicative_expression .)
    TERNARY         reduce using rule 54 (additive_expression -> multiplicative_expression .)
    LOR             reduce using rule 54 (additive_expression -> multiplicative_expression .)
    SEMI            reduce using rule 54 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 54 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 54 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 54 (additive_expression -> multiplicative_expression .)
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    MODULO          shift and go to state 63


state 31

    (63) unary_expression -> MINUS . unary_expression
    (61) unary_expression -> . postfix_expression
    (62) unary_expression -> . LNOT unary_expression
    (63) unary_expression -> . MINUS unary_expression
    (64) unary_expression -> . INCREMENT unary_expression
    (65) unary_expression -> . DECREMENT unary_expression
    (66) postfix_expression -> . primary_expression
    (67) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (68) primary_expression -> . ID
    (69) primary_expression -> . INTEGER
    (70) primary_expression -> . FLOAT
    (71) primary_expression -> . STR
    (72) primary_expression -> . LPAREN expression RPAREN

    LNOT            shift and go to state 34
    MINUS           shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    ID              shift and go to state 65
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STR             shift and go to state 41
    LPAREN          shift and go to state 38

    unary_expression               shift and go to state 64
    postfix_expression             shift and go to state 33
    primary_expression             shift and go to state 37

state 32

    (57) multiplicative_expression -> unary_expression .

    TIMES           reduce using rule 57 (multiplicative_expression -> unary_expression .)
    DIVIDE          reduce using rule 57 (multiplicative_expression -> unary_expression .)
    MODULO          reduce using rule 57 (multiplicative_expression -> unary_expression .)
    PLUS            reduce using rule 57 (multiplicative_expression -> unary_expression .)
    MINUS           reduce using rule 57 (multiplicative_expression -> unary_expression .)
    LT              reduce using rule 57 (multiplicative_expression -> unary_expression .)
    GT              reduce using rule 57 (multiplicative_expression -> unary_expression .)
    LE              reduce using rule 57 (multiplicative_expression -> unary_expression .)
    GE              reduce using rule 57 (multiplicative_expression -> unary_expression .)
    EQ              reduce using rule 57 (multiplicative_expression -> unary_expression .)
    NE              reduce using rule 57 (multiplicative_expression -> unary_expression .)
    LAND            reduce using rule 57 (multiplicative_expression -> unary_expression .)
    TERNARY         reduce using rule 57 (multiplicative_expression -> unary_expression .)
    LOR             reduce using rule 57 (multiplicative_expression -> unary_expression .)
    SEMI            reduce using rule 57 (multiplicative_expression -> unary_expression .)
    RPAREN          reduce using rule 57 (multiplicative_expression -> unary_expression .)
    COMMA           reduce using rule 57 (multiplicative_expression -> unary_expression .)
    COLON           reduce using rule 57 (multiplicative_expression -> unary_expression .)


state 33

    (61) unary_expression -> postfix_expression .

    TIMES           reduce using rule 61 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 61 (unary_expression -> postfix_expression .)
    MODULO          reduce using rule 61 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 61 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 61 (unary_expression -> postfix_expression .)
    LT              reduce using rule 61 (unary_expression -> postfix_expression .)
    GT              reduce using rule 61 (unary_expression -> postfix_expression .)
    LE              reduce using rule 61 (unary_expression -> postfix_expression .)
    GE              reduce using rule 61 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 61 (unary_expression -> postfix_expression .)
    NE              reduce using rule 61 (unary_expression -> postfix_expression .)
    LAND            reduce using rule 61 (unary_expression -> postfix_expression .)
    TERNARY         reduce using rule 61 (unary_expression -> postfix_expression .)
    LOR             reduce using rule 61 (unary_expression -> postfix_expression .)
    SEMI            reduce using rule 61 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 61 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 61 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 61 (unary_expression -> postfix_expression .)


state 34

    (62) unary_expression -> LNOT . unary_expression
    (61) unary_expression -> . postfix_expression
    (62) unary_expression -> . LNOT unary_expression
    (63) unary_expression -> . MINUS unary_expression
    (64) unary_expression -> . INCREMENT unary_expression
    (65) unary_expression -> . DECREMENT unary_expression
    (66) postfix_expression -> . primary_expression
    (67) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (68) primary_expression -> . ID
    (69) primary_expression -> . INTEGER
    (70) primary_expression -> . FLOAT
    (71) primary_expression -> . STR
    (72) primary_expression -> . LPAREN expression RPAREN

    LNOT            shift and go to state 34
    MINUS           shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    ID              shift and go to state 65
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STR             shift and go to state 41
    LPAREN          shift and go to state 38

    unary_expression               shift and go to state 66
    postfix_expression             shift and go to state 33
    primary_expression             shift and go to state 37

state 35

    (64) unary_expression -> INCREMENT . unary_expression
    (61) unary_expression -> . postfix_expression
    (62) unary_expression -> . LNOT unary_expression
    (63) unary_expression -> . MINUS unary_expression
    (64) unary_expression -> . INCREMENT unary_expression
    (65) unary_expression -> . DECREMENT unary_expression
    (66) postfix_expression -> . primary_expression
    (67) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (68) primary_expression -> . ID
    (69) primary_expression -> . INTEGER
    (70) primary_expression -> . FLOAT
    (71) primary_expression -> . STR
    (72) primary_expression -> . LPAREN expression RPAREN

    LNOT            shift and go to state 34
    MINUS           shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    ID              shift and go to state 65
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STR             shift and go to state 41
    LPAREN          shift and go to state 38

    unary_expression               shift and go to state 67
    postfix_expression             shift and go to state 33
    primary_expression             shift and go to state 37

state 36

    (65) unary_expression -> DECREMENT . unary_expression
    (61) unary_expression -> . postfix_expression
    (62) unary_expression -> . LNOT unary_expression
    (63) unary_expression -> . MINUS unary_expression
    (64) unary_expression -> . INCREMENT unary_expression
    (65) unary_expression -> . DECREMENT unary_expression
    (66) postfix_expression -> . primary_expression
    (67) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (68) primary_expression -> . ID
    (69) primary_expression -> . INTEGER
    (70) primary_expression -> . FLOAT
    (71) primary_expression -> . STR
    (72) primary_expression -> . LPAREN expression RPAREN

    LNOT            shift and go to state 34
    MINUS           shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    ID              shift and go to state 65
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STR             shift and go to state 41
    LPAREN          shift and go to state 38

    unary_expression               shift and go to state 68
    postfix_expression             shift and go to state 33
    primary_expression             shift and go to state 37

state 37

    (66) postfix_expression -> primary_expression .

    TIMES           reduce using rule 66 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 66 (postfix_expression -> primary_expression .)
    MODULO          reduce using rule 66 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 66 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 66 (postfix_expression -> primary_expression .)
    LT              reduce using rule 66 (postfix_expression -> primary_expression .)
    GT              reduce using rule 66 (postfix_expression -> primary_expression .)
    LE              reduce using rule 66 (postfix_expression -> primary_expression .)
    GE              reduce using rule 66 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 66 (postfix_expression -> primary_expression .)
    NE              reduce using rule 66 (postfix_expression -> primary_expression .)
    LAND            reduce using rule 66 (postfix_expression -> primary_expression .)
    TERNARY         reduce using rule 66 (postfix_expression -> primary_expression .)
    LOR             reduce using rule 66 (postfix_expression -> primary_expression .)
    SEMI            reduce using rule 66 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 66 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 66 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 66 (postfix_expression -> primary_expression .)


state 38

    (72) primary_expression -> LPAREN . expression RPAREN
    (36) expression -> . assignment_expression
    (37) expression -> . expression COMMA assignment_expression
    (38) assignment_expression -> . conditional_expression
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (40) conditional_expression -> . logical_or_expression
    (41) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (42) logical_or_expression -> . logical_and_expression
    (43) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (44) logical_and_expression -> . equality_expression
    (45) logical_and_expression -> . logical_and_expression LAND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ relational_expression
    (48) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . additive_expression
    (50) relational_expression -> . relational_expression LT additive_expression
    (51) relational_expression -> . relational_expression GT additive_expression
    (52) relational_expression -> . relational_expression LE additive_expression
    (53) relational_expression -> . relational_expression GE additive_expression
    (54) additive_expression -> . multiplicative_expression
    (55) additive_expression -> . additive_expression PLUS multiplicative_expression
    (56) additive_expression -> . additive_expression MINUS multiplicative_expression
    (57) multiplicative_expression -> . unary_expression
    (58) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (59) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (60) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (61) unary_expression -> . postfix_expression
    (62) unary_expression -> . LNOT unary_expression
    (63) unary_expression -> . MINUS unary_expression
    (64) unary_expression -> . INCREMENT unary_expression
    (65) unary_expression -> . DECREMENT unary_expression
    (66) postfix_expression -> . primary_expression
    (67) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (68) primary_expression -> . ID
    (69) primary_expression -> . INTEGER
    (70) primary_expression -> . FLOAT
    (71) primary_expression -> . STR
    (72) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 24
    LNOT            shift and go to state 34
    MINUS           shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STR             shift and go to state 41
    LPAREN          shift and go to state 38

    expression                     shift and go to state 69
    assignment_expression          shift and go to state 70
    conditional_expression         shift and go to state 23
    logical_or_expression          shift and go to state 25
    logical_and_expression         shift and go to state 26
    equality_expression            shift and go to state 27
    relational_expression          shift and go to state 28
    additive_expression            shift and go to state 29
    multiplicative_expression      shift and go to state 30
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 33
    primary_expression             shift and go to state 37

state 39

    (69) primary_expression -> INTEGER .

    TIMES           reduce using rule 69 (primary_expression -> INTEGER .)
    DIVIDE          reduce using rule 69 (primary_expression -> INTEGER .)
    MODULO          reduce using rule 69 (primary_expression -> INTEGER .)
    PLUS            reduce using rule 69 (primary_expression -> INTEGER .)
    MINUS           reduce using rule 69 (primary_expression -> INTEGER .)
    LT              reduce using rule 69 (primary_expression -> INTEGER .)
    GT              reduce using rule 69 (primary_expression -> INTEGER .)
    LE              reduce using rule 69 (primary_expression -> INTEGER .)
    GE              reduce using rule 69 (primary_expression -> INTEGER .)
    EQ              reduce using rule 69 (primary_expression -> INTEGER .)
    NE              reduce using rule 69 (primary_expression -> INTEGER .)
    LAND            reduce using rule 69 (primary_expression -> INTEGER .)
    TERNARY         reduce using rule 69 (primary_expression -> INTEGER .)
    LOR             reduce using rule 69 (primary_expression -> INTEGER .)
    SEMI            reduce using rule 69 (primary_expression -> INTEGER .)
    RPAREN          reduce using rule 69 (primary_expression -> INTEGER .)
    COMMA           reduce using rule 69 (primary_expression -> INTEGER .)
    COLON           reduce using rule 69 (primary_expression -> INTEGER .)


state 40

    (70) primary_expression -> FLOAT .

    TIMES           reduce using rule 70 (primary_expression -> FLOAT .)
    DIVIDE          reduce using rule 70 (primary_expression -> FLOAT .)
    MODULO          reduce using rule 70 (primary_expression -> FLOAT .)
    PLUS            reduce using rule 70 (primary_expression -> FLOAT .)
    MINUS           reduce using rule 70 (primary_expression -> FLOAT .)
    LT              reduce using rule 70 (primary_expression -> FLOAT .)
    GT              reduce using rule 70 (primary_expression -> FLOAT .)
    LE              reduce using rule 70 (primary_expression -> FLOAT .)
    GE              reduce using rule 70 (primary_expression -> FLOAT .)
    EQ              reduce using rule 70 (primary_expression -> FLOAT .)
    NE              reduce using rule 70 (primary_expression -> FLOAT .)
    LAND            reduce using rule 70 (primary_expression -> FLOAT .)
    TERNARY         reduce using rule 70 (primary_expression -> FLOAT .)
    LOR             reduce using rule 70 (primary_expression -> FLOAT .)
    SEMI            reduce using rule 70 (primary_expression -> FLOAT .)
    RPAREN          reduce using rule 70 (primary_expression -> FLOAT .)
    COMMA           reduce using rule 70 (primary_expression -> FLOAT .)
    COLON           reduce using rule 70 (primary_expression -> FLOAT .)


state 41

    (71) primary_expression -> STR .

    TIMES           reduce using rule 71 (primary_expression -> STR .)
    DIVIDE          reduce using rule 71 (primary_expression -> STR .)
    MODULO          reduce using rule 71 (primary_expression -> STR .)
    PLUS            reduce using rule 71 (primary_expression -> STR .)
    MINUS           reduce using rule 71 (primary_expression -> STR .)
    LT              reduce using rule 71 (primary_expression -> STR .)
    GT              reduce using rule 71 (primary_expression -> STR .)
    LE              reduce using rule 71 (primary_expression -> STR .)
    GE              reduce using rule 71 (primary_expression -> STR .)
    EQ              reduce using rule 71 (primary_expression -> STR .)
    NE              reduce using rule 71 (primary_expression -> STR .)
    LAND            reduce using rule 71 (primary_expression -> STR .)
    TERNARY         reduce using rule 71 (primary_expression -> STR .)
    LOR             reduce using rule 71 (primary_expression -> STR .)
    SEMI            reduce using rule 71 (primary_expression -> STR .)
    RPAREN          reduce using rule 71 (primary_expression -> STR .)
    COMMA           reduce using rule 71 (primary_expression -> STR .)
    COLON           reduce using rule 71 (primary_expression -> STR .)


state 42

    (17) parameter -> type_specifier declarator .

    RPAREN          reduce using rule 17 (parameter -> type_specifier declarator .)
    COMMA           reduce using rule 17 (parameter -> type_specifier declarator .)


state 43

    (14) declarator -> ID .

    RPAREN          reduce using rule 14 (declarator -> ID .)
    COMMA           reduce using rule 14 (declarator -> ID .)
    EQUALS          reduce using rule 14 (declarator -> ID .)
    SEMI            reduce using rule 14 (declarator -> ID .)


state 44

    (5) function_definition -> type_specifier ID LPAREN parameter_list RPAREN . compound_statement
    (28) compound_statement -> . LBRACE statement_list RBRACE
    (29) compound_statement -> . LBRACE RBRACE

    LBRACE          shift and go to state 47

    compound_statement             shift and go to state 71

state 45

    (16) parameter_list -> parameter_list COMMA . parameter
    (17) parameter -> . type_specifier declarator
    (9) type_specifier -> . int
    (10) type_specifier -> . float
    (11) type_specifier -> . str

    int             shift and go to state 7
    float           shift and go to state 8
    str             shift and go to state 9

    parameter                      shift and go to state 72
    type_specifier                 shift and go to state 17

state 46

    (6) function_definition -> type_specifier ID LPAREN RPAREN compound_statement .

    int             reduce using rule 6 (function_definition -> type_specifier ID LPAREN RPAREN compound_statement .)
    float           reduce using rule 6 (function_definition -> type_specifier ID LPAREN RPAREN compound_statement .)
    str             reduce using rule 6 (function_definition -> type_specifier ID LPAREN RPAREN compound_statement .)
    $end            reduce using rule 6 (function_definition -> type_specifier ID LPAREN RPAREN compound_statement .)


state 47

    (28) compound_statement -> LBRACE . statement_list RBRACE
    (29) compound_statement -> LBRACE . RBRACE
    (19) statement_list -> . statement
    (20) statement_list -> . statement_list statement
    (21) statement -> . expression_statement
    (22) statement -> . declaration
    (23) statement -> . compound_statement
    (24) statement -> . selection_statement
    (25) statement -> . iteration_statement
    (26) statement -> . jump_statement
    (27) expression_statement -> . expression SEMI
    (7) declaration -> . init_declarator_list SEMI
    (28) compound_statement -> . LBRACE statement_list RBRACE
    (29) compound_statement -> . LBRACE RBRACE
    (30) selection_statement -> . if LPAREN expression RPAREN statement
    (31) selection_statement -> . if LPAREN expression RPAREN statement else statement
    (32) iteration_statement -> . while LPAREN expression RPAREN statement
    (33) iteration_statement -> . do statement while LPAREN expression RPAREN SEMI
    (34) iteration_statement -> . for LPAREN expression SEMI expression SEMI expression RPAREN statement
    (35) jump_statement -> . return expression SEMI
    (36) expression -> . assignment_expression
    (37) expression -> . expression COMMA assignment_expression
    (8) init_declarator_list -> . type_specifier init_declarator
    (38) assignment_expression -> . conditional_expression
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (9) type_specifier -> . int
    (10) type_specifier -> . float
    (11) type_specifier -> . str
    (40) conditional_expression -> . logical_or_expression
    (41) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (42) logical_or_expression -> . logical_and_expression
    (43) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (44) logical_and_expression -> . equality_expression
    (45) logical_and_expression -> . logical_and_expression LAND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ relational_expression
    (48) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . additive_expression
    (50) relational_expression -> . relational_expression LT additive_expression
    (51) relational_expression -> . relational_expression GT additive_expression
    (52) relational_expression -> . relational_expression LE additive_expression
    (53) relational_expression -> . relational_expression GE additive_expression
    (54) additive_expression -> . multiplicative_expression
    (55) additive_expression -> . additive_expression PLUS multiplicative_expression
    (56) additive_expression -> . additive_expression MINUS multiplicative_expression
    (57) multiplicative_expression -> . unary_expression
    (58) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (59) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (60) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (61) unary_expression -> . postfix_expression
    (62) unary_expression -> . LNOT unary_expression
    (63) unary_expression -> . MINUS unary_expression
    (64) unary_expression -> . INCREMENT unary_expression
    (65) unary_expression -> . DECREMENT unary_expression
    (66) postfix_expression -> . primary_expression
    (67) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (68) primary_expression -> . ID
    (69) primary_expression -> . INTEGER
    (70) primary_expression -> . FLOAT
    (71) primary_expression -> . STR
    (72) primary_expression -> . LPAREN expression RPAREN

    RBRACE          shift and go to state 74
    LBRACE          shift and go to state 47
    if              shift and go to state 83
    while           shift and go to state 84
    do              shift and go to state 85
    for             shift and go to state 86
    return          shift and go to state 87
    ID              shift and go to state 24
    int             shift and go to state 7
    float           shift and go to state 8
    str             shift and go to state 9
    LNOT            shift and go to state 34
    MINUS           shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STR             shift and go to state 41
    LPAREN          shift and go to state 38

    statement_list                 shift and go to state 73
    statement                      shift and go to state 75
    expression_statement           shift and go to state 76
    declaration                    shift and go to state 77
    compound_statement             shift and go to state 78
    selection_statement            shift and go to state 79
    iteration_statement            shift and go to state 80
    jump_statement                 shift and go to state 81
    expression                     shift and go to state 82
    init_declarator_list           shift and go to state 6
    assignment_expression          shift and go to state 70
    type_specifier                 shift and go to state 88
    conditional_expression         shift and go to state 23
    logical_or_expression          shift and go to state 25
    logical_and_expression         shift and go to state 26
    equality_expression            shift and go to state 27
    relational_expression          shift and go to state 28
    additive_expression            shift and go to state 29
    multiplicative_expression      shift and go to state 30
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 33
    primary_expression             shift and go to state 37

state 48

    (39) assignment_expression -> ID EQUALS . assignment_expression
    (38) assignment_expression -> . conditional_expression
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (40) conditional_expression -> . logical_or_expression
    (41) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (42) logical_or_expression -> . logical_and_expression
    (43) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (44) logical_and_expression -> . equality_expression
    (45) logical_and_expression -> . logical_and_expression LAND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ relational_expression
    (48) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . additive_expression
    (50) relational_expression -> . relational_expression LT additive_expression
    (51) relational_expression -> . relational_expression GT additive_expression
    (52) relational_expression -> . relational_expression LE additive_expression
    (53) relational_expression -> . relational_expression GE additive_expression
    (54) additive_expression -> . multiplicative_expression
    (55) additive_expression -> . additive_expression PLUS multiplicative_expression
    (56) additive_expression -> . additive_expression MINUS multiplicative_expression
    (57) multiplicative_expression -> . unary_expression
    (58) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (59) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (60) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (61) unary_expression -> . postfix_expression
    (62) unary_expression -> . LNOT unary_expression
    (63) unary_expression -> . MINUS unary_expression
    (64) unary_expression -> . INCREMENT unary_expression
    (65) unary_expression -> . DECREMENT unary_expression
    (66) postfix_expression -> . primary_expression
    (67) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (68) primary_expression -> . ID
    (69) primary_expression -> . INTEGER
    (70) primary_expression -> . FLOAT
    (71) primary_expression -> . STR
    (72) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 24
    LNOT            shift and go to state 34
    MINUS           shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STR             shift and go to state 41
    LPAREN          shift and go to state 38

    assignment_expression          shift and go to state 89
    conditional_expression         shift and go to state 23
    logical_or_expression          shift and go to state 25
    logical_and_expression         shift and go to state 26
    equality_expression            shift and go to state 27
    relational_expression          shift and go to state 28
    additive_expression            shift and go to state 29
    multiplicative_expression      shift and go to state 30
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 33
    primary_expression             shift and go to state 37

state 49

    (67) postfix_expression -> ID LPAREN . argument_expression_list RPAREN
    (73) argument_expression_list -> . assignment_expression
    (74) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (38) assignment_expression -> . conditional_expression
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (40) conditional_expression -> . logical_or_expression
    (41) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (42) logical_or_expression -> . logical_and_expression
    (43) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (44) logical_and_expression -> . equality_expression
    (45) logical_and_expression -> . logical_and_expression LAND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ relational_expression
    (48) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . additive_expression
    (50) relational_expression -> . relational_expression LT additive_expression
    (51) relational_expression -> . relational_expression GT additive_expression
    (52) relational_expression -> . relational_expression LE additive_expression
    (53) relational_expression -> . relational_expression GE additive_expression
    (54) additive_expression -> . multiplicative_expression
    (55) additive_expression -> . additive_expression PLUS multiplicative_expression
    (56) additive_expression -> . additive_expression MINUS multiplicative_expression
    (57) multiplicative_expression -> . unary_expression
    (58) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (59) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (60) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (61) unary_expression -> . postfix_expression
    (62) unary_expression -> . LNOT unary_expression
    (63) unary_expression -> . MINUS unary_expression
    (64) unary_expression -> . INCREMENT unary_expression
    (65) unary_expression -> . DECREMENT unary_expression
    (66) postfix_expression -> . primary_expression
    (67) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (68) primary_expression -> . ID
    (69) primary_expression -> . INTEGER
    (70) primary_expression -> . FLOAT
    (71) primary_expression -> . STR
    (72) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 24
    LNOT            shift and go to state 34
    MINUS           shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STR             shift and go to state 41
    LPAREN          shift and go to state 38

    argument_expression_list       shift and go to state 90
    assignment_expression          shift and go to state 91
    conditional_expression         shift and go to state 23
    logical_or_expression          shift and go to state 25
    logical_and_expression         shift and go to state 26
    equality_expression            shift and go to state 27
    relational_expression          shift and go to state 28
    additive_expression            shift and go to state 29
    multiplicative_expression      shift and go to state 30
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 33
    primary_expression             shift and go to state 37

state 50

    (41) conditional_expression -> logical_or_expression TERNARY . expression COLON conditional_expression
    (36) expression -> . assignment_expression
    (37) expression -> . expression COMMA assignment_expression
    (38) assignment_expression -> . conditional_expression
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (40) conditional_expression -> . logical_or_expression
    (41) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (42) logical_or_expression -> . logical_and_expression
    (43) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (44) logical_and_expression -> . equality_expression
    (45) logical_and_expression -> . logical_and_expression LAND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ relational_expression
    (48) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . additive_expression
    (50) relational_expression -> . relational_expression LT additive_expression
    (51) relational_expression -> . relational_expression GT additive_expression
    (52) relational_expression -> . relational_expression LE additive_expression
    (53) relational_expression -> . relational_expression GE additive_expression
    (54) additive_expression -> . multiplicative_expression
    (55) additive_expression -> . additive_expression PLUS multiplicative_expression
    (56) additive_expression -> . additive_expression MINUS multiplicative_expression
    (57) multiplicative_expression -> . unary_expression
    (58) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (59) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (60) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (61) unary_expression -> . postfix_expression
    (62) unary_expression -> . LNOT unary_expression
    (63) unary_expression -> . MINUS unary_expression
    (64) unary_expression -> . INCREMENT unary_expression
    (65) unary_expression -> . DECREMENT unary_expression
    (66) postfix_expression -> . primary_expression
    (67) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (68) primary_expression -> . ID
    (69) primary_expression -> . INTEGER
    (70) primary_expression -> . FLOAT
    (71) primary_expression -> . STR
    (72) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 24
    LNOT            shift and go to state 34
    MINUS           shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STR             shift and go to state 41
    LPAREN          shift and go to state 38

    logical_or_expression          shift and go to state 25
    expression                     shift and go to state 92
    conditional_expression         shift and go to state 23
    assignment_expression          shift and go to state 70
    logical_and_expression         shift and go to state 26
    equality_expression            shift and go to state 27
    relational_expression          shift and go to state 28
    additive_expression            shift and go to state 29
    multiplicative_expression      shift and go to state 30
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 33
    primary_expression             shift and go to state 37

state 51

    (43) logical_or_expression -> logical_or_expression LOR . logical_and_expression
    (44) logical_and_expression -> . equality_expression
    (45) logical_and_expression -> . logical_and_expression LAND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ relational_expression
    (48) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . additive_expression
    (50) relational_expression -> . relational_expression LT additive_expression
    (51) relational_expression -> . relational_expression GT additive_expression
    (52) relational_expression -> . relational_expression LE additive_expression
    (53) relational_expression -> . relational_expression GE additive_expression
    (54) additive_expression -> . multiplicative_expression
    (55) additive_expression -> . additive_expression PLUS multiplicative_expression
    (56) additive_expression -> . additive_expression MINUS multiplicative_expression
    (57) multiplicative_expression -> . unary_expression
    (58) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (59) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (60) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (61) unary_expression -> . postfix_expression
    (62) unary_expression -> . LNOT unary_expression
    (63) unary_expression -> . MINUS unary_expression
    (64) unary_expression -> . INCREMENT unary_expression
    (65) unary_expression -> . DECREMENT unary_expression
    (66) postfix_expression -> . primary_expression
    (67) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (68) primary_expression -> . ID
    (69) primary_expression -> . INTEGER
    (70) primary_expression -> . FLOAT
    (71) primary_expression -> . STR
    (72) primary_expression -> . LPAREN expression RPAREN

    LNOT            shift and go to state 34
    MINUS           shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    ID              shift and go to state 65
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STR             shift and go to state 41
    LPAREN          shift and go to state 38

    logical_and_expression         shift and go to state 93
    equality_expression            shift and go to state 27
    relational_expression          shift and go to state 28
    additive_expression            shift and go to state 29
    multiplicative_expression      shift and go to state 30
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 33
    primary_expression             shift and go to state 37

state 52

    (45) logical_and_expression -> logical_and_expression LAND . equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ relational_expression
    (48) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . additive_expression
    (50) relational_expression -> . relational_expression LT additive_expression
    (51) relational_expression -> . relational_expression GT additive_expression
    (52) relational_expression -> . relational_expression LE additive_expression
    (53) relational_expression -> . relational_expression GE additive_expression
    (54) additive_expression -> . multiplicative_expression
    (55) additive_expression -> . additive_expression PLUS multiplicative_expression
    (56) additive_expression -> . additive_expression MINUS multiplicative_expression
    (57) multiplicative_expression -> . unary_expression
    (58) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (59) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (60) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (61) unary_expression -> . postfix_expression
    (62) unary_expression -> . LNOT unary_expression
    (63) unary_expression -> . MINUS unary_expression
    (64) unary_expression -> . INCREMENT unary_expression
    (65) unary_expression -> . DECREMENT unary_expression
    (66) postfix_expression -> . primary_expression
    (67) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (68) primary_expression -> . ID
    (69) primary_expression -> . INTEGER
    (70) primary_expression -> . FLOAT
    (71) primary_expression -> . STR
    (72) primary_expression -> . LPAREN expression RPAREN

    LNOT            shift and go to state 34
    MINUS           shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    ID              shift and go to state 65
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STR             shift and go to state 41
    LPAREN          shift and go to state 38

    equality_expression            shift and go to state 94
    relational_expression          shift and go to state 28
    additive_expression            shift and go to state 29
    multiplicative_expression      shift and go to state 30
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 33
    primary_expression             shift and go to state 37

state 53

    (47) equality_expression -> equality_expression EQ . relational_expression
    (49) relational_expression -> . additive_expression
    (50) relational_expression -> . relational_expression LT additive_expression
    (51) relational_expression -> . relational_expression GT additive_expression
    (52) relational_expression -> . relational_expression LE additive_expression
    (53) relational_expression -> . relational_expression GE additive_expression
    (54) additive_expression -> . multiplicative_expression
    (55) additive_expression -> . additive_expression PLUS multiplicative_expression
    (56) additive_expression -> . additive_expression MINUS multiplicative_expression
    (57) multiplicative_expression -> . unary_expression
    (58) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (59) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (60) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (61) unary_expression -> . postfix_expression
    (62) unary_expression -> . LNOT unary_expression
    (63) unary_expression -> . MINUS unary_expression
    (64) unary_expression -> . INCREMENT unary_expression
    (65) unary_expression -> . DECREMENT unary_expression
    (66) postfix_expression -> . primary_expression
    (67) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (68) primary_expression -> . ID
    (69) primary_expression -> . INTEGER
    (70) primary_expression -> . FLOAT
    (71) primary_expression -> . STR
    (72) primary_expression -> . LPAREN expression RPAREN

    LNOT            shift and go to state 34
    MINUS           shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    ID              shift and go to state 65
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STR             shift and go to state 41
    LPAREN          shift and go to state 38

    relational_expression          shift and go to state 95
    additive_expression            shift and go to state 29
    multiplicative_expression      shift and go to state 30
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 33
    primary_expression             shift and go to state 37

state 54

    (48) equality_expression -> equality_expression NE . relational_expression
    (49) relational_expression -> . additive_expression
    (50) relational_expression -> . relational_expression LT additive_expression
    (51) relational_expression -> . relational_expression GT additive_expression
    (52) relational_expression -> . relational_expression LE additive_expression
    (53) relational_expression -> . relational_expression GE additive_expression
    (54) additive_expression -> . multiplicative_expression
    (55) additive_expression -> . additive_expression PLUS multiplicative_expression
    (56) additive_expression -> . additive_expression MINUS multiplicative_expression
    (57) multiplicative_expression -> . unary_expression
    (58) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (59) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (60) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (61) unary_expression -> . postfix_expression
    (62) unary_expression -> . LNOT unary_expression
    (63) unary_expression -> . MINUS unary_expression
    (64) unary_expression -> . INCREMENT unary_expression
    (65) unary_expression -> . DECREMENT unary_expression
    (66) postfix_expression -> . primary_expression
    (67) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (68) primary_expression -> . ID
    (69) primary_expression -> . INTEGER
    (70) primary_expression -> . FLOAT
    (71) primary_expression -> . STR
    (72) primary_expression -> . LPAREN expression RPAREN

    LNOT            shift and go to state 34
    MINUS           shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    ID              shift and go to state 65
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STR             shift and go to state 41
    LPAREN          shift and go to state 38

    relational_expression          shift and go to state 96
    additive_expression            shift and go to state 29
    multiplicative_expression      shift and go to state 30
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 33
    primary_expression             shift and go to state 37

state 55

    (50) relational_expression -> relational_expression LT . additive_expression
    (54) additive_expression -> . multiplicative_expression
    (55) additive_expression -> . additive_expression PLUS multiplicative_expression
    (56) additive_expression -> . additive_expression MINUS multiplicative_expression
    (57) multiplicative_expression -> . unary_expression
    (58) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (59) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (60) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (61) unary_expression -> . postfix_expression
    (62) unary_expression -> . LNOT unary_expression
    (63) unary_expression -> . MINUS unary_expression
    (64) unary_expression -> . INCREMENT unary_expression
    (65) unary_expression -> . DECREMENT unary_expression
    (66) postfix_expression -> . primary_expression
    (67) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (68) primary_expression -> . ID
    (69) primary_expression -> . INTEGER
    (70) primary_expression -> . FLOAT
    (71) primary_expression -> . STR
    (72) primary_expression -> . LPAREN expression RPAREN

    LNOT            shift and go to state 34
    MINUS           shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    ID              shift and go to state 65
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STR             shift and go to state 41
    LPAREN          shift and go to state 38

    additive_expression            shift and go to state 97
    multiplicative_expression      shift and go to state 30
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 33
    primary_expression             shift and go to state 37

state 56

    (51) relational_expression -> relational_expression GT . additive_expression
    (54) additive_expression -> . multiplicative_expression
    (55) additive_expression -> . additive_expression PLUS multiplicative_expression
    (56) additive_expression -> . additive_expression MINUS multiplicative_expression
    (57) multiplicative_expression -> . unary_expression
    (58) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (59) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (60) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (61) unary_expression -> . postfix_expression
    (62) unary_expression -> . LNOT unary_expression
    (63) unary_expression -> . MINUS unary_expression
    (64) unary_expression -> . INCREMENT unary_expression
    (65) unary_expression -> . DECREMENT unary_expression
    (66) postfix_expression -> . primary_expression
    (67) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (68) primary_expression -> . ID
    (69) primary_expression -> . INTEGER
    (70) primary_expression -> . FLOAT
    (71) primary_expression -> . STR
    (72) primary_expression -> . LPAREN expression RPAREN

    LNOT            shift and go to state 34
    MINUS           shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    ID              shift and go to state 65
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STR             shift and go to state 41
    LPAREN          shift and go to state 38

    additive_expression            shift and go to state 98
    multiplicative_expression      shift and go to state 30
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 33
    primary_expression             shift and go to state 37

state 57

    (52) relational_expression -> relational_expression LE . additive_expression
    (54) additive_expression -> . multiplicative_expression
    (55) additive_expression -> . additive_expression PLUS multiplicative_expression
    (56) additive_expression -> . additive_expression MINUS multiplicative_expression
    (57) multiplicative_expression -> . unary_expression
    (58) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (59) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (60) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (61) unary_expression -> . postfix_expression
    (62) unary_expression -> . LNOT unary_expression
    (63) unary_expression -> . MINUS unary_expression
    (64) unary_expression -> . INCREMENT unary_expression
    (65) unary_expression -> . DECREMENT unary_expression
    (66) postfix_expression -> . primary_expression
    (67) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (68) primary_expression -> . ID
    (69) primary_expression -> . INTEGER
    (70) primary_expression -> . FLOAT
    (71) primary_expression -> . STR
    (72) primary_expression -> . LPAREN expression RPAREN

    LNOT            shift and go to state 34
    MINUS           shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    ID              shift and go to state 65
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STR             shift and go to state 41
    LPAREN          shift and go to state 38

    additive_expression            shift and go to state 99
    multiplicative_expression      shift and go to state 30
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 33
    primary_expression             shift and go to state 37

state 58

    (53) relational_expression -> relational_expression GE . additive_expression
    (54) additive_expression -> . multiplicative_expression
    (55) additive_expression -> . additive_expression PLUS multiplicative_expression
    (56) additive_expression -> . additive_expression MINUS multiplicative_expression
    (57) multiplicative_expression -> . unary_expression
    (58) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (59) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (60) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (61) unary_expression -> . postfix_expression
    (62) unary_expression -> . LNOT unary_expression
    (63) unary_expression -> . MINUS unary_expression
    (64) unary_expression -> . INCREMENT unary_expression
    (65) unary_expression -> . DECREMENT unary_expression
    (66) postfix_expression -> . primary_expression
    (67) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (68) primary_expression -> . ID
    (69) primary_expression -> . INTEGER
    (70) primary_expression -> . FLOAT
    (71) primary_expression -> . STR
    (72) primary_expression -> . LPAREN expression RPAREN

    LNOT            shift and go to state 34
    MINUS           shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    ID              shift and go to state 65
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STR             shift and go to state 41
    LPAREN          shift and go to state 38

    additive_expression            shift and go to state 100
    multiplicative_expression      shift and go to state 30
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 33
    primary_expression             shift and go to state 37

state 59

    (55) additive_expression -> additive_expression PLUS . multiplicative_expression
    (57) multiplicative_expression -> . unary_expression
    (58) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (59) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (60) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (61) unary_expression -> . postfix_expression
    (62) unary_expression -> . LNOT unary_expression
    (63) unary_expression -> . MINUS unary_expression
    (64) unary_expression -> . INCREMENT unary_expression
    (65) unary_expression -> . DECREMENT unary_expression
    (66) postfix_expression -> . primary_expression
    (67) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (68) primary_expression -> . ID
    (69) primary_expression -> . INTEGER
    (70) primary_expression -> . FLOAT
    (71) primary_expression -> . STR
    (72) primary_expression -> . LPAREN expression RPAREN

    LNOT            shift and go to state 34
    MINUS           shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    ID              shift and go to state 65
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STR             shift and go to state 41
    LPAREN          shift and go to state 38

    multiplicative_expression      shift and go to state 101
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 33
    primary_expression             shift and go to state 37

state 60

    (56) additive_expression -> additive_expression MINUS . multiplicative_expression
    (57) multiplicative_expression -> . unary_expression
    (58) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (59) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (60) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (61) unary_expression -> . postfix_expression
    (62) unary_expression -> . LNOT unary_expression
    (63) unary_expression -> . MINUS unary_expression
    (64) unary_expression -> . INCREMENT unary_expression
    (65) unary_expression -> . DECREMENT unary_expression
    (66) postfix_expression -> . primary_expression
    (67) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (68) primary_expression -> . ID
    (69) primary_expression -> . INTEGER
    (70) primary_expression -> . FLOAT
    (71) primary_expression -> . STR
    (72) primary_expression -> . LPAREN expression RPAREN

    LNOT            shift and go to state 34
    MINUS           shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    ID              shift and go to state 65
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STR             shift and go to state 41
    LPAREN          shift and go to state 38

    multiplicative_expression      shift and go to state 102
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 33
    primary_expression             shift and go to state 37

state 61

    (58) multiplicative_expression -> multiplicative_expression TIMES . unary_expression
    (61) unary_expression -> . postfix_expression
    (62) unary_expression -> . LNOT unary_expression
    (63) unary_expression -> . MINUS unary_expression
    (64) unary_expression -> . INCREMENT unary_expression
    (65) unary_expression -> . DECREMENT unary_expression
    (66) postfix_expression -> . primary_expression
    (67) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (68) primary_expression -> . ID
    (69) primary_expression -> . INTEGER
    (70) primary_expression -> . FLOAT
    (71) primary_expression -> . STR
    (72) primary_expression -> . LPAREN expression RPAREN

    LNOT            shift and go to state 34
    MINUS           shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    ID              shift and go to state 65
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STR             shift and go to state 41
    LPAREN          shift and go to state 38

    unary_expression               shift and go to state 103
    postfix_expression             shift and go to state 33
    primary_expression             shift and go to state 37

state 62

    (59) multiplicative_expression -> multiplicative_expression DIVIDE . unary_expression
    (61) unary_expression -> . postfix_expression
    (62) unary_expression -> . LNOT unary_expression
    (63) unary_expression -> . MINUS unary_expression
    (64) unary_expression -> . INCREMENT unary_expression
    (65) unary_expression -> . DECREMENT unary_expression
    (66) postfix_expression -> . primary_expression
    (67) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (68) primary_expression -> . ID
    (69) primary_expression -> . INTEGER
    (70) primary_expression -> . FLOAT
    (71) primary_expression -> . STR
    (72) primary_expression -> . LPAREN expression RPAREN

    LNOT            shift and go to state 34
    MINUS           shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    ID              shift and go to state 65
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STR             shift and go to state 41
    LPAREN          shift and go to state 38

    unary_expression               shift and go to state 104
    postfix_expression             shift and go to state 33
    primary_expression             shift and go to state 37

state 63

    (60) multiplicative_expression -> multiplicative_expression MODULO . unary_expression
    (61) unary_expression -> . postfix_expression
    (62) unary_expression -> . LNOT unary_expression
    (63) unary_expression -> . MINUS unary_expression
    (64) unary_expression -> . INCREMENT unary_expression
    (65) unary_expression -> . DECREMENT unary_expression
    (66) postfix_expression -> . primary_expression
    (67) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (68) primary_expression -> . ID
    (69) primary_expression -> . INTEGER
    (70) primary_expression -> . FLOAT
    (71) primary_expression -> . STR
    (72) primary_expression -> . LPAREN expression RPAREN

    LNOT            shift and go to state 34
    MINUS           shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    ID              shift and go to state 65
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STR             shift and go to state 41
    LPAREN          shift and go to state 38

    unary_expression               shift and go to state 105
    postfix_expression             shift and go to state 33
    primary_expression             shift and go to state 37

state 64

    (63) unary_expression -> MINUS unary_expression .

    TIMES           reduce using rule 63 (unary_expression -> MINUS unary_expression .)
    DIVIDE          reduce using rule 63 (unary_expression -> MINUS unary_expression .)
    MODULO          reduce using rule 63 (unary_expression -> MINUS unary_expression .)
    PLUS            reduce using rule 63 (unary_expression -> MINUS unary_expression .)
    MINUS           reduce using rule 63 (unary_expression -> MINUS unary_expression .)
    LT              reduce using rule 63 (unary_expression -> MINUS unary_expression .)
    GT              reduce using rule 63 (unary_expression -> MINUS unary_expression .)
    LE              reduce using rule 63 (unary_expression -> MINUS unary_expression .)
    GE              reduce using rule 63 (unary_expression -> MINUS unary_expression .)
    EQ              reduce using rule 63 (unary_expression -> MINUS unary_expression .)
    NE              reduce using rule 63 (unary_expression -> MINUS unary_expression .)
    LAND            reduce using rule 63 (unary_expression -> MINUS unary_expression .)
    TERNARY         reduce using rule 63 (unary_expression -> MINUS unary_expression .)
    LOR             reduce using rule 63 (unary_expression -> MINUS unary_expression .)
    SEMI            reduce using rule 63 (unary_expression -> MINUS unary_expression .)
    RPAREN          reduce using rule 63 (unary_expression -> MINUS unary_expression .)
    COMMA           reduce using rule 63 (unary_expression -> MINUS unary_expression .)
    COLON           reduce using rule 63 (unary_expression -> MINUS unary_expression .)


state 65

    (67) postfix_expression -> ID . LPAREN argument_expression_list RPAREN
    (68) primary_expression -> ID .

    LPAREN          shift and go to state 49
    TIMES           reduce using rule 68 (primary_expression -> ID .)
    DIVIDE          reduce using rule 68 (primary_expression -> ID .)
    MODULO          reduce using rule 68 (primary_expression -> ID .)
    PLUS            reduce using rule 68 (primary_expression -> ID .)
    MINUS           reduce using rule 68 (primary_expression -> ID .)
    LT              reduce using rule 68 (primary_expression -> ID .)
    GT              reduce using rule 68 (primary_expression -> ID .)
    LE              reduce using rule 68 (primary_expression -> ID .)
    GE              reduce using rule 68 (primary_expression -> ID .)
    EQ              reduce using rule 68 (primary_expression -> ID .)
    NE              reduce using rule 68 (primary_expression -> ID .)
    LAND            reduce using rule 68 (primary_expression -> ID .)
    TERNARY         reduce using rule 68 (primary_expression -> ID .)
    LOR             reduce using rule 68 (primary_expression -> ID .)
    SEMI            reduce using rule 68 (primary_expression -> ID .)
    RPAREN          reduce using rule 68 (primary_expression -> ID .)
    COMMA           reduce using rule 68 (primary_expression -> ID .)
    COLON           reduce using rule 68 (primary_expression -> ID .)


state 66

    (62) unary_expression -> LNOT unary_expression .

    TIMES           reduce using rule 62 (unary_expression -> LNOT unary_expression .)
    DIVIDE          reduce using rule 62 (unary_expression -> LNOT unary_expression .)
    MODULO          reduce using rule 62 (unary_expression -> LNOT unary_expression .)
    PLUS            reduce using rule 62 (unary_expression -> LNOT unary_expression .)
    MINUS           reduce using rule 62 (unary_expression -> LNOT unary_expression .)
    LT              reduce using rule 62 (unary_expression -> LNOT unary_expression .)
    GT              reduce using rule 62 (unary_expression -> LNOT unary_expression .)
    LE              reduce using rule 62 (unary_expression -> LNOT unary_expression .)
    GE              reduce using rule 62 (unary_expression -> LNOT unary_expression .)
    EQ              reduce using rule 62 (unary_expression -> LNOT unary_expression .)
    NE              reduce using rule 62 (unary_expression -> LNOT unary_expression .)
    LAND            reduce using rule 62 (unary_expression -> LNOT unary_expression .)
    TERNARY         reduce using rule 62 (unary_expression -> LNOT unary_expression .)
    LOR             reduce using rule 62 (unary_expression -> LNOT unary_expression .)
    SEMI            reduce using rule 62 (unary_expression -> LNOT unary_expression .)
    RPAREN          reduce using rule 62 (unary_expression -> LNOT unary_expression .)
    COMMA           reduce using rule 62 (unary_expression -> LNOT unary_expression .)
    COLON           reduce using rule 62 (unary_expression -> LNOT unary_expression .)


state 67

    (64) unary_expression -> INCREMENT unary_expression .

    TIMES           reduce using rule 64 (unary_expression -> INCREMENT unary_expression .)
    DIVIDE          reduce using rule 64 (unary_expression -> INCREMENT unary_expression .)
    MODULO          reduce using rule 64 (unary_expression -> INCREMENT unary_expression .)
    PLUS            reduce using rule 64 (unary_expression -> INCREMENT unary_expression .)
    MINUS           reduce using rule 64 (unary_expression -> INCREMENT unary_expression .)
    LT              reduce using rule 64 (unary_expression -> INCREMENT unary_expression .)
    GT              reduce using rule 64 (unary_expression -> INCREMENT unary_expression .)
    LE              reduce using rule 64 (unary_expression -> INCREMENT unary_expression .)
    GE              reduce using rule 64 (unary_expression -> INCREMENT unary_expression .)
    EQ              reduce using rule 64 (unary_expression -> INCREMENT unary_expression .)
    NE              reduce using rule 64 (unary_expression -> INCREMENT unary_expression .)
    LAND            reduce using rule 64 (unary_expression -> INCREMENT unary_expression .)
    TERNARY         reduce using rule 64 (unary_expression -> INCREMENT unary_expression .)
    LOR             reduce using rule 64 (unary_expression -> INCREMENT unary_expression .)
    SEMI            reduce using rule 64 (unary_expression -> INCREMENT unary_expression .)
    RPAREN          reduce using rule 64 (unary_expression -> INCREMENT unary_expression .)
    COMMA           reduce using rule 64 (unary_expression -> INCREMENT unary_expression .)
    COLON           reduce using rule 64 (unary_expression -> INCREMENT unary_expression .)


state 68

    (65) unary_expression -> DECREMENT unary_expression .

    TIMES           reduce using rule 65 (unary_expression -> DECREMENT unary_expression .)
    DIVIDE          reduce using rule 65 (unary_expression -> DECREMENT unary_expression .)
    MODULO          reduce using rule 65 (unary_expression -> DECREMENT unary_expression .)
    PLUS            reduce using rule 65 (unary_expression -> DECREMENT unary_expression .)
    MINUS           reduce using rule 65 (unary_expression -> DECREMENT unary_expression .)
    LT              reduce using rule 65 (unary_expression -> DECREMENT unary_expression .)
    GT              reduce using rule 65 (unary_expression -> DECREMENT unary_expression .)
    LE              reduce using rule 65 (unary_expression -> DECREMENT unary_expression .)
    GE              reduce using rule 65 (unary_expression -> DECREMENT unary_expression .)
    EQ              reduce using rule 65 (unary_expression -> DECREMENT unary_expression .)
    NE              reduce using rule 65 (unary_expression -> DECREMENT unary_expression .)
    LAND            reduce using rule 65 (unary_expression -> DECREMENT unary_expression .)
    TERNARY         reduce using rule 65 (unary_expression -> DECREMENT unary_expression .)
    LOR             reduce using rule 65 (unary_expression -> DECREMENT unary_expression .)
    SEMI            reduce using rule 65 (unary_expression -> DECREMENT unary_expression .)
    RPAREN          reduce using rule 65 (unary_expression -> DECREMENT unary_expression .)
    COMMA           reduce using rule 65 (unary_expression -> DECREMENT unary_expression .)
    COLON           reduce using rule 65 (unary_expression -> DECREMENT unary_expression .)


state 69

    (72) primary_expression -> LPAREN expression . RPAREN
    (37) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 106
    COMMA           shift and go to state 107


state 70

    (36) expression -> assignment_expression .

    RPAREN          reduce using rule 36 (expression -> assignment_expression .)
    COMMA           reduce using rule 36 (expression -> assignment_expression .)
    SEMI            reduce using rule 36 (expression -> assignment_expression .)
    COLON           reduce using rule 36 (expression -> assignment_expression .)


state 71

    (5) function_definition -> type_specifier ID LPAREN parameter_list RPAREN compound_statement .

    int             reduce using rule 5 (function_definition -> type_specifier ID LPAREN parameter_list RPAREN compound_statement .)
    float           reduce using rule 5 (function_definition -> type_specifier ID LPAREN parameter_list RPAREN compound_statement .)
    str             reduce using rule 5 (function_definition -> type_specifier ID LPAREN parameter_list RPAREN compound_statement .)
    $end            reduce using rule 5 (function_definition -> type_specifier ID LPAREN parameter_list RPAREN compound_statement .)


state 72

    (16) parameter_list -> parameter_list COMMA parameter .

    RPAREN          reduce using rule 16 (parameter_list -> parameter_list COMMA parameter .)
    COMMA           reduce using rule 16 (parameter_list -> parameter_list COMMA parameter .)


state 73

    (28) compound_statement -> LBRACE statement_list . RBRACE
    (20) statement_list -> statement_list . statement
    (21) statement -> . expression_statement
    (22) statement -> . declaration
    (23) statement -> . compound_statement
    (24) statement -> . selection_statement
    (25) statement -> . iteration_statement
    (26) statement -> . jump_statement
    (27) expression_statement -> . expression SEMI
    (7) declaration -> . init_declarator_list SEMI
    (28) compound_statement -> . LBRACE statement_list RBRACE
    (29) compound_statement -> . LBRACE RBRACE
    (30) selection_statement -> . if LPAREN expression RPAREN statement
    (31) selection_statement -> . if LPAREN expression RPAREN statement else statement
    (32) iteration_statement -> . while LPAREN expression RPAREN statement
    (33) iteration_statement -> . do statement while LPAREN expression RPAREN SEMI
    (34) iteration_statement -> . for LPAREN expression SEMI expression SEMI expression RPAREN statement
    (35) jump_statement -> . return expression SEMI
    (36) expression -> . assignment_expression
    (37) expression -> . expression COMMA assignment_expression
    (8) init_declarator_list -> . type_specifier init_declarator
    (38) assignment_expression -> . conditional_expression
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (9) type_specifier -> . int
    (10) type_specifier -> . float
    (11) type_specifier -> . str
    (40) conditional_expression -> . logical_or_expression
    (41) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (42) logical_or_expression -> . logical_and_expression
    (43) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (44) logical_and_expression -> . equality_expression
    (45) logical_and_expression -> . logical_and_expression LAND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ relational_expression
    (48) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . additive_expression
    (50) relational_expression -> . relational_expression LT additive_expression
    (51) relational_expression -> . relational_expression GT additive_expression
    (52) relational_expression -> . relational_expression LE additive_expression
    (53) relational_expression -> . relational_expression GE additive_expression
    (54) additive_expression -> . multiplicative_expression
    (55) additive_expression -> . additive_expression PLUS multiplicative_expression
    (56) additive_expression -> . additive_expression MINUS multiplicative_expression
    (57) multiplicative_expression -> . unary_expression
    (58) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (59) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (60) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (61) unary_expression -> . postfix_expression
    (62) unary_expression -> . LNOT unary_expression
    (63) unary_expression -> . MINUS unary_expression
    (64) unary_expression -> . INCREMENT unary_expression
    (65) unary_expression -> . DECREMENT unary_expression
    (66) postfix_expression -> . primary_expression
    (67) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (68) primary_expression -> . ID
    (69) primary_expression -> . INTEGER
    (70) primary_expression -> . FLOAT
    (71) primary_expression -> . STR
    (72) primary_expression -> . LPAREN expression RPAREN

    RBRACE          shift and go to state 108
    LBRACE          shift and go to state 47
    if              shift and go to state 83
    while           shift and go to state 84
    do              shift and go to state 85
    for             shift and go to state 86
    return          shift and go to state 87
    ID              shift and go to state 24
    int             shift and go to state 7
    float           shift and go to state 8
    str             shift and go to state 9
    LNOT            shift and go to state 34
    MINUS           shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STR             shift and go to state 41
    LPAREN          shift and go to state 38

    statement                      shift and go to state 109
    expression_statement           shift and go to state 76
    declaration                    shift and go to state 77
    compound_statement             shift and go to state 78
    selection_statement            shift and go to state 79
    iteration_statement            shift and go to state 80
    jump_statement                 shift and go to state 81
    expression                     shift and go to state 82
    init_declarator_list           shift and go to state 6
    assignment_expression          shift and go to state 70
    type_specifier                 shift and go to state 88
    conditional_expression         shift and go to state 23
    logical_or_expression          shift and go to state 25
    logical_and_expression         shift and go to state 26
    equality_expression            shift and go to state 27
    relational_expression          shift and go to state 28
    additive_expression            shift and go to state 29
    multiplicative_expression      shift and go to state 30
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 33
    primary_expression             shift and go to state 37

state 74

    (29) compound_statement -> LBRACE RBRACE .

    int             reduce using rule 29 (compound_statement -> LBRACE RBRACE .)
    float           reduce using rule 29 (compound_statement -> LBRACE RBRACE .)
    str             reduce using rule 29 (compound_statement -> LBRACE RBRACE .)
    $end            reduce using rule 29 (compound_statement -> LBRACE RBRACE .)
    RBRACE          reduce using rule 29 (compound_statement -> LBRACE RBRACE .)
    LBRACE          reduce using rule 29 (compound_statement -> LBRACE RBRACE .)
    if              reduce using rule 29 (compound_statement -> LBRACE RBRACE .)
    while           reduce using rule 29 (compound_statement -> LBRACE RBRACE .)
    do              reduce using rule 29 (compound_statement -> LBRACE RBRACE .)
    for             reduce using rule 29 (compound_statement -> LBRACE RBRACE .)
    return          reduce using rule 29 (compound_statement -> LBRACE RBRACE .)
    ID              reduce using rule 29 (compound_statement -> LBRACE RBRACE .)
    LNOT            reduce using rule 29 (compound_statement -> LBRACE RBRACE .)
    MINUS           reduce using rule 29 (compound_statement -> LBRACE RBRACE .)
    INCREMENT       reduce using rule 29 (compound_statement -> LBRACE RBRACE .)
    DECREMENT       reduce using rule 29 (compound_statement -> LBRACE RBRACE .)
    INTEGER         reduce using rule 29 (compound_statement -> LBRACE RBRACE .)
    FLOAT           reduce using rule 29 (compound_statement -> LBRACE RBRACE .)
    STR             reduce using rule 29 (compound_statement -> LBRACE RBRACE .)
    LPAREN          reduce using rule 29 (compound_statement -> LBRACE RBRACE .)
    else            reduce using rule 29 (compound_statement -> LBRACE RBRACE .)


state 75

    (19) statement_list -> statement .

    RBRACE          reduce using rule 19 (statement_list -> statement .)
    LBRACE          reduce using rule 19 (statement_list -> statement .)
    if              reduce using rule 19 (statement_list -> statement .)
    while           reduce using rule 19 (statement_list -> statement .)
    do              reduce using rule 19 (statement_list -> statement .)
    for             reduce using rule 19 (statement_list -> statement .)
    return          reduce using rule 19 (statement_list -> statement .)
    ID              reduce using rule 19 (statement_list -> statement .)
    int             reduce using rule 19 (statement_list -> statement .)
    float           reduce using rule 19 (statement_list -> statement .)
    str             reduce using rule 19 (statement_list -> statement .)
    LNOT            reduce using rule 19 (statement_list -> statement .)
    MINUS           reduce using rule 19 (statement_list -> statement .)
    INCREMENT       reduce using rule 19 (statement_list -> statement .)
    DECREMENT       reduce using rule 19 (statement_list -> statement .)
    INTEGER         reduce using rule 19 (statement_list -> statement .)
    FLOAT           reduce using rule 19 (statement_list -> statement .)
    STR             reduce using rule 19 (statement_list -> statement .)
    LPAREN          reduce using rule 19 (statement_list -> statement .)


state 76

    (21) statement -> expression_statement .

    RBRACE          reduce using rule 21 (statement -> expression_statement .)
    LBRACE          reduce using rule 21 (statement -> expression_statement .)
    if              reduce using rule 21 (statement -> expression_statement .)
    while           reduce using rule 21 (statement -> expression_statement .)
    do              reduce using rule 21 (statement -> expression_statement .)
    for             reduce using rule 21 (statement -> expression_statement .)
    return          reduce using rule 21 (statement -> expression_statement .)
    ID              reduce using rule 21 (statement -> expression_statement .)
    int             reduce using rule 21 (statement -> expression_statement .)
    float           reduce using rule 21 (statement -> expression_statement .)
    str             reduce using rule 21 (statement -> expression_statement .)
    LNOT            reduce using rule 21 (statement -> expression_statement .)
    MINUS           reduce using rule 21 (statement -> expression_statement .)
    INCREMENT       reduce using rule 21 (statement -> expression_statement .)
    DECREMENT       reduce using rule 21 (statement -> expression_statement .)
    INTEGER         reduce using rule 21 (statement -> expression_statement .)
    FLOAT           reduce using rule 21 (statement -> expression_statement .)
    STR             reduce using rule 21 (statement -> expression_statement .)
    LPAREN          reduce using rule 21 (statement -> expression_statement .)
    else            reduce using rule 21 (statement -> expression_statement .)


state 77

    (22) statement -> declaration .

    RBRACE          reduce using rule 22 (statement -> declaration .)
    LBRACE          reduce using rule 22 (statement -> declaration .)
    if              reduce using rule 22 (statement -> declaration .)
    while           reduce using rule 22 (statement -> declaration .)
    do              reduce using rule 22 (statement -> declaration .)
    for             reduce using rule 22 (statement -> declaration .)
    return          reduce using rule 22 (statement -> declaration .)
    ID              reduce using rule 22 (statement -> declaration .)
    int             reduce using rule 22 (statement -> declaration .)
    float           reduce using rule 22 (statement -> declaration .)
    str             reduce using rule 22 (statement -> declaration .)
    LNOT            reduce using rule 22 (statement -> declaration .)
    MINUS           reduce using rule 22 (statement -> declaration .)
    INCREMENT       reduce using rule 22 (statement -> declaration .)
    DECREMENT       reduce using rule 22 (statement -> declaration .)
    INTEGER         reduce using rule 22 (statement -> declaration .)
    FLOAT           reduce using rule 22 (statement -> declaration .)
    STR             reduce using rule 22 (statement -> declaration .)
    LPAREN          reduce using rule 22 (statement -> declaration .)
    else            reduce using rule 22 (statement -> declaration .)


state 78

    (23) statement -> compound_statement .

    RBRACE          reduce using rule 23 (statement -> compound_statement .)
    LBRACE          reduce using rule 23 (statement -> compound_statement .)
    if              reduce using rule 23 (statement -> compound_statement .)
    while           reduce using rule 23 (statement -> compound_statement .)
    do              reduce using rule 23 (statement -> compound_statement .)
    for             reduce using rule 23 (statement -> compound_statement .)
    return          reduce using rule 23 (statement -> compound_statement .)
    ID              reduce using rule 23 (statement -> compound_statement .)
    int             reduce using rule 23 (statement -> compound_statement .)
    float           reduce using rule 23 (statement -> compound_statement .)
    str             reduce using rule 23 (statement -> compound_statement .)
    LNOT            reduce using rule 23 (statement -> compound_statement .)
    MINUS           reduce using rule 23 (statement -> compound_statement .)
    INCREMENT       reduce using rule 23 (statement -> compound_statement .)
    DECREMENT       reduce using rule 23 (statement -> compound_statement .)
    INTEGER         reduce using rule 23 (statement -> compound_statement .)
    FLOAT           reduce using rule 23 (statement -> compound_statement .)
    STR             reduce using rule 23 (statement -> compound_statement .)
    LPAREN          reduce using rule 23 (statement -> compound_statement .)
    else            reduce using rule 23 (statement -> compound_statement .)


state 79

    (24) statement -> selection_statement .

    RBRACE          reduce using rule 24 (statement -> selection_statement .)
    LBRACE          reduce using rule 24 (statement -> selection_statement .)
    if              reduce using rule 24 (statement -> selection_statement .)
    while           reduce using rule 24 (statement -> selection_statement .)
    do              reduce using rule 24 (statement -> selection_statement .)
    for             reduce using rule 24 (statement -> selection_statement .)
    return          reduce using rule 24 (statement -> selection_statement .)
    ID              reduce using rule 24 (statement -> selection_statement .)
    int             reduce using rule 24 (statement -> selection_statement .)
    float           reduce using rule 24 (statement -> selection_statement .)
    str             reduce using rule 24 (statement -> selection_statement .)
    LNOT            reduce using rule 24 (statement -> selection_statement .)
    MINUS           reduce using rule 24 (statement -> selection_statement .)
    INCREMENT       reduce using rule 24 (statement -> selection_statement .)
    DECREMENT       reduce using rule 24 (statement -> selection_statement .)
    INTEGER         reduce using rule 24 (statement -> selection_statement .)
    FLOAT           reduce using rule 24 (statement -> selection_statement .)
    STR             reduce using rule 24 (statement -> selection_statement .)
    LPAREN          reduce using rule 24 (statement -> selection_statement .)
    else            reduce using rule 24 (statement -> selection_statement .)


state 80

    (25) statement -> iteration_statement .

    RBRACE          reduce using rule 25 (statement -> iteration_statement .)
    LBRACE          reduce using rule 25 (statement -> iteration_statement .)
    if              reduce using rule 25 (statement -> iteration_statement .)
    while           reduce using rule 25 (statement -> iteration_statement .)
    do              reduce using rule 25 (statement -> iteration_statement .)
    for             reduce using rule 25 (statement -> iteration_statement .)
    return          reduce using rule 25 (statement -> iteration_statement .)
    ID              reduce using rule 25 (statement -> iteration_statement .)
    int             reduce using rule 25 (statement -> iteration_statement .)
    float           reduce using rule 25 (statement -> iteration_statement .)
    str             reduce using rule 25 (statement -> iteration_statement .)
    LNOT            reduce using rule 25 (statement -> iteration_statement .)
    MINUS           reduce using rule 25 (statement -> iteration_statement .)
    INCREMENT       reduce using rule 25 (statement -> iteration_statement .)
    DECREMENT       reduce using rule 25 (statement -> iteration_statement .)
    INTEGER         reduce using rule 25 (statement -> iteration_statement .)
    FLOAT           reduce using rule 25 (statement -> iteration_statement .)
    STR             reduce using rule 25 (statement -> iteration_statement .)
    LPAREN          reduce using rule 25 (statement -> iteration_statement .)
    else            reduce using rule 25 (statement -> iteration_statement .)


state 81

    (26) statement -> jump_statement .

    RBRACE          reduce using rule 26 (statement -> jump_statement .)
    LBRACE          reduce using rule 26 (statement -> jump_statement .)
    if              reduce using rule 26 (statement -> jump_statement .)
    while           reduce using rule 26 (statement -> jump_statement .)
    do              reduce using rule 26 (statement -> jump_statement .)
    for             reduce using rule 26 (statement -> jump_statement .)
    return          reduce using rule 26 (statement -> jump_statement .)
    ID              reduce using rule 26 (statement -> jump_statement .)
    int             reduce using rule 26 (statement -> jump_statement .)
    float           reduce using rule 26 (statement -> jump_statement .)
    str             reduce using rule 26 (statement -> jump_statement .)
    LNOT            reduce using rule 26 (statement -> jump_statement .)
    MINUS           reduce using rule 26 (statement -> jump_statement .)
    INCREMENT       reduce using rule 26 (statement -> jump_statement .)
    DECREMENT       reduce using rule 26 (statement -> jump_statement .)
    INTEGER         reduce using rule 26 (statement -> jump_statement .)
    FLOAT           reduce using rule 26 (statement -> jump_statement .)
    STR             reduce using rule 26 (statement -> jump_statement .)
    LPAREN          reduce using rule 26 (statement -> jump_statement .)
    else            reduce using rule 26 (statement -> jump_statement .)


state 82

    (27) expression_statement -> expression . SEMI
    (37) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 110
    COMMA           shift and go to state 107


state 83

    (30) selection_statement -> if . LPAREN expression RPAREN statement
    (31) selection_statement -> if . LPAREN expression RPAREN statement else statement

    LPAREN          shift and go to state 111


state 84

    (32) iteration_statement -> while . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 112


state 85

    (33) iteration_statement -> do . statement while LPAREN expression RPAREN SEMI
    (21) statement -> . expression_statement
    (22) statement -> . declaration
    (23) statement -> . compound_statement
    (24) statement -> . selection_statement
    (25) statement -> . iteration_statement
    (26) statement -> . jump_statement
    (27) expression_statement -> . expression SEMI
    (7) declaration -> . init_declarator_list SEMI
    (28) compound_statement -> . LBRACE statement_list RBRACE
    (29) compound_statement -> . LBRACE RBRACE
    (30) selection_statement -> . if LPAREN expression RPAREN statement
    (31) selection_statement -> . if LPAREN expression RPAREN statement else statement
    (32) iteration_statement -> . while LPAREN expression RPAREN statement
    (33) iteration_statement -> . do statement while LPAREN expression RPAREN SEMI
    (34) iteration_statement -> . for LPAREN expression SEMI expression SEMI expression RPAREN statement
    (35) jump_statement -> . return expression SEMI
    (36) expression -> . assignment_expression
    (37) expression -> . expression COMMA assignment_expression
    (8) init_declarator_list -> . type_specifier init_declarator
    (38) assignment_expression -> . conditional_expression
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (9) type_specifier -> . int
    (10) type_specifier -> . float
    (11) type_specifier -> . str
    (40) conditional_expression -> . logical_or_expression
    (41) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (42) logical_or_expression -> . logical_and_expression
    (43) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (44) logical_and_expression -> . equality_expression
    (45) logical_and_expression -> . logical_and_expression LAND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ relational_expression
    (48) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . additive_expression
    (50) relational_expression -> . relational_expression LT additive_expression
    (51) relational_expression -> . relational_expression GT additive_expression
    (52) relational_expression -> . relational_expression LE additive_expression
    (53) relational_expression -> . relational_expression GE additive_expression
    (54) additive_expression -> . multiplicative_expression
    (55) additive_expression -> . additive_expression PLUS multiplicative_expression
    (56) additive_expression -> . additive_expression MINUS multiplicative_expression
    (57) multiplicative_expression -> . unary_expression
    (58) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (59) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (60) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (61) unary_expression -> . postfix_expression
    (62) unary_expression -> . LNOT unary_expression
    (63) unary_expression -> . MINUS unary_expression
    (64) unary_expression -> . INCREMENT unary_expression
    (65) unary_expression -> . DECREMENT unary_expression
    (66) postfix_expression -> . primary_expression
    (67) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (68) primary_expression -> . ID
    (69) primary_expression -> . INTEGER
    (70) primary_expression -> . FLOAT
    (71) primary_expression -> . STR
    (72) primary_expression -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 47
    if              shift and go to state 83
    while           shift and go to state 84
    do              shift and go to state 85
    for             shift and go to state 86
    return          shift and go to state 87
    ID              shift and go to state 24
    int             shift and go to state 7
    float           shift and go to state 8
    str             shift and go to state 9
    LNOT            shift and go to state 34
    MINUS           shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STR             shift and go to state 41
    LPAREN          shift and go to state 38

    statement                      shift and go to state 113
    expression                     shift and go to state 82
    expression_statement           shift and go to state 76
    declaration                    shift and go to state 77
    compound_statement             shift and go to state 78
    selection_statement            shift and go to state 79
    iteration_statement            shift and go to state 80
    jump_statement                 shift and go to state 81
    init_declarator_list           shift and go to state 6
    assignment_expression          shift and go to state 70
    type_specifier                 shift and go to state 88
    conditional_expression         shift and go to state 23
    logical_or_expression          shift and go to state 25
    logical_and_expression         shift and go to state 26
    equality_expression            shift and go to state 27
    relational_expression          shift and go to state 28
    additive_expression            shift and go to state 29
    multiplicative_expression      shift and go to state 30
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 33
    primary_expression             shift and go to state 37

state 86

    (34) iteration_statement -> for . LPAREN expression SEMI expression SEMI expression RPAREN statement

    LPAREN          shift and go to state 114


state 87

    (35) jump_statement -> return . expression SEMI
    (36) expression -> . assignment_expression
    (37) expression -> . expression COMMA assignment_expression
    (38) assignment_expression -> . conditional_expression
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (40) conditional_expression -> . logical_or_expression
    (41) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (42) logical_or_expression -> . logical_and_expression
    (43) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (44) logical_and_expression -> . equality_expression
    (45) logical_and_expression -> . logical_and_expression LAND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ relational_expression
    (48) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . additive_expression
    (50) relational_expression -> . relational_expression LT additive_expression
    (51) relational_expression -> . relational_expression GT additive_expression
    (52) relational_expression -> . relational_expression LE additive_expression
    (53) relational_expression -> . relational_expression GE additive_expression
    (54) additive_expression -> . multiplicative_expression
    (55) additive_expression -> . additive_expression PLUS multiplicative_expression
    (56) additive_expression -> . additive_expression MINUS multiplicative_expression
    (57) multiplicative_expression -> . unary_expression
    (58) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (59) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (60) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (61) unary_expression -> . postfix_expression
    (62) unary_expression -> . LNOT unary_expression
    (63) unary_expression -> . MINUS unary_expression
    (64) unary_expression -> . INCREMENT unary_expression
    (65) unary_expression -> . DECREMENT unary_expression
    (66) postfix_expression -> . primary_expression
    (67) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (68) primary_expression -> . ID
    (69) primary_expression -> . INTEGER
    (70) primary_expression -> . FLOAT
    (71) primary_expression -> . STR
    (72) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 24
    LNOT            shift and go to state 34
    MINUS           shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STR             shift and go to state 41
    LPAREN          shift and go to state 38

    expression                     shift and go to state 115
    assignment_expression          shift and go to state 70
    conditional_expression         shift and go to state 23
    logical_or_expression          shift and go to state 25
    logical_and_expression         shift and go to state 26
    equality_expression            shift and go to state 27
    relational_expression          shift and go to state 28
    additive_expression            shift and go to state 29
    multiplicative_expression      shift and go to state 30
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 33
    primary_expression             shift and go to state 37

state 88

    (8) init_declarator_list -> type_specifier . init_declarator
    (12) init_declarator -> . declarator
    (13) init_declarator -> . declarator EQUALS initializer
    (14) declarator -> . ID

    ID              shift and go to state 43

    init_declarator                shift and go to state 12
    declarator                     shift and go to state 13

state 89

    (39) assignment_expression -> ID EQUALS assignment_expression .

    SEMI            reduce using rule 39 (assignment_expression -> ID EQUALS assignment_expression .)
    RPAREN          reduce using rule 39 (assignment_expression -> ID EQUALS assignment_expression .)
    COMMA           reduce using rule 39 (assignment_expression -> ID EQUALS assignment_expression .)
    COLON           reduce using rule 39 (assignment_expression -> ID EQUALS assignment_expression .)


state 90

    (67) postfix_expression -> ID LPAREN argument_expression_list . RPAREN
    (74) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 116
    COMMA           shift and go to state 117


state 91

    (73) argument_expression_list -> assignment_expression .

    RPAREN          reduce using rule 73 (argument_expression_list -> assignment_expression .)
    COMMA           reduce using rule 73 (argument_expression_list -> assignment_expression .)


state 92

    (41) conditional_expression -> logical_or_expression TERNARY expression . COLON conditional_expression
    (37) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 118
    COMMA           shift and go to state 107


state 93

    (43) logical_or_expression -> logical_or_expression LOR logical_and_expression .
    (45) logical_and_expression -> logical_and_expression . LAND equality_expression

    TERNARY         reduce using rule 43 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    LOR             reduce using rule 43 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    SEMI            reduce using rule 43 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    RPAREN          reduce using rule 43 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    COMMA           reduce using rule 43 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    COLON           reduce using rule 43 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    LAND            shift and go to state 52


state 94

    (45) logical_and_expression -> logical_and_expression LAND equality_expression .
    (47) equality_expression -> equality_expression . EQ relational_expression
    (48) equality_expression -> equality_expression . NE relational_expression

    LAND            reduce using rule 45 (logical_and_expression -> logical_and_expression LAND equality_expression .)
    TERNARY         reduce using rule 45 (logical_and_expression -> logical_and_expression LAND equality_expression .)
    LOR             reduce using rule 45 (logical_and_expression -> logical_and_expression LAND equality_expression .)
    SEMI            reduce using rule 45 (logical_and_expression -> logical_and_expression LAND equality_expression .)
    RPAREN          reduce using rule 45 (logical_and_expression -> logical_and_expression LAND equality_expression .)
    COMMA           reduce using rule 45 (logical_and_expression -> logical_and_expression LAND equality_expression .)
    COLON           reduce using rule 45 (logical_and_expression -> logical_and_expression LAND equality_expression .)
    EQ              shift and go to state 53
    NE              shift and go to state 54


state 95

    (47) equality_expression -> equality_expression EQ relational_expression .
    (50) relational_expression -> relational_expression . LT additive_expression
    (51) relational_expression -> relational_expression . GT additive_expression
    (52) relational_expression -> relational_expression . LE additive_expression
    (53) relational_expression -> relational_expression . GE additive_expression

    EQ              reduce using rule 47 (equality_expression -> equality_expression EQ relational_expression .)
    NE              reduce using rule 47 (equality_expression -> equality_expression EQ relational_expression .)
    LAND            reduce using rule 47 (equality_expression -> equality_expression EQ relational_expression .)
    TERNARY         reduce using rule 47 (equality_expression -> equality_expression EQ relational_expression .)
    LOR             reduce using rule 47 (equality_expression -> equality_expression EQ relational_expression .)
    SEMI            reduce using rule 47 (equality_expression -> equality_expression EQ relational_expression .)
    RPAREN          reduce using rule 47 (equality_expression -> equality_expression EQ relational_expression .)
    COMMA           reduce using rule 47 (equality_expression -> equality_expression EQ relational_expression .)
    COLON           reduce using rule 47 (equality_expression -> equality_expression EQ relational_expression .)
    LT              shift and go to state 55
    GT              shift and go to state 56
    LE              shift and go to state 57
    GE              shift and go to state 58


state 96

    (48) equality_expression -> equality_expression NE relational_expression .
    (50) relational_expression -> relational_expression . LT additive_expression
    (51) relational_expression -> relational_expression . GT additive_expression
    (52) relational_expression -> relational_expression . LE additive_expression
    (53) relational_expression -> relational_expression . GE additive_expression

    EQ              reduce using rule 48 (equality_expression -> equality_expression NE relational_expression .)
    NE              reduce using rule 48 (equality_expression -> equality_expression NE relational_expression .)
    LAND            reduce using rule 48 (equality_expression -> equality_expression NE relational_expression .)
    TERNARY         reduce using rule 48 (equality_expression -> equality_expression NE relational_expression .)
    LOR             reduce using rule 48 (equality_expression -> equality_expression NE relational_expression .)
    SEMI            reduce using rule 48 (equality_expression -> equality_expression NE relational_expression .)
    RPAREN          reduce using rule 48 (equality_expression -> equality_expression NE relational_expression .)
    COMMA           reduce using rule 48 (equality_expression -> equality_expression NE relational_expression .)
    COLON           reduce using rule 48 (equality_expression -> equality_expression NE relational_expression .)
    LT              shift and go to state 55
    GT              shift and go to state 56
    LE              shift and go to state 57
    GE              shift and go to state 58


state 97

    (50) relational_expression -> relational_expression LT additive_expression .
    (55) additive_expression -> additive_expression . PLUS multiplicative_expression
    (56) additive_expression -> additive_expression . MINUS multiplicative_expression

    LT              reduce using rule 50 (relational_expression -> relational_expression LT additive_expression .)
    GT              reduce using rule 50 (relational_expression -> relational_expression LT additive_expression .)
    LE              reduce using rule 50 (relational_expression -> relational_expression LT additive_expression .)
    GE              reduce using rule 50 (relational_expression -> relational_expression LT additive_expression .)
    EQ              reduce using rule 50 (relational_expression -> relational_expression LT additive_expression .)
    NE              reduce using rule 50 (relational_expression -> relational_expression LT additive_expression .)
    LAND            reduce using rule 50 (relational_expression -> relational_expression LT additive_expression .)
    TERNARY         reduce using rule 50 (relational_expression -> relational_expression LT additive_expression .)
    LOR             reduce using rule 50 (relational_expression -> relational_expression LT additive_expression .)
    SEMI            reduce using rule 50 (relational_expression -> relational_expression LT additive_expression .)
    RPAREN          reduce using rule 50 (relational_expression -> relational_expression LT additive_expression .)
    COMMA           reduce using rule 50 (relational_expression -> relational_expression LT additive_expression .)
    COLON           reduce using rule 50 (relational_expression -> relational_expression LT additive_expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60


state 98

    (51) relational_expression -> relational_expression GT additive_expression .
    (55) additive_expression -> additive_expression . PLUS multiplicative_expression
    (56) additive_expression -> additive_expression . MINUS multiplicative_expression

    LT              reduce using rule 51 (relational_expression -> relational_expression GT additive_expression .)
    GT              reduce using rule 51 (relational_expression -> relational_expression GT additive_expression .)
    LE              reduce using rule 51 (relational_expression -> relational_expression GT additive_expression .)
    GE              reduce using rule 51 (relational_expression -> relational_expression GT additive_expression .)
    EQ              reduce using rule 51 (relational_expression -> relational_expression GT additive_expression .)
    NE              reduce using rule 51 (relational_expression -> relational_expression GT additive_expression .)
    LAND            reduce using rule 51 (relational_expression -> relational_expression GT additive_expression .)
    TERNARY         reduce using rule 51 (relational_expression -> relational_expression GT additive_expression .)
    LOR             reduce using rule 51 (relational_expression -> relational_expression GT additive_expression .)
    SEMI            reduce using rule 51 (relational_expression -> relational_expression GT additive_expression .)
    RPAREN          reduce using rule 51 (relational_expression -> relational_expression GT additive_expression .)
    COMMA           reduce using rule 51 (relational_expression -> relational_expression GT additive_expression .)
    COLON           reduce using rule 51 (relational_expression -> relational_expression GT additive_expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60


state 99

    (52) relational_expression -> relational_expression LE additive_expression .
    (55) additive_expression -> additive_expression . PLUS multiplicative_expression
    (56) additive_expression -> additive_expression . MINUS multiplicative_expression

    LT              reduce using rule 52 (relational_expression -> relational_expression LE additive_expression .)
    GT              reduce using rule 52 (relational_expression -> relational_expression LE additive_expression .)
    LE              reduce using rule 52 (relational_expression -> relational_expression LE additive_expression .)
    GE              reduce using rule 52 (relational_expression -> relational_expression LE additive_expression .)
    EQ              reduce using rule 52 (relational_expression -> relational_expression LE additive_expression .)
    NE              reduce using rule 52 (relational_expression -> relational_expression LE additive_expression .)
    LAND            reduce using rule 52 (relational_expression -> relational_expression LE additive_expression .)
    TERNARY         reduce using rule 52 (relational_expression -> relational_expression LE additive_expression .)
    LOR             reduce using rule 52 (relational_expression -> relational_expression LE additive_expression .)
    SEMI            reduce using rule 52 (relational_expression -> relational_expression LE additive_expression .)
    RPAREN          reduce using rule 52 (relational_expression -> relational_expression LE additive_expression .)
    COMMA           reduce using rule 52 (relational_expression -> relational_expression LE additive_expression .)
    COLON           reduce using rule 52 (relational_expression -> relational_expression LE additive_expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60


state 100

    (53) relational_expression -> relational_expression GE additive_expression .
    (55) additive_expression -> additive_expression . PLUS multiplicative_expression
    (56) additive_expression -> additive_expression . MINUS multiplicative_expression

    LT              reduce using rule 53 (relational_expression -> relational_expression GE additive_expression .)
    GT              reduce using rule 53 (relational_expression -> relational_expression GE additive_expression .)
    LE              reduce using rule 53 (relational_expression -> relational_expression GE additive_expression .)
    GE              reduce using rule 53 (relational_expression -> relational_expression GE additive_expression .)
    EQ              reduce using rule 53 (relational_expression -> relational_expression GE additive_expression .)
    NE              reduce using rule 53 (relational_expression -> relational_expression GE additive_expression .)
    LAND            reduce using rule 53 (relational_expression -> relational_expression GE additive_expression .)
    TERNARY         reduce using rule 53 (relational_expression -> relational_expression GE additive_expression .)
    LOR             reduce using rule 53 (relational_expression -> relational_expression GE additive_expression .)
    SEMI            reduce using rule 53 (relational_expression -> relational_expression GE additive_expression .)
    RPAREN          reduce using rule 53 (relational_expression -> relational_expression GE additive_expression .)
    COMMA           reduce using rule 53 (relational_expression -> relational_expression GE additive_expression .)
    COLON           reduce using rule 53 (relational_expression -> relational_expression GE additive_expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60


state 101

    (55) additive_expression -> additive_expression PLUS multiplicative_expression .
    (58) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (59) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (60) multiplicative_expression -> multiplicative_expression . MODULO unary_expression

    PLUS            reduce using rule 55 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 55 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LT              reduce using rule 55 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GT              reduce using rule 55 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LE              reduce using rule 55 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GE              reduce using rule 55 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQ              reduce using rule 55 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NE              reduce using rule 55 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LAND            reduce using rule 55 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TERNARY         reduce using rule 55 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LOR             reduce using rule 55 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMI            reduce using rule 55 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 55 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 55 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COLON           reduce using rule 55 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    MODULO          shift and go to state 63


state 102

    (56) additive_expression -> additive_expression MINUS multiplicative_expression .
    (58) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (59) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (60) multiplicative_expression -> multiplicative_expression . MODULO unary_expression

    PLUS            reduce using rule 56 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 56 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LT              reduce using rule 56 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GT              reduce using rule 56 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LE              reduce using rule 56 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GE              reduce using rule 56 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQ              reduce using rule 56 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NE              reduce using rule 56 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LAND            reduce using rule 56 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TERNARY         reduce using rule 56 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LOR             reduce using rule 56 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMI            reduce using rule 56 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 56 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 56 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COLON           reduce using rule 56 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    MODULO          shift and go to state 63


state 103

    (58) multiplicative_expression -> multiplicative_expression TIMES unary_expression .

    TIMES           reduce using rule 58 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    DIVIDE          reduce using rule 58 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    MODULO          reduce using rule 58 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    PLUS            reduce using rule 58 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    MINUS           reduce using rule 58 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    LT              reduce using rule 58 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    GT              reduce using rule 58 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    LE              reduce using rule 58 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    GE              reduce using rule 58 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    EQ              reduce using rule 58 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    NE              reduce using rule 58 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    LAND            reduce using rule 58 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    TERNARY         reduce using rule 58 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    LOR             reduce using rule 58 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    SEMI            reduce using rule 58 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    RPAREN          reduce using rule 58 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    COMMA           reduce using rule 58 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    COLON           reduce using rule 58 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)


state 104

    (59) multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .

    TIMES           reduce using rule 59 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    DIVIDE          reduce using rule 59 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    MODULO          reduce using rule 59 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    PLUS            reduce using rule 59 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    MINUS           reduce using rule 59 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LT              reduce using rule 59 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    GT              reduce using rule 59 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LE              reduce using rule 59 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    GE              reduce using rule 59 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    EQ              reduce using rule 59 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    NE              reduce using rule 59 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LAND            reduce using rule 59 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    TERNARY         reduce using rule 59 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LOR             reduce using rule 59 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    SEMI            reduce using rule 59 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RPAREN          reduce using rule 59 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    COMMA           reduce using rule 59 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    COLON           reduce using rule 59 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)


state 105

    (60) multiplicative_expression -> multiplicative_expression MODULO unary_expression .

    TIMES           reduce using rule 60 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    DIVIDE          reduce using rule 60 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    MODULO          reduce using rule 60 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    PLUS            reduce using rule 60 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    MINUS           reduce using rule 60 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    LT              reduce using rule 60 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    GT              reduce using rule 60 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    LE              reduce using rule 60 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    GE              reduce using rule 60 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    EQ              reduce using rule 60 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    NE              reduce using rule 60 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    LAND            reduce using rule 60 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    TERNARY         reduce using rule 60 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    LOR             reduce using rule 60 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    SEMI            reduce using rule 60 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    RPAREN          reduce using rule 60 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    COMMA           reduce using rule 60 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    COLON           reduce using rule 60 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)


state 106

    (72) primary_expression -> LPAREN expression RPAREN .

    TIMES           reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    TERNARY         reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    LOR             reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)


state 107

    (37) expression -> expression COMMA . assignment_expression
    (38) assignment_expression -> . conditional_expression
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (40) conditional_expression -> . logical_or_expression
    (41) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (42) logical_or_expression -> . logical_and_expression
    (43) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (44) logical_and_expression -> . equality_expression
    (45) logical_and_expression -> . logical_and_expression LAND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ relational_expression
    (48) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . additive_expression
    (50) relational_expression -> . relational_expression LT additive_expression
    (51) relational_expression -> . relational_expression GT additive_expression
    (52) relational_expression -> . relational_expression LE additive_expression
    (53) relational_expression -> . relational_expression GE additive_expression
    (54) additive_expression -> . multiplicative_expression
    (55) additive_expression -> . additive_expression PLUS multiplicative_expression
    (56) additive_expression -> . additive_expression MINUS multiplicative_expression
    (57) multiplicative_expression -> . unary_expression
    (58) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (59) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (60) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (61) unary_expression -> . postfix_expression
    (62) unary_expression -> . LNOT unary_expression
    (63) unary_expression -> . MINUS unary_expression
    (64) unary_expression -> . INCREMENT unary_expression
    (65) unary_expression -> . DECREMENT unary_expression
    (66) postfix_expression -> . primary_expression
    (67) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (68) primary_expression -> . ID
    (69) primary_expression -> . INTEGER
    (70) primary_expression -> . FLOAT
    (71) primary_expression -> . STR
    (72) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 24
    LNOT            shift and go to state 34
    MINUS           shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STR             shift and go to state 41
    LPAREN          shift and go to state 38

    assignment_expression          shift and go to state 119
    conditional_expression         shift and go to state 23
    logical_or_expression          shift and go to state 25
    logical_and_expression         shift and go to state 26
    equality_expression            shift and go to state 27
    relational_expression          shift and go to state 28
    additive_expression            shift and go to state 29
    multiplicative_expression      shift and go to state 30
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 33
    primary_expression             shift and go to state 37

state 108

    (28) compound_statement -> LBRACE statement_list RBRACE .

    int             reduce using rule 28 (compound_statement -> LBRACE statement_list RBRACE .)
    float           reduce using rule 28 (compound_statement -> LBRACE statement_list RBRACE .)
    str             reduce using rule 28 (compound_statement -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 28 (compound_statement -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 28 (compound_statement -> LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 28 (compound_statement -> LBRACE statement_list RBRACE .)
    if              reduce using rule 28 (compound_statement -> LBRACE statement_list RBRACE .)
    while           reduce using rule 28 (compound_statement -> LBRACE statement_list RBRACE .)
    do              reduce using rule 28 (compound_statement -> LBRACE statement_list RBRACE .)
    for             reduce using rule 28 (compound_statement -> LBRACE statement_list RBRACE .)
    return          reduce using rule 28 (compound_statement -> LBRACE statement_list RBRACE .)
    ID              reduce using rule 28 (compound_statement -> LBRACE statement_list RBRACE .)
    LNOT            reduce using rule 28 (compound_statement -> LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 28 (compound_statement -> LBRACE statement_list RBRACE .)
    INCREMENT       reduce using rule 28 (compound_statement -> LBRACE statement_list RBRACE .)
    DECREMENT       reduce using rule 28 (compound_statement -> LBRACE statement_list RBRACE .)
    INTEGER         reduce using rule 28 (compound_statement -> LBRACE statement_list RBRACE .)
    FLOAT           reduce using rule 28 (compound_statement -> LBRACE statement_list RBRACE .)
    STR             reduce using rule 28 (compound_statement -> LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 28 (compound_statement -> LBRACE statement_list RBRACE .)
    else            reduce using rule 28 (compound_statement -> LBRACE statement_list RBRACE .)


state 109

    (20) statement_list -> statement_list statement .

    RBRACE          reduce using rule 20 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 20 (statement_list -> statement_list statement .)
    if              reduce using rule 20 (statement_list -> statement_list statement .)
    while           reduce using rule 20 (statement_list -> statement_list statement .)
    do              reduce using rule 20 (statement_list -> statement_list statement .)
    for             reduce using rule 20 (statement_list -> statement_list statement .)
    return          reduce using rule 20 (statement_list -> statement_list statement .)
    ID              reduce using rule 20 (statement_list -> statement_list statement .)
    int             reduce using rule 20 (statement_list -> statement_list statement .)
    float           reduce using rule 20 (statement_list -> statement_list statement .)
    str             reduce using rule 20 (statement_list -> statement_list statement .)
    LNOT            reduce using rule 20 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 20 (statement_list -> statement_list statement .)
    INCREMENT       reduce using rule 20 (statement_list -> statement_list statement .)
    DECREMENT       reduce using rule 20 (statement_list -> statement_list statement .)
    INTEGER         reduce using rule 20 (statement_list -> statement_list statement .)
    FLOAT           reduce using rule 20 (statement_list -> statement_list statement .)
    STR             reduce using rule 20 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 20 (statement_list -> statement_list statement .)


state 110

    (27) expression_statement -> expression SEMI .

    RBRACE          reduce using rule 27 (expression_statement -> expression SEMI .)
    LBRACE          reduce using rule 27 (expression_statement -> expression SEMI .)
    if              reduce using rule 27 (expression_statement -> expression SEMI .)
    while           reduce using rule 27 (expression_statement -> expression SEMI .)
    do              reduce using rule 27 (expression_statement -> expression SEMI .)
    for             reduce using rule 27 (expression_statement -> expression SEMI .)
    return          reduce using rule 27 (expression_statement -> expression SEMI .)
    ID              reduce using rule 27 (expression_statement -> expression SEMI .)
    int             reduce using rule 27 (expression_statement -> expression SEMI .)
    float           reduce using rule 27 (expression_statement -> expression SEMI .)
    str             reduce using rule 27 (expression_statement -> expression SEMI .)
    LNOT            reduce using rule 27 (expression_statement -> expression SEMI .)
    MINUS           reduce using rule 27 (expression_statement -> expression SEMI .)
    INCREMENT       reduce using rule 27 (expression_statement -> expression SEMI .)
    DECREMENT       reduce using rule 27 (expression_statement -> expression SEMI .)
    INTEGER         reduce using rule 27 (expression_statement -> expression SEMI .)
    FLOAT           reduce using rule 27 (expression_statement -> expression SEMI .)
    STR             reduce using rule 27 (expression_statement -> expression SEMI .)
    LPAREN          reduce using rule 27 (expression_statement -> expression SEMI .)
    else            reduce using rule 27 (expression_statement -> expression SEMI .)


state 111

    (30) selection_statement -> if LPAREN . expression RPAREN statement
    (31) selection_statement -> if LPAREN . expression RPAREN statement else statement
    (36) expression -> . assignment_expression
    (37) expression -> . expression COMMA assignment_expression
    (38) assignment_expression -> . conditional_expression
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (40) conditional_expression -> . logical_or_expression
    (41) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (42) logical_or_expression -> . logical_and_expression
    (43) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (44) logical_and_expression -> . equality_expression
    (45) logical_and_expression -> . logical_and_expression LAND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ relational_expression
    (48) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . additive_expression
    (50) relational_expression -> . relational_expression LT additive_expression
    (51) relational_expression -> . relational_expression GT additive_expression
    (52) relational_expression -> . relational_expression LE additive_expression
    (53) relational_expression -> . relational_expression GE additive_expression
    (54) additive_expression -> . multiplicative_expression
    (55) additive_expression -> . additive_expression PLUS multiplicative_expression
    (56) additive_expression -> . additive_expression MINUS multiplicative_expression
    (57) multiplicative_expression -> . unary_expression
    (58) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (59) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (60) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (61) unary_expression -> . postfix_expression
    (62) unary_expression -> . LNOT unary_expression
    (63) unary_expression -> . MINUS unary_expression
    (64) unary_expression -> . INCREMENT unary_expression
    (65) unary_expression -> . DECREMENT unary_expression
    (66) postfix_expression -> . primary_expression
    (67) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (68) primary_expression -> . ID
    (69) primary_expression -> . INTEGER
    (70) primary_expression -> . FLOAT
    (71) primary_expression -> . STR
    (72) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 24
    LNOT            shift and go to state 34
    MINUS           shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STR             shift and go to state 41
    LPAREN          shift and go to state 38

    expression                     shift and go to state 120
    assignment_expression          shift and go to state 70
    conditional_expression         shift and go to state 23
    logical_or_expression          shift and go to state 25
    logical_and_expression         shift and go to state 26
    equality_expression            shift and go to state 27
    relational_expression          shift and go to state 28
    additive_expression            shift and go to state 29
    multiplicative_expression      shift and go to state 30
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 33
    primary_expression             shift and go to state 37

state 112

    (32) iteration_statement -> while LPAREN . expression RPAREN statement
    (36) expression -> . assignment_expression
    (37) expression -> . expression COMMA assignment_expression
    (38) assignment_expression -> . conditional_expression
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (40) conditional_expression -> . logical_or_expression
    (41) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (42) logical_or_expression -> . logical_and_expression
    (43) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (44) logical_and_expression -> . equality_expression
    (45) logical_and_expression -> . logical_and_expression LAND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ relational_expression
    (48) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . additive_expression
    (50) relational_expression -> . relational_expression LT additive_expression
    (51) relational_expression -> . relational_expression GT additive_expression
    (52) relational_expression -> . relational_expression LE additive_expression
    (53) relational_expression -> . relational_expression GE additive_expression
    (54) additive_expression -> . multiplicative_expression
    (55) additive_expression -> . additive_expression PLUS multiplicative_expression
    (56) additive_expression -> . additive_expression MINUS multiplicative_expression
    (57) multiplicative_expression -> . unary_expression
    (58) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (59) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (60) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (61) unary_expression -> . postfix_expression
    (62) unary_expression -> . LNOT unary_expression
    (63) unary_expression -> . MINUS unary_expression
    (64) unary_expression -> . INCREMENT unary_expression
    (65) unary_expression -> . DECREMENT unary_expression
    (66) postfix_expression -> . primary_expression
    (67) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (68) primary_expression -> . ID
    (69) primary_expression -> . INTEGER
    (70) primary_expression -> . FLOAT
    (71) primary_expression -> . STR
    (72) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 24
    LNOT            shift and go to state 34
    MINUS           shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STR             shift and go to state 41
    LPAREN          shift and go to state 38

    expression                     shift and go to state 121
    assignment_expression          shift and go to state 70
    conditional_expression         shift and go to state 23
    logical_or_expression          shift and go to state 25
    logical_and_expression         shift and go to state 26
    equality_expression            shift and go to state 27
    relational_expression          shift and go to state 28
    additive_expression            shift and go to state 29
    multiplicative_expression      shift and go to state 30
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 33
    primary_expression             shift and go to state 37

state 113

    (33) iteration_statement -> do statement . while LPAREN expression RPAREN SEMI

    while           shift and go to state 122


state 114

    (34) iteration_statement -> for LPAREN . expression SEMI expression SEMI expression RPAREN statement
    (36) expression -> . assignment_expression
    (37) expression -> . expression COMMA assignment_expression
    (38) assignment_expression -> . conditional_expression
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (40) conditional_expression -> . logical_or_expression
    (41) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (42) logical_or_expression -> . logical_and_expression
    (43) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (44) logical_and_expression -> . equality_expression
    (45) logical_and_expression -> . logical_and_expression LAND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ relational_expression
    (48) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . additive_expression
    (50) relational_expression -> . relational_expression LT additive_expression
    (51) relational_expression -> . relational_expression GT additive_expression
    (52) relational_expression -> . relational_expression LE additive_expression
    (53) relational_expression -> . relational_expression GE additive_expression
    (54) additive_expression -> . multiplicative_expression
    (55) additive_expression -> . additive_expression PLUS multiplicative_expression
    (56) additive_expression -> . additive_expression MINUS multiplicative_expression
    (57) multiplicative_expression -> . unary_expression
    (58) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (59) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (60) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (61) unary_expression -> . postfix_expression
    (62) unary_expression -> . LNOT unary_expression
    (63) unary_expression -> . MINUS unary_expression
    (64) unary_expression -> . INCREMENT unary_expression
    (65) unary_expression -> . DECREMENT unary_expression
    (66) postfix_expression -> . primary_expression
    (67) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (68) primary_expression -> . ID
    (69) primary_expression -> . INTEGER
    (70) primary_expression -> . FLOAT
    (71) primary_expression -> . STR
    (72) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 24
    LNOT            shift and go to state 34
    MINUS           shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STR             shift and go to state 41
    LPAREN          shift and go to state 38

    expression                     shift and go to state 123
    assignment_expression          shift and go to state 70
    conditional_expression         shift and go to state 23
    logical_or_expression          shift and go to state 25
    logical_and_expression         shift and go to state 26
    equality_expression            shift and go to state 27
    relational_expression          shift and go to state 28
    additive_expression            shift and go to state 29
    multiplicative_expression      shift and go to state 30
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 33
    primary_expression             shift and go to state 37

state 115

    (35) jump_statement -> return expression . SEMI
    (37) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 124
    COMMA           shift and go to state 107


state 116

    (67) postfix_expression -> ID LPAREN argument_expression_list RPAREN .

    TIMES           reduce using rule 67 (postfix_expression -> ID LPAREN argument_expression_list RPAREN .)
    DIVIDE          reduce using rule 67 (postfix_expression -> ID LPAREN argument_expression_list RPAREN .)
    MODULO          reduce using rule 67 (postfix_expression -> ID LPAREN argument_expression_list RPAREN .)
    PLUS            reduce using rule 67 (postfix_expression -> ID LPAREN argument_expression_list RPAREN .)
    MINUS           reduce using rule 67 (postfix_expression -> ID LPAREN argument_expression_list RPAREN .)
    LT              reduce using rule 67 (postfix_expression -> ID LPAREN argument_expression_list RPAREN .)
    GT              reduce using rule 67 (postfix_expression -> ID LPAREN argument_expression_list RPAREN .)
    LE              reduce using rule 67 (postfix_expression -> ID LPAREN argument_expression_list RPAREN .)
    GE              reduce using rule 67 (postfix_expression -> ID LPAREN argument_expression_list RPAREN .)
    EQ              reduce using rule 67 (postfix_expression -> ID LPAREN argument_expression_list RPAREN .)
    NE              reduce using rule 67 (postfix_expression -> ID LPAREN argument_expression_list RPAREN .)
    LAND            reduce using rule 67 (postfix_expression -> ID LPAREN argument_expression_list RPAREN .)
    TERNARY         reduce using rule 67 (postfix_expression -> ID LPAREN argument_expression_list RPAREN .)
    LOR             reduce using rule 67 (postfix_expression -> ID LPAREN argument_expression_list RPAREN .)
    SEMI            reduce using rule 67 (postfix_expression -> ID LPAREN argument_expression_list RPAREN .)
    RPAREN          reduce using rule 67 (postfix_expression -> ID LPAREN argument_expression_list RPAREN .)
    COMMA           reduce using rule 67 (postfix_expression -> ID LPAREN argument_expression_list RPAREN .)
    COLON           reduce using rule 67 (postfix_expression -> ID LPAREN argument_expression_list RPAREN .)


state 117

    (74) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (38) assignment_expression -> . conditional_expression
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (40) conditional_expression -> . logical_or_expression
    (41) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (42) logical_or_expression -> . logical_and_expression
    (43) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (44) logical_and_expression -> . equality_expression
    (45) logical_and_expression -> . logical_and_expression LAND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ relational_expression
    (48) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . additive_expression
    (50) relational_expression -> . relational_expression LT additive_expression
    (51) relational_expression -> . relational_expression GT additive_expression
    (52) relational_expression -> . relational_expression LE additive_expression
    (53) relational_expression -> . relational_expression GE additive_expression
    (54) additive_expression -> . multiplicative_expression
    (55) additive_expression -> . additive_expression PLUS multiplicative_expression
    (56) additive_expression -> . additive_expression MINUS multiplicative_expression
    (57) multiplicative_expression -> . unary_expression
    (58) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (59) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (60) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (61) unary_expression -> . postfix_expression
    (62) unary_expression -> . LNOT unary_expression
    (63) unary_expression -> . MINUS unary_expression
    (64) unary_expression -> . INCREMENT unary_expression
    (65) unary_expression -> . DECREMENT unary_expression
    (66) postfix_expression -> . primary_expression
    (67) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (68) primary_expression -> . ID
    (69) primary_expression -> . INTEGER
    (70) primary_expression -> . FLOAT
    (71) primary_expression -> . STR
    (72) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 24
    LNOT            shift and go to state 34
    MINUS           shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STR             shift and go to state 41
    LPAREN          shift and go to state 38

    assignment_expression          shift and go to state 125
    conditional_expression         shift and go to state 23
    logical_or_expression          shift and go to state 25
    logical_and_expression         shift and go to state 26
    equality_expression            shift and go to state 27
    relational_expression          shift and go to state 28
    additive_expression            shift and go to state 29
    multiplicative_expression      shift and go to state 30
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 33
    primary_expression             shift and go to state 37

state 118

    (41) conditional_expression -> logical_or_expression TERNARY expression COLON . conditional_expression
    (40) conditional_expression -> . logical_or_expression
    (41) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (42) logical_or_expression -> . logical_and_expression
    (43) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (44) logical_and_expression -> . equality_expression
    (45) logical_and_expression -> . logical_and_expression LAND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ relational_expression
    (48) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . additive_expression
    (50) relational_expression -> . relational_expression LT additive_expression
    (51) relational_expression -> . relational_expression GT additive_expression
    (52) relational_expression -> . relational_expression LE additive_expression
    (53) relational_expression -> . relational_expression GE additive_expression
    (54) additive_expression -> . multiplicative_expression
    (55) additive_expression -> . additive_expression PLUS multiplicative_expression
    (56) additive_expression -> . additive_expression MINUS multiplicative_expression
    (57) multiplicative_expression -> . unary_expression
    (58) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (59) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (60) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (61) unary_expression -> . postfix_expression
    (62) unary_expression -> . LNOT unary_expression
    (63) unary_expression -> . MINUS unary_expression
    (64) unary_expression -> . INCREMENT unary_expression
    (65) unary_expression -> . DECREMENT unary_expression
    (66) postfix_expression -> . primary_expression
    (67) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (68) primary_expression -> . ID
    (69) primary_expression -> . INTEGER
    (70) primary_expression -> . FLOAT
    (71) primary_expression -> . STR
    (72) primary_expression -> . LPAREN expression RPAREN

    LNOT            shift and go to state 34
    MINUS           shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    ID              shift and go to state 65
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STR             shift and go to state 41
    LPAREN          shift and go to state 38

    logical_or_expression          shift and go to state 25
    conditional_expression         shift and go to state 126
    logical_and_expression         shift and go to state 26
    equality_expression            shift and go to state 27
    relational_expression          shift and go to state 28
    additive_expression            shift and go to state 29
    multiplicative_expression      shift and go to state 30
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 33
    primary_expression             shift and go to state 37

state 119

    (37) expression -> expression COMMA assignment_expression .

    RPAREN          reduce using rule 37 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 37 (expression -> expression COMMA assignment_expression .)
    SEMI            reduce using rule 37 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 37 (expression -> expression COMMA assignment_expression .)


state 120

    (30) selection_statement -> if LPAREN expression . RPAREN statement
    (31) selection_statement -> if LPAREN expression . RPAREN statement else statement
    (37) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 127
    COMMA           shift and go to state 107


state 121

    (32) iteration_statement -> while LPAREN expression . RPAREN statement
    (37) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 128
    COMMA           shift and go to state 107


state 122

    (33) iteration_statement -> do statement while . LPAREN expression RPAREN SEMI

    LPAREN          shift and go to state 129


state 123

    (34) iteration_statement -> for LPAREN expression . SEMI expression SEMI expression RPAREN statement
    (37) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 130
    COMMA           shift and go to state 107


state 124

    (35) jump_statement -> return expression SEMI .

    RBRACE          reduce using rule 35 (jump_statement -> return expression SEMI .)
    LBRACE          reduce using rule 35 (jump_statement -> return expression SEMI .)
    if              reduce using rule 35 (jump_statement -> return expression SEMI .)
    while           reduce using rule 35 (jump_statement -> return expression SEMI .)
    do              reduce using rule 35 (jump_statement -> return expression SEMI .)
    for             reduce using rule 35 (jump_statement -> return expression SEMI .)
    return          reduce using rule 35 (jump_statement -> return expression SEMI .)
    ID              reduce using rule 35 (jump_statement -> return expression SEMI .)
    int             reduce using rule 35 (jump_statement -> return expression SEMI .)
    float           reduce using rule 35 (jump_statement -> return expression SEMI .)
    str             reduce using rule 35 (jump_statement -> return expression SEMI .)
    LNOT            reduce using rule 35 (jump_statement -> return expression SEMI .)
    MINUS           reduce using rule 35 (jump_statement -> return expression SEMI .)
    INCREMENT       reduce using rule 35 (jump_statement -> return expression SEMI .)
    DECREMENT       reduce using rule 35 (jump_statement -> return expression SEMI .)
    INTEGER         reduce using rule 35 (jump_statement -> return expression SEMI .)
    FLOAT           reduce using rule 35 (jump_statement -> return expression SEMI .)
    STR             reduce using rule 35 (jump_statement -> return expression SEMI .)
    LPAREN          reduce using rule 35 (jump_statement -> return expression SEMI .)
    else            reduce using rule 35 (jump_statement -> return expression SEMI .)


state 125

    (74) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    RPAREN          reduce using rule 74 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 74 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)


state 126

    (41) conditional_expression -> logical_or_expression TERNARY expression COLON conditional_expression .

    SEMI            reduce using rule 41 (conditional_expression -> logical_or_expression TERNARY expression COLON conditional_expression .)
    RPAREN          reduce using rule 41 (conditional_expression -> logical_or_expression TERNARY expression COLON conditional_expression .)
    COMMA           reduce using rule 41 (conditional_expression -> logical_or_expression TERNARY expression COLON conditional_expression .)
    COLON           reduce using rule 41 (conditional_expression -> logical_or_expression TERNARY expression COLON conditional_expression .)


state 127

    (30) selection_statement -> if LPAREN expression RPAREN . statement
    (31) selection_statement -> if LPAREN expression RPAREN . statement else statement
    (21) statement -> . expression_statement
    (22) statement -> . declaration
    (23) statement -> . compound_statement
    (24) statement -> . selection_statement
    (25) statement -> . iteration_statement
    (26) statement -> . jump_statement
    (27) expression_statement -> . expression SEMI
    (7) declaration -> . init_declarator_list SEMI
    (28) compound_statement -> . LBRACE statement_list RBRACE
    (29) compound_statement -> . LBRACE RBRACE
    (30) selection_statement -> . if LPAREN expression RPAREN statement
    (31) selection_statement -> . if LPAREN expression RPAREN statement else statement
    (32) iteration_statement -> . while LPAREN expression RPAREN statement
    (33) iteration_statement -> . do statement while LPAREN expression RPAREN SEMI
    (34) iteration_statement -> . for LPAREN expression SEMI expression SEMI expression RPAREN statement
    (35) jump_statement -> . return expression SEMI
    (36) expression -> . assignment_expression
    (37) expression -> . expression COMMA assignment_expression
    (8) init_declarator_list -> . type_specifier init_declarator
    (38) assignment_expression -> . conditional_expression
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (9) type_specifier -> . int
    (10) type_specifier -> . float
    (11) type_specifier -> . str
    (40) conditional_expression -> . logical_or_expression
    (41) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (42) logical_or_expression -> . logical_and_expression
    (43) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (44) logical_and_expression -> . equality_expression
    (45) logical_and_expression -> . logical_and_expression LAND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ relational_expression
    (48) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . additive_expression
    (50) relational_expression -> . relational_expression LT additive_expression
    (51) relational_expression -> . relational_expression GT additive_expression
    (52) relational_expression -> . relational_expression LE additive_expression
    (53) relational_expression -> . relational_expression GE additive_expression
    (54) additive_expression -> . multiplicative_expression
    (55) additive_expression -> . additive_expression PLUS multiplicative_expression
    (56) additive_expression -> . additive_expression MINUS multiplicative_expression
    (57) multiplicative_expression -> . unary_expression
    (58) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (59) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (60) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (61) unary_expression -> . postfix_expression
    (62) unary_expression -> . LNOT unary_expression
    (63) unary_expression -> . MINUS unary_expression
    (64) unary_expression -> . INCREMENT unary_expression
    (65) unary_expression -> . DECREMENT unary_expression
    (66) postfix_expression -> . primary_expression
    (67) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (68) primary_expression -> . ID
    (69) primary_expression -> . INTEGER
    (70) primary_expression -> . FLOAT
    (71) primary_expression -> . STR
    (72) primary_expression -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 47
    if              shift and go to state 83
    while           shift and go to state 84
    do              shift and go to state 85
    for             shift and go to state 86
    return          shift and go to state 87
    ID              shift and go to state 24
    int             shift and go to state 7
    float           shift and go to state 8
    str             shift and go to state 9
    LNOT            shift and go to state 34
    MINUS           shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STR             shift and go to state 41
    LPAREN          shift and go to state 38

    expression                     shift and go to state 82
    statement                      shift and go to state 131
    expression_statement           shift and go to state 76
    declaration                    shift and go to state 77
    compound_statement             shift and go to state 78
    selection_statement            shift and go to state 79
    iteration_statement            shift and go to state 80
    jump_statement                 shift and go to state 81
    init_declarator_list           shift and go to state 6
    assignment_expression          shift and go to state 70
    type_specifier                 shift and go to state 88
    conditional_expression         shift and go to state 23
    logical_or_expression          shift and go to state 25
    logical_and_expression         shift and go to state 26
    equality_expression            shift and go to state 27
    relational_expression          shift and go to state 28
    additive_expression            shift and go to state 29
    multiplicative_expression      shift and go to state 30
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 33
    primary_expression             shift and go to state 37

state 128

    (32) iteration_statement -> while LPAREN expression RPAREN . statement
    (21) statement -> . expression_statement
    (22) statement -> . declaration
    (23) statement -> . compound_statement
    (24) statement -> . selection_statement
    (25) statement -> . iteration_statement
    (26) statement -> . jump_statement
    (27) expression_statement -> . expression SEMI
    (7) declaration -> . init_declarator_list SEMI
    (28) compound_statement -> . LBRACE statement_list RBRACE
    (29) compound_statement -> . LBRACE RBRACE
    (30) selection_statement -> . if LPAREN expression RPAREN statement
    (31) selection_statement -> . if LPAREN expression RPAREN statement else statement
    (32) iteration_statement -> . while LPAREN expression RPAREN statement
    (33) iteration_statement -> . do statement while LPAREN expression RPAREN SEMI
    (34) iteration_statement -> . for LPAREN expression SEMI expression SEMI expression RPAREN statement
    (35) jump_statement -> . return expression SEMI
    (36) expression -> . assignment_expression
    (37) expression -> . expression COMMA assignment_expression
    (8) init_declarator_list -> . type_specifier init_declarator
    (38) assignment_expression -> . conditional_expression
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (9) type_specifier -> . int
    (10) type_specifier -> . float
    (11) type_specifier -> . str
    (40) conditional_expression -> . logical_or_expression
    (41) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (42) logical_or_expression -> . logical_and_expression
    (43) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (44) logical_and_expression -> . equality_expression
    (45) logical_and_expression -> . logical_and_expression LAND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ relational_expression
    (48) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . additive_expression
    (50) relational_expression -> . relational_expression LT additive_expression
    (51) relational_expression -> . relational_expression GT additive_expression
    (52) relational_expression -> . relational_expression LE additive_expression
    (53) relational_expression -> . relational_expression GE additive_expression
    (54) additive_expression -> . multiplicative_expression
    (55) additive_expression -> . additive_expression PLUS multiplicative_expression
    (56) additive_expression -> . additive_expression MINUS multiplicative_expression
    (57) multiplicative_expression -> . unary_expression
    (58) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (59) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (60) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (61) unary_expression -> . postfix_expression
    (62) unary_expression -> . LNOT unary_expression
    (63) unary_expression -> . MINUS unary_expression
    (64) unary_expression -> . INCREMENT unary_expression
    (65) unary_expression -> . DECREMENT unary_expression
    (66) postfix_expression -> . primary_expression
    (67) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (68) primary_expression -> . ID
    (69) primary_expression -> . INTEGER
    (70) primary_expression -> . FLOAT
    (71) primary_expression -> . STR
    (72) primary_expression -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 47
    if              shift and go to state 83
    while           shift and go to state 84
    do              shift and go to state 85
    for             shift and go to state 86
    return          shift and go to state 87
    ID              shift and go to state 24
    int             shift and go to state 7
    float           shift and go to state 8
    str             shift and go to state 9
    LNOT            shift and go to state 34
    MINUS           shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STR             shift and go to state 41
    LPAREN          shift and go to state 38

    expression                     shift and go to state 82
    statement                      shift and go to state 132
    expression_statement           shift and go to state 76
    declaration                    shift and go to state 77
    compound_statement             shift and go to state 78
    selection_statement            shift and go to state 79
    iteration_statement            shift and go to state 80
    jump_statement                 shift and go to state 81
    init_declarator_list           shift and go to state 6
    assignment_expression          shift and go to state 70
    type_specifier                 shift and go to state 88
    conditional_expression         shift and go to state 23
    logical_or_expression          shift and go to state 25
    logical_and_expression         shift and go to state 26
    equality_expression            shift and go to state 27
    relational_expression          shift and go to state 28
    additive_expression            shift and go to state 29
    multiplicative_expression      shift and go to state 30
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 33
    primary_expression             shift and go to state 37

state 129

    (33) iteration_statement -> do statement while LPAREN . expression RPAREN SEMI
    (36) expression -> . assignment_expression
    (37) expression -> . expression COMMA assignment_expression
    (38) assignment_expression -> . conditional_expression
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (40) conditional_expression -> . logical_or_expression
    (41) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (42) logical_or_expression -> . logical_and_expression
    (43) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (44) logical_and_expression -> . equality_expression
    (45) logical_and_expression -> . logical_and_expression LAND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ relational_expression
    (48) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . additive_expression
    (50) relational_expression -> . relational_expression LT additive_expression
    (51) relational_expression -> . relational_expression GT additive_expression
    (52) relational_expression -> . relational_expression LE additive_expression
    (53) relational_expression -> . relational_expression GE additive_expression
    (54) additive_expression -> . multiplicative_expression
    (55) additive_expression -> . additive_expression PLUS multiplicative_expression
    (56) additive_expression -> . additive_expression MINUS multiplicative_expression
    (57) multiplicative_expression -> . unary_expression
    (58) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (59) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (60) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (61) unary_expression -> . postfix_expression
    (62) unary_expression -> . LNOT unary_expression
    (63) unary_expression -> . MINUS unary_expression
    (64) unary_expression -> . INCREMENT unary_expression
    (65) unary_expression -> . DECREMENT unary_expression
    (66) postfix_expression -> . primary_expression
    (67) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (68) primary_expression -> . ID
    (69) primary_expression -> . INTEGER
    (70) primary_expression -> . FLOAT
    (71) primary_expression -> . STR
    (72) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 24
    LNOT            shift and go to state 34
    MINUS           shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STR             shift and go to state 41
    LPAREN          shift and go to state 38

    expression                     shift and go to state 133
    assignment_expression          shift and go to state 70
    conditional_expression         shift and go to state 23
    logical_or_expression          shift and go to state 25
    logical_and_expression         shift and go to state 26
    equality_expression            shift and go to state 27
    relational_expression          shift and go to state 28
    additive_expression            shift and go to state 29
    multiplicative_expression      shift and go to state 30
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 33
    primary_expression             shift and go to state 37

state 130

    (34) iteration_statement -> for LPAREN expression SEMI . expression SEMI expression RPAREN statement
    (36) expression -> . assignment_expression
    (37) expression -> . expression COMMA assignment_expression
    (38) assignment_expression -> . conditional_expression
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (40) conditional_expression -> . logical_or_expression
    (41) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (42) logical_or_expression -> . logical_and_expression
    (43) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (44) logical_and_expression -> . equality_expression
    (45) logical_and_expression -> . logical_and_expression LAND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ relational_expression
    (48) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . additive_expression
    (50) relational_expression -> . relational_expression LT additive_expression
    (51) relational_expression -> . relational_expression GT additive_expression
    (52) relational_expression -> . relational_expression LE additive_expression
    (53) relational_expression -> . relational_expression GE additive_expression
    (54) additive_expression -> . multiplicative_expression
    (55) additive_expression -> . additive_expression PLUS multiplicative_expression
    (56) additive_expression -> . additive_expression MINUS multiplicative_expression
    (57) multiplicative_expression -> . unary_expression
    (58) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (59) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (60) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (61) unary_expression -> . postfix_expression
    (62) unary_expression -> . LNOT unary_expression
    (63) unary_expression -> . MINUS unary_expression
    (64) unary_expression -> . INCREMENT unary_expression
    (65) unary_expression -> . DECREMENT unary_expression
    (66) postfix_expression -> . primary_expression
    (67) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (68) primary_expression -> . ID
    (69) primary_expression -> . INTEGER
    (70) primary_expression -> . FLOAT
    (71) primary_expression -> . STR
    (72) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 24
    LNOT            shift and go to state 34
    MINUS           shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STR             shift and go to state 41
    LPAREN          shift and go to state 38

    expression                     shift and go to state 134
    assignment_expression          shift and go to state 70
    conditional_expression         shift and go to state 23
    logical_or_expression          shift and go to state 25
    logical_and_expression         shift and go to state 26
    equality_expression            shift and go to state 27
    relational_expression          shift and go to state 28
    additive_expression            shift and go to state 29
    multiplicative_expression      shift and go to state 30
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 33
    primary_expression             shift and go to state 37

state 131

    (30) selection_statement -> if LPAREN expression RPAREN statement .
    (31) selection_statement -> if LPAREN expression RPAREN statement . else statement

  ! shift/reduce conflict for else resolved as shift
    RBRACE          reduce using rule 30 (selection_statement -> if LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 30 (selection_statement -> if LPAREN expression RPAREN statement .)
    if              reduce using rule 30 (selection_statement -> if LPAREN expression RPAREN statement .)
    while           reduce using rule 30 (selection_statement -> if LPAREN expression RPAREN statement .)
    do              reduce using rule 30 (selection_statement -> if LPAREN expression RPAREN statement .)
    for             reduce using rule 30 (selection_statement -> if LPAREN expression RPAREN statement .)
    return          reduce using rule 30 (selection_statement -> if LPAREN expression RPAREN statement .)
    ID              reduce using rule 30 (selection_statement -> if LPAREN expression RPAREN statement .)
    int             reduce using rule 30 (selection_statement -> if LPAREN expression RPAREN statement .)
    float           reduce using rule 30 (selection_statement -> if LPAREN expression RPAREN statement .)
    str             reduce using rule 30 (selection_statement -> if LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 30 (selection_statement -> if LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 30 (selection_statement -> if LPAREN expression RPAREN statement .)
    INCREMENT       reduce using rule 30 (selection_statement -> if LPAREN expression RPAREN statement .)
    DECREMENT       reduce using rule 30 (selection_statement -> if LPAREN expression RPAREN statement .)
    INTEGER         reduce using rule 30 (selection_statement -> if LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 30 (selection_statement -> if LPAREN expression RPAREN statement .)
    STR             reduce using rule 30 (selection_statement -> if LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 30 (selection_statement -> if LPAREN expression RPAREN statement .)
    else            shift and go to state 135

  ! else            [ reduce using rule 30 (selection_statement -> if LPAREN expression RPAREN statement .) ]


state 132

    (32) iteration_statement -> while LPAREN expression RPAREN statement .

    RBRACE          reduce using rule 32 (iteration_statement -> while LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 32 (iteration_statement -> while LPAREN expression RPAREN statement .)
    if              reduce using rule 32 (iteration_statement -> while LPAREN expression RPAREN statement .)
    while           reduce using rule 32 (iteration_statement -> while LPAREN expression RPAREN statement .)
    do              reduce using rule 32 (iteration_statement -> while LPAREN expression RPAREN statement .)
    for             reduce using rule 32 (iteration_statement -> while LPAREN expression RPAREN statement .)
    return          reduce using rule 32 (iteration_statement -> while LPAREN expression RPAREN statement .)
    ID              reduce using rule 32 (iteration_statement -> while LPAREN expression RPAREN statement .)
    int             reduce using rule 32 (iteration_statement -> while LPAREN expression RPAREN statement .)
    float           reduce using rule 32 (iteration_statement -> while LPAREN expression RPAREN statement .)
    str             reduce using rule 32 (iteration_statement -> while LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 32 (iteration_statement -> while LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 32 (iteration_statement -> while LPAREN expression RPAREN statement .)
    INCREMENT       reduce using rule 32 (iteration_statement -> while LPAREN expression RPAREN statement .)
    DECREMENT       reduce using rule 32 (iteration_statement -> while LPAREN expression RPAREN statement .)
    INTEGER         reduce using rule 32 (iteration_statement -> while LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 32 (iteration_statement -> while LPAREN expression RPAREN statement .)
    STR             reduce using rule 32 (iteration_statement -> while LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 32 (iteration_statement -> while LPAREN expression RPAREN statement .)
    else            reduce using rule 32 (iteration_statement -> while LPAREN expression RPAREN statement .)


state 133

    (33) iteration_statement -> do statement while LPAREN expression . RPAREN SEMI
    (37) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 136
    COMMA           shift and go to state 107


state 134

    (34) iteration_statement -> for LPAREN expression SEMI expression . SEMI expression RPAREN statement
    (37) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 137
    COMMA           shift and go to state 107


state 135

    (31) selection_statement -> if LPAREN expression RPAREN statement else . statement
    (21) statement -> . expression_statement
    (22) statement -> . declaration
    (23) statement -> . compound_statement
    (24) statement -> . selection_statement
    (25) statement -> . iteration_statement
    (26) statement -> . jump_statement
    (27) expression_statement -> . expression SEMI
    (7) declaration -> . init_declarator_list SEMI
    (28) compound_statement -> . LBRACE statement_list RBRACE
    (29) compound_statement -> . LBRACE RBRACE
    (30) selection_statement -> . if LPAREN expression RPAREN statement
    (31) selection_statement -> . if LPAREN expression RPAREN statement else statement
    (32) iteration_statement -> . while LPAREN expression RPAREN statement
    (33) iteration_statement -> . do statement while LPAREN expression RPAREN SEMI
    (34) iteration_statement -> . for LPAREN expression SEMI expression SEMI expression RPAREN statement
    (35) jump_statement -> . return expression SEMI
    (36) expression -> . assignment_expression
    (37) expression -> . expression COMMA assignment_expression
    (8) init_declarator_list -> . type_specifier init_declarator
    (38) assignment_expression -> . conditional_expression
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (9) type_specifier -> . int
    (10) type_specifier -> . float
    (11) type_specifier -> . str
    (40) conditional_expression -> . logical_or_expression
    (41) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (42) logical_or_expression -> . logical_and_expression
    (43) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (44) logical_and_expression -> . equality_expression
    (45) logical_and_expression -> . logical_and_expression LAND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ relational_expression
    (48) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . additive_expression
    (50) relational_expression -> . relational_expression LT additive_expression
    (51) relational_expression -> . relational_expression GT additive_expression
    (52) relational_expression -> . relational_expression LE additive_expression
    (53) relational_expression -> . relational_expression GE additive_expression
    (54) additive_expression -> . multiplicative_expression
    (55) additive_expression -> . additive_expression PLUS multiplicative_expression
    (56) additive_expression -> . additive_expression MINUS multiplicative_expression
    (57) multiplicative_expression -> . unary_expression
    (58) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (59) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (60) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (61) unary_expression -> . postfix_expression
    (62) unary_expression -> . LNOT unary_expression
    (63) unary_expression -> . MINUS unary_expression
    (64) unary_expression -> . INCREMENT unary_expression
    (65) unary_expression -> . DECREMENT unary_expression
    (66) postfix_expression -> . primary_expression
    (67) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (68) primary_expression -> . ID
    (69) primary_expression -> . INTEGER
    (70) primary_expression -> . FLOAT
    (71) primary_expression -> . STR
    (72) primary_expression -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 47
    if              shift and go to state 83
    while           shift and go to state 84
    do              shift and go to state 85
    for             shift and go to state 86
    return          shift and go to state 87
    ID              shift and go to state 24
    int             shift and go to state 7
    float           shift and go to state 8
    str             shift and go to state 9
    LNOT            shift and go to state 34
    MINUS           shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STR             shift and go to state 41
    LPAREN          shift and go to state 38

    expression                     shift and go to state 82
    statement                      shift and go to state 138
    expression_statement           shift and go to state 76
    declaration                    shift and go to state 77
    compound_statement             shift and go to state 78
    selection_statement            shift and go to state 79
    iteration_statement            shift and go to state 80
    jump_statement                 shift and go to state 81
    init_declarator_list           shift and go to state 6
    assignment_expression          shift and go to state 70
    type_specifier                 shift and go to state 88
    conditional_expression         shift and go to state 23
    logical_or_expression          shift and go to state 25
    logical_and_expression         shift and go to state 26
    equality_expression            shift and go to state 27
    relational_expression          shift and go to state 28
    additive_expression            shift and go to state 29
    multiplicative_expression      shift and go to state 30
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 33
    primary_expression             shift and go to state 37

state 136

    (33) iteration_statement -> do statement while LPAREN expression RPAREN . SEMI

    SEMI            shift and go to state 139


state 137

    (34) iteration_statement -> for LPAREN expression SEMI expression SEMI . expression RPAREN statement
    (36) expression -> . assignment_expression
    (37) expression -> . expression COMMA assignment_expression
    (38) assignment_expression -> . conditional_expression
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (40) conditional_expression -> . logical_or_expression
    (41) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (42) logical_or_expression -> . logical_and_expression
    (43) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (44) logical_and_expression -> . equality_expression
    (45) logical_and_expression -> . logical_and_expression LAND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ relational_expression
    (48) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . additive_expression
    (50) relational_expression -> . relational_expression LT additive_expression
    (51) relational_expression -> . relational_expression GT additive_expression
    (52) relational_expression -> . relational_expression LE additive_expression
    (53) relational_expression -> . relational_expression GE additive_expression
    (54) additive_expression -> . multiplicative_expression
    (55) additive_expression -> . additive_expression PLUS multiplicative_expression
    (56) additive_expression -> . additive_expression MINUS multiplicative_expression
    (57) multiplicative_expression -> . unary_expression
    (58) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (59) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (60) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (61) unary_expression -> . postfix_expression
    (62) unary_expression -> . LNOT unary_expression
    (63) unary_expression -> . MINUS unary_expression
    (64) unary_expression -> . INCREMENT unary_expression
    (65) unary_expression -> . DECREMENT unary_expression
    (66) postfix_expression -> . primary_expression
    (67) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (68) primary_expression -> . ID
    (69) primary_expression -> . INTEGER
    (70) primary_expression -> . FLOAT
    (71) primary_expression -> . STR
    (72) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 24
    LNOT            shift and go to state 34
    MINUS           shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STR             shift and go to state 41
    LPAREN          shift and go to state 38

    expression                     shift and go to state 140
    assignment_expression          shift and go to state 70
    conditional_expression         shift and go to state 23
    logical_or_expression          shift and go to state 25
    logical_and_expression         shift and go to state 26
    equality_expression            shift and go to state 27
    relational_expression          shift and go to state 28
    additive_expression            shift and go to state 29
    multiplicative_expression      shift and go to state 30
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 33
    primary_expression             shift and go to state 37

state 138

    (31) selection_statement -> if LPAREN expression RPAREN statement else statement .

    RBRACE          reduce using rule 31 (selection_statement -> if LPAREN expression RPAREN statement else statement .)
    LBRACE          reduce using rule 31 (selection_statement -> if LPAREN expression RPAREN statement else statement .)
    if              reduce using rule 31 (selection_statement -> if LPAREN expression RPAREN statement else statement .)
    while           reduce using rule 31 (selection_statement -> if LPAREN expression RPAREN statement else statement .)
    do              reduce using rule 31 (selection_statement -> if LPAREN expression RPAREN statement else statement .)
    for             reduce using rule 31 (selection_statement -> if LPAREN expression RPAREN statement else statement .)
    return          reduce using rule 31 (selection_statement -> if LPAREN expression RPAREN statement else statement .)
    ID              reduce using rule 31 (selection_statement -> if LPAREN expression RPAREN statement else statement .)
    int             reduce using rule 31 (selection_statement -> if LPAREN expression RPAREN statement else statement .)
    float           reduce using rule 31 (selection_statement -> if LPAREN expression RPAREN statement else statement .)
    str             reduce using rule 31 (selection_statement -> if LPAREN expression RPAREN statement else statement .)
    LNOT            reduce using rule 31 (selection_statement -> if LPAREN expression RPAREN statement else statement .)
    MINUS           reduce using rule 31 (selection_statement -> if LPAREN expression RPAREN statement else statement .)
    INCREMENT       reduce using rule 31 (selection_statement -> if LPAREN expression RPAREN statement else statement .)
    DECREMENT       reduce using rule 31 (selection_statement -> if LPAREN expression RPAREN statement else statement .)
    INTEGER         reduce using rule 31 (selection_statement -> if LPAREN expression RPAREN statement else statement .)
    FLOAT           reduce using rule 31 (selection_statement -> if LPAREN expression RPAREN statement else statement .)
    STR             reduce using rule 31 (selection_statement -> if LPAREN expression RPAREN statement else statement .)
    LPAREN          reduce using rule 31 (selection_statement -> if LPAREN expression RPAREN statement else statement .)
    else            reduce using rule 31 (selection_statement -> if LPAREN expression RPAREN statement else statement .)


state 139

    (33) iteration_statement -> do statement while LPAREN expression RPAREN SEMI .

    RBRACE          reduce using rule 33 (iteration_statement -> do statement while LPAREN expression RPAREN SEMI .)
    LBRACE          reduce using rule 33 (iteration_statement -> do statement while LPAREN expression RPAREN SEMI .)
    if              reduce using rule 33 (iteration_statement -> do statement while LPAREN expression RPAREN SEMI .)
    while           reduce using rule 33 (iteration_statement -> do statement while LPAREN expression RPAREN SEMI .)
    do              reduce using rule 33 (iteration_statement -> do statement while LPAREN expression RPAREN SEMI .)
    for             reduce using rule 33 (iteration_statement -> do statement while LPAREN expression RPAREN SEMI .)
    return          reduce using rule 33 (iteration_statement -> do statement while LPAREN expression RPAREN SEMI .)
    ID              reduce using rule 33 (iteration_statement -> do statement while LPAREN expression RPAREN SEMI .)
    int             reduce using rule 33 (iteration_statement -> do statement while LPAREN expression RPAREN SEMI .)
    float           reduce using rule 33 (iteration_statement -> do statement while LPAREN expression RPAREN SEMI .)
    str             reduce using rule 33 (iteration_statement -> do statement while LPAREN expression RPAREN SEMI .)
    LNOT            reduce using rule 33 (iteration_statement -> do statement while LPAREN expression RPAREN SEMI .)
    MINUS           reduce using rule 33 (iteration_statement -> do statement while LPAREN expression RPAREN SEMI .)
    INCREMENT       reduce using rule 33 (iteration_statement -> do statement while LPAREN expression RPAREN SEMI .)
    DECREMENT       reduce using rule 33 (iteration_statement -> do statement while LPAREN expression RPAREN SEMI .)
    INTEGER         reduce using rule 33 (iteration_statement -> do statement while LPAREN expression RPAREN SEMI .)
    FLOAT           reduce using rule 33 (iteration_statement -> do statement while LPAREN expression RPAREN SEMI .)
    STR             reduce using rule 33 (iteration_statement -> do statement while LPAREN expression RPAREN SEMI .)
    LPAREN          reduce using rule 33 (iteration_statement -> do statement while LPAREN expression RPAREN SEMI .)
    else            reduce using rule 33 (iteration_statement -> do statement while LPAREN expression RPAREN SEMI .)


state 140

    (34) iteration_statement -> for LPAREN expression SEMI expression SEMI expression . RPAREN statement
    (37) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 141
    COMMA           shift and go to state 107


state 141

    (34) iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN . statement
    (21) statement -> . expression_statement
    (22) statement -> . declaration
    (23) statement -> . compound_statement
    (24) statement -> . selection_statement
    (25) statement -> . iteration_statement
    (26) statement -> . jump_statement
    (27) expression_statement -> . expression SEMI
    (7) declaration -> . init_declarator_list SEMI
    (28) compound_statement -> . LBRACE statement_list RBRACE
    (29) compound_statement -> . LBRACE RBRACE
    (30) selection_statement -> . if LPAREN expression RPAREN statement
    (31) selection_statement -> . if LPAREN expression RPAREN statement else statement
    (32) iteration_statement -> . while LPAREN expression RPAREN statement
    (33) iteration_statement -> . do statement while LPAREN expression RPAREN SEMI
    (34) iteration_statement -> . for LPAREN expression SEMI expression SEMI expression RPAREN statement
    (35) jump_statement -> . return expression SEMI
    (36) expression -> . assignment_expression
    (37) expression -> . expression COMMA assignment_expression
    (8) init_declarator_list -> . type_specifier init_declarator
    (38) assignment_expression -> . conditional_expression
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (9) type_specifier -> . int
    (10) type_specifier -> . float
    (11) type_specifier -> . str
    (40) conditional_expression -> . logical_or_expression
    (41) conditional_expression -> . logical_or_expression TERNARY expression COLON conditional_expression
    (42) logical_or_expression -> . logical_and_expression
    (43) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (44) logical_and_expression -> . equality_expression
    (45) logical_and_expression -> . logical_and_expression LAND equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ relational_expression
    (48) equality_expression -> . equality_expression NE relational_expression
    (49) relational_expression -> . additive_expression
    (50) relational_expression -> . relational_expression LT additive_expression
    (51) relational_expression -> . relational_expression GT additive_expression
    (52) relational_expression -> . relational_expression LE additive_expression
    (53) relational_expression -> . relational_expression GE additive_expression
    (54) additive_expression -> . multiplicative_expression
    (55) additive_expression -> . additive_expression PLUS multiplicative_expression
    (56) additive_expression -> . additive_expression MINUS multiplicative_expression
    (57) multiplicative_expression -> . unary_expression
    (58) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (59) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (60) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (61) unary_expression -> . postfix_expression
    (62) unary_expression -> . LNOT unary_expression
    (63) unary_expression -> . MINUS unary_expression
    (64) unary_expression -> . INCREMENT unary_expression
    (65) unary_expression -> . DECREMENT unary_expression
    (66) postfix_expression -> . primary_expression
    (67) postfix_expression -> . ID LPAREN argument_expression_list RPAREN
    (68) primary_expression -> . ID
    (69) primary_expression -> . INTEGER
    (70) primary_expression -> . FLOAT
    (71) primary_expression -> . STR
    (72) primary_expression -> . LPAREN expression RPAREN

    LBRACE          shift and go to state 47
    if              shift and go to state 83
    while           shift and go to state 84
    do              shift and go to state 85
    for             shift and go to state 86
    return          shift and go to state 87
    ID              shift and go to state 24
    int             shift and go to state 7
    float           shift and go to state 8
    str             shift and go to state 9
    LNOT            shift and go to state 34
    MINUS           shift and go to state 31
    INCREMENT       shift and go to state 35
    DECREMENT       shift and go to state 36
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STR             shift and go to state 41
    LPAREN          shift and go to state 38

    expression                     shift and go to state 82
    statement                      shift and go to state 142
    expression_statement           shift and go to state 76
    declaration                    shift and go to state 77
    compound_statement             shift and go to state 78
    selection_statement            shift and go to state 79
    iteration_statement            shift and go to state 80
    jump_statement                 shift and go to state 81
    init_declarator_list           shift and go to state 6
    assignment_expression          shift and go to state 70
    type_specifier                 shift and go to state 88
    conditional_expression         shift and go to state 23
    logical_or_expression          shift and go to state 25
    logical_and_expression         shift and go to state 26
    equality_expression            shift and go to state 27
    relational_expression          shift and go to state 28
    additive_expression            shift and go to state 29
    multiplicative_expression      shift and go to state 30
    unary_expression               shift and go to state 32
    postfix_expression             shift and go to state 33
    primary_expression             shift and go to state 37

state 142

    (34) iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .

    RBRACE          reduce using rule 34 (iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    LBRACE          reduce using rule 34 (iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    if              reduce using rule 34 (iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    while           reduce using rule 34 (iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    do              reduce using rule 34 (iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    for             reduce using rule 34 (iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    return          reduce using rule 34 (iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    ID              reduce using rule 34 (iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    int             reduce using rule 34 (iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    float           reduce using rule 34 (iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    str             reduce using rule 34 (iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    LNOT            reduce using rule 34 (iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    MINUS           reduce using rule 34 (iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    INCREMENT       reduce using rule 34 (iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    DECREMENT       reduce using rule 34 (iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    INTEGER         reduce using rule 34 (iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    FLOAT           reduce using rule 34 (iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    STR             reduce using rule 34 (iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    LPAREN          reduce using rule 34 (iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .)
    else            reduce using rule 34 (iteration_statement -> for LPAREN expression SEMI expression SEMI expression RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for else in state 131 resolved as shift
